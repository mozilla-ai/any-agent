# serializer version: 1
# name: test_agent_trace_snapshot[AGNO_trace].121632221196637177843379169697936613240
  dict({
    'final_output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "<instructions>\\nSearch the web to answer\\n</instructions>"}, {"role": "user", "content": "Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\":\\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 6.48e-05,
          'gen_ai.usage.input_tokens': 162,
          'gen_ai.usage.output_cost': 2.88e-05,
          'gen_ai.usage.output_tokens': 18,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11751042686753155466,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 121632221196637177843379169697936613240,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748017315783858830,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 2875610782938054437,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 121632221196637177843379169697936613240,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748017314553691041,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-05-23T12:21:55-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.call.id': 'call_CcPv9SQWgipfoV2LjZYFcwGt',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12280161047077558919,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 121632221196637177843379169697936613240,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748017315790114695,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 2875610782938054437,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 121632221196637177843379169697936613240,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748017315786996616,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\":\\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 9.2e-05,
          'gen_ai.usage.input_tokens': 230,
          'gen_ai.usage.output_cost': 2.4e-05,
          'gen_ai.usage.output_tokens': 15,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8299476656446673082,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 121632221196637177843379169697936613240,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748017316730237649,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 2875610782938054437,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 121632221196637177843379169697936613240,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748017315791442695,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': 'None',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.call.id': 'call_ZEmqpxmxnyBXuETm96uQQgF6',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 18396111017701552013,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 121632221196637177843379169697936613240,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748017316733892333,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 2875610782938054437,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 121632221196637177843379169697936613240,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748017316732411601,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.00010159999999999999,
          'gen_ai.usage.input_tokens': 254,
          'gen_ai.usage.output_cost': 3.9999999999999996e-05,
          'gen_ai.usage.output_tokens': 25,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8215259236248644056,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 121632221196637177843379169697936613240,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748017317848963020,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 2875610782938054437,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 121632221196637177843379169697936613240,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748017316738746204,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.id': '14a644da-31d2-4818-89b7-2e7844e4a534',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2875610782938054437,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 121632221196637177843379169697936613240,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748017318392789223,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748017314550216423,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[GOOGLE_trace].28053476307153897095985874013089268018
  dict({
    'final_output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Search the web to answer\\n\\nYou are an agent. Your internal name is \\"any_agent\\"."}, {"role": "user", "content": "Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": {"timezone": "America/New_York"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5803470848066323980,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 28053476307153897095985874013089268018,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991227903770738,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 11155724855401114569,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 28053476307153897095985874013089268018,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991226694049381,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-05-23T05:07:07-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.call.id': 'call_JPgS1C8NTEI701ZuqBtjvuFd',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 13270727081624772244,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 28053476307153897095985874013089268018,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991227910761703,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 18379843455269747626,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 28053476307153897095985874013089268018,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991227906977725,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": {"text": "2025"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15153050904573085875,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 28053476307153897095985874013089268018,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991228893981853,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 11155724855401114569,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 28053476307153897095985874013089268018,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991227913382512,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.call.id': 'call_XyakaXl4HOpBVRErsKrUNZXL',
          'gen_ai.tool.description': '''
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
  
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9842881641966947846,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 28053476307153897095985874013089268018,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991228895827595,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 13023521479223370480,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 28053476307153897095985874013089268018,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991228895520735,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14701570055471765055,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 28053476307153897095985874013089268018,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991230144669207,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 11155724855401114569,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 28053476307153897095985874013089268018,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991228897275417,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.id': '0c5ca197-379c-479c-b234-c9519d6d7c3e',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6839782218696221245,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 28053476307153897095985874013089268018,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991230157536318,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991226692778733,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[LANGCHAIN_trace].236894353499435245683764939529566956342
  dict({
    'final_output': 'The year in the America/New_York timezone is 2025. I have written this value to a file.',
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Search the web to answer"}, {"role": "user", "content": "Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": {"timezone": "America/New_York"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.0001152,
          'gen_ai.usage.input_tokens': 288,
          'gen_ai.usage.output_cost': 2.88e-05,
          'gen_ai.usage.output_tokens': 18,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 18064023037953250460,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 236894353499435245683764939529566956342,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991239388091868,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 17362222268358791426,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 236894353499435245683764939529566956342,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991234958996132,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-05-23T05:07:19-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.call.id': 'call_fbrN0kilC2f3raYHNKXBNulz',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10283280339965173683,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 236894353499435245683764939529566956342,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991239407392403,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 17362222268358791426,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 236894353499435245683764939529566956342,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991239402401601,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": {"text": "2025"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.0001424,
          'gen_ai.usage.input_tokens': 356,
          'gen_ai.usage.output_cost': 2.4e-05,
          'gen_ai.usage.output_tokens': 15,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 296801625907959440,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 236894353499435245683764939529566956342,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991240221315632,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 17362222268358791426,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 236894353499435245683764939529566956342,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991239412868256,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': 'null',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.call.id': 'call_sIGhqDw5QMlYVcECbBwpHGqn',
          'gen_ai.tool.description': '''
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6361513587621442789,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 236894353499435245683764939529566956342,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991240227366907,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 17362222268358791426,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 236894353499435245683764939529566956342,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991240226822080,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': 'The year in the America/New_York timezone is 2025. I have written this value to a file.',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.00015199999999999998,
          'gen_ai.usage.input_tokens': 380,
          'gen_ai.usage.output_cost': 3.84e-05,
          'gen_ai.usage.output_tokens': 24,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15826792517270760470,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 236894353499435245683764939529566956342,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991241094825950,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 17362222268358791426,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 236894353499435245683764939529566956342,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991240231013250,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.id': '656aedd9-d4f9-42b1-b46e-6d091360f205',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17362222268358791426,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 236894353499435245683764939529566956342,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991241106860339,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991234953172799,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[LLAMA_INDEX_trace].78516547355069405391128177895448356528
  dict({
    'final_output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Search the web to answer"}, {"role": "user", "content": "Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\":\\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 7.2e-05,
          'gen_ai.usage.input_tokens': 180,
          'gen_ai.usage.output_cost': 2.88e-05,
          'gen_ai.usage.output_tokens': 18,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3636368202541483220,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 78516547355069405391128177895448356528,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991246796371312,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 17704202346950947146,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 78516547355069405391128177895448356528,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991245786753117,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\":\\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.00010839999999999999,
          'gen_ai.usage.input_tokens': 271,
          'gen_ai.usage.output_cost': 2.4e-05,
          'gen_ai.usage.output_tokens': 15,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11635965035538482726,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 78516547355069405391128177895448356528,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991247940802865,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 17704202346950947146,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 78516547355069405391128177895448356528,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991247232751029,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.000118,
          'gen_ai.usage.input_tokens': 295,
          'gen_ai.usage.output_cost': 3.9999999999999996e-05,
          'gen_ai.usage.output_tokens': 25,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6944444419934942753,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 78516547355069405391128177895448356528,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991248984905876,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 17704202346950947146,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 78516547355069405391128177895448356528,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991247961288823,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.id': 'c3d5b368-8c7e-428e-a9fe-dd7709f91d83',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17704202346950947146,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 78516547355069405391128177895448356528,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991248998644521,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991245782202885,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[OPENAI_trace].328882177946230662441652585419408454792
  dict({
    'final_output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\":\\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.00011439999999999999,
          'gen_ai.usage.input_tokens': 286,
          'gen_ai.usage.output_cost': 2.88e-05,
          'gen_ai.usage.output_tokens': 18,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14729773906671600587,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328882177946230662441652585419408454792,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991254365541499,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 15874837431059677289,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328882177946230662441652585419408454792,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991253176773492,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"type":"text","text":"{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-05-23T05:07:34-04:00\\",\\n  \\"is_dst\\": true\\n}","annotations":null}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2547914189761821414,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328882177946230662441652585419408454792,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991254375297492,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 15874837431059677289,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328882177946230662441652585419408454792,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991254373300804,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\":\\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.00014759999999999998,
          'gen_ai.usage.input_tokens': 369,
          'gen_ai.usage.output_cost': 2.4e-05,
          'gen_ai.usage.output_tokens': 15,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7660342754948364353,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328882177946230662441652585419408454792,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991255401379523,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 15874837431059677289,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328882177946230662441652585419408454792,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991254379478250,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': 'no_output',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9754023593290466314,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328882177946230662441652585419408454792,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991255408666678,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 15874837431059677289,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328882177946230662441652585419408454792,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991255408420912,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.0001572,
          'gen_ai.usage.input_tokens': 393,
          'gen_ai.usage.output_cost': 3.9999999999999996e-05,
          'gen_ai.usage.output_tokens': 25,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17881884901026106193,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328882177946230662441652585419408454792,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991256483714314,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 15874837431059677289,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328882177946230662441652585419408454792,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991255420773557,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.id': 'e5541cbf-cef1-4b7c-b582-1db9d9bdcd04',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15874837431059677289,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328882177946230662441652585419408454792,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991256508338136,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991253174117571,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[SMOLAGENTS_trace].293543073089470190400644404600914487249
  dict({
    'final_output': 'The year in the America/New_York timezone is 2025.',
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Search the web to answer"}, {"role": "user", "content": "New task:\\nUse the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\":\\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.response.model': 'gpt-4.1-mini-2025-04-14',
          'gen_ai.usage.input_cost': 0.0001248,
          'gen_ai.usage.input_tokens': 312,
          'gen_ai.usage.output_cost': 2.88e-05,
          'gen_ai.usage.output_tokens': 18,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 754210989416909809,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 293543073089470190400644404600914487249,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991275305797581,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 13183491266286636008,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 293543073089470190400644404600914487249,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991272742419982,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-05-23T05:07:55-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.tool.args': '{"timezone": "America/New_York", "sanitize_inputs_outputs": true}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6613576937591678063,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 293543073089470190400644404600914487249,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991275326260932,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 13183491266286636008,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 293543073089470190400644404600914487249,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991275323394171,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\":\\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.response.model': 'gpt-4.1-mini-2025-04-14',
          'gen_ai.usage.input_cost': 0.0001752,
          'gen_ai.usage.input_tokens': 438,
          'gen_ai.usage.output_cost': 2.4e-05,
          'gen_ai.usage.output_tokens': 15,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15567211083207318309,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 293543073089470190400644404600914487249,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991276173770567,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 13183491266286636008,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 293543073089470190400644404600914487249,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991275334294354,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.tool.args': '{"text": "2025", "sanitize_inputs_outputs": true}',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9261286526032903138,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 293543073089470190400644404600914487249,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991276185503431,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 13183491266286636008,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 293543073089470190400644404600914487249,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991276185051710,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_answer", "tool.args": "{\\"answer\\":\\"The year in the America/New_York timezone is 2025.\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.response.model': 'gpt-4.1-mini-2025-04-14',
          'gen_ai.usage.input_cost': 0.0002084,
          'gen_ai.usage.input_tokens': 521,
          'gen_ai.usage.output_cost': 4.32e-05,
          'gen_ai.usage.output_tokens': 27,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8272193139928082598,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 293543073089470190400644404600914487249,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991276976378829,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 13183491266286636008,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 293543073089470190400644404600914487249,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991276191972862,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': 'The year in the America/New_York timezone is 2025.',
          'gen_ai.output.type': 'text',
          'gen_ai.tool.args': '{"answer": "The year in the America/New_York timezone is 2025.", "sanitize_inputs_outputs": true}',
          'gen_ai.tool.description': 'Provides a final answer to the given problem.',
          'gen_ai.tool.name': 'final_answer',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12821102185806441404,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 293543073089470190400644404600914487249,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991276995353475,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_answer',
        'parent': dict({
          'is_remote': False,
          'span_id': 13183491266286636008,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 293543073089470190400644404600914487249,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991276995302847,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.id': '9877711e-a971-43de-b30b-a687764cfbcd',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 13183491266286636008,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 293543073089470190400644404600914487249,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991277022649147,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991272741898445,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[TINYAGENT_trace].196569154433669421501737256662517870281
  dict({
    'final_output': 'None',
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Search the web to answer"}, {"role": "user", "content": "Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\":\\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.response.model': 'gpt-4.1-mini-2025-04-14',
          'gen_ai.usage.input_cost': 0.0001252,
          'gen_ai.usage.input_tokens': 313,
          'gen_ai.usage.output_cost': 2.88e-05,
          'gen_ai.usage.output_tokens': 18,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14059652558074215883,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 196569154433669421501737256662517870281,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991281779865053,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 3074236338790661290,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 196569154433669421501737256662517870281,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991280912033861,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '"meta=None content=[TextContent(type=\'text\', text=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-23T05:08:01-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\', annotations=None)] isError=False"',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2064833254105184221,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 196569154433669421501737256662517870281,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991281804021952,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 3074236338790661290,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 196569154433669421501737256662517870281,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991281801200114,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\":\\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.response.model': 'gpt-4.1-mini-2025-04-14',
          'gen_ai.usage.input_cost': 0.0001616,
          'gen_ai.usage.input_tokens': 404,
          'gen_ai.usage.output_cost': 2.4e-05,
          'gen_ai.usage.output_tokens': 15,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8976891322793823943,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 196569154433669421501737256662517870281,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991282599822824,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 3074236338790661290,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 196569154433669421501737256662517870281,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991281820173111,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '"None"',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4900281067057149207,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 196569154433669421501737256662517870281,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991282617896746,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 3074236338790661290,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 196569154433669421501737256662517870281,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991282617749496,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "task_complete", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.response.model': 'gpt-4.1-mini-2025-04-14',
          'gen_ai.usage.input_cost': 0.0001712,
          'gen_ai.usage.input_tokens': 428,
          'gen_ai.usage.output_cost': 1.6e-05,
          'gen_ai.usage.output_tokens': 10,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2260797124630130500,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 196569154433669421501737256662517870281,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991283335358032,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 3074236338790661290,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 196569154433669421501737256662517870281,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991282633651878,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.id': '4849c790-b456-4fcd-8064-92c26636c1a6',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3074236338790661290,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 196569154433669421501737256662517870281,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747991283351005244,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747991280909252942,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
