# serializer version: 1
# name: test_agent_trace_snapshot[LANGCHAIN_trace].114887179090047558076556919547307696398
  dict({
    'final_output': 'The year in the America/New_York timezone is 2025. I have written this value to a file.',
    'spans': list([
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"messages": ["content=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\' additional_kwargs={} response_metadata={} id=\'8fb2c881-3e07-43b6-8d21-f4f7d24131f9\'"], "is_last_step": false, "remaining_steps": 24}',
          'llm.input_messages.0.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.0.message.role': 'user',
          'metadata': '{"langgraph_step": 1, "langgraph_node": "agent", "langgraph_triggers": ["branch:to:agent"], "langgraph_path": ["__pregel_pull", "agent"], "langgraph_checkpoint_ns": "agent:c1fb7a8d-1dee-d116-ab7d-a744a1b0673e", "checkpoint_ns": "agent:c1fb7a8d-1dee-d116-ab7d-a744a1b0673e"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"output": ["content=\'Search the web to answer\' additional_kwargs={} response_metadata={}", "content=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\' additional_kwargs={} response_metadata={} id=\'8fb2c881-3e07-43b6-8d21-f4f7d24131f9\'"]}',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11252034171946893635,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703769450070016,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'Prompt',
        'parent': dict({
          'is_remote': False,
          'span_id': 9082541568057802831,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703769449989120,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'cost_completion': 0.0,
          'cost_prompt': 0.0001152,
          'input.mime_type': 'application/json',
          'input.value': '{"messages": [[{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "messages", "SystemMessage"], "kwargs": {"content": "Search the web to answer", "type": "system"}}, {"lc": 1, "type": "constructor", "id": ["langchain", "schema", "messages", "HumanMessage"], "kwargs": {"content": "Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file", "type": "human", "id": "8fb2c881-3e07-43b6-8d21-f4f7d24131f9"}}]]}',
          'llm.input_messages.0.message.content': 'Search the web to answer',
          'llm.input_messages.0.message.role': 'system',
          'llm.input_messages.1.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.1.message.role': 'user',
          'llm.invocation_parameters': '{"model": "gpt-4.1-mini", "temperature": null, "top_p": null, "top_k": null, "n": null, "_type": "litellm-chat", "stop": null, "tools": [{"type": "function", "function": {"name": "write_file", "description": "write the text to a file in the tmp_path directory\\n\\n        Args:\\n            text (str): The text to write to the file.\\n\\n        Returns:\\n            None", "parameters": {"properties": {"text": {"type": "string"}}, "required": ["text"], "type": "object"}}}, {"type": "function", "function": {"name": "get_current_time", "description": "Get current time in a specific timezones", "parameters": {"type": "object", "properties": {"timezone": {"type": "string", "description": "IANA timezone name (e.g., \'America/New_York\', \'Europe/London\'). Use \'America/New_York\' as local timezone if no timezone provided by the user."}}, "required": ["timezone"]}}}, {"type": "function", "function": {"name": "convert_time", "description": "Convert time between timezones", "parameters": {"type": "object", "properties": {"source_timezone": {"type": "string", "description": "Source IANA timezone name (e.g., \'America/New_York\', \'Europe/London\'). Use \'America/New_York\' as local timezone if no source timezone provided by the user."}, "time": {"type": "string", "description": "Time to convert in 24-hour format (HH:MM)"}, "target_timezone": {"type": "string", "description": "Target IANA timezone name (e.g., \'Asia/Tokyo\', \'America/San_Francisco\'). Use \'America/New_York\' as local timezone if no target timezone provided by the user."}}, "required": ["source_timezone", "time", "target_timezone"]}}}], "tool_choice": null}',
          'llm.model_name': 'gpt-4.1-mini',
          'llm.output_messages.0.message.role': 'assistant',
          'llm.token_count.completion': 18,
          'llm.token_count.completion_details.audio': 0,
          'llm.token_count.completion_details.reasoning': 0,
          'llm.token_count.prompt': 288,
          'llm.token_count.prompt_details.audio': 0,
          'llm.token_count.prompt_details.cache_read': 0,
          'llm.token_count.total': 306,
          'metadata': '{"langgraph_step": 1, "langgraph_node": "agent", "langgraph_triggers": ["branch:to:agent"], "langgraph_path": ["__pregel_pull", "agent"], "langgraph_checkpoint_ns": "agent:c1fb7a8d-1dee-d116-ab7d-a744a1b0673e", "checkpoint_ns": "agent:c1fb7a8d-1dee-d116-ab7d-a744a1b0673e", "ls_provider": "litellm", "ls_model_type": "chat", "ls_model_name": "gpt-4.1-mini"}',
          'openinference.span.kind': 'LLM',
          'output.mime_type': 'application/json',
          'output.value': '{"generations": [[{"generation_info": {"finish_reason": "tool_calls"}, "type": "ChatGeneration", "message": {"lc": 1, "type": "constructor", "id": ["langchain", "schema", "messages", "AIMessage"], "kwargs": {"content": "", "additional_kwargs": {"tool_calls": [{"lc": 1, "type": "not_implemented", "id": ["litellm", "types", "utils", "ChatCompletionMessageToolCall"], "repr": "ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')"}]}, "response_metadata": {"token_usage": {"lc": 1, "type": "not_implemented", "id": ["litellm", "types", "utils", "Usage"], "repr": "Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None))"}, "model": "gpt-4.1-mini", "finish_reason": "tool_calls", "model_name": "gpt-4.1-mini"}, "type": "ai", "id": "run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0", "tool_calls": [{"name": "get_current_time", "args": {"timezone": "America/New_York"}, "id": "call_oIYbXNQqRjJgFevQEzCA4lUE", "type": "tool_call"}], "usage_metadata": {"input_tokens": 288, "output_tokens": 18, "total_tokens": 306}, "invalid_tool_calls": []}}, "text": ""}]], "llm_output": {"token_usage": {"completion_tokens": 18, "prompt_tokens": 288, "total_tokens": 306, "completion_tokens_details": {"accepted_prediction_tokens": 0, "audio_tokens": 0, "reasoning_tokens": 0, "rejected_prediction_tokens": 0}, "prompt_tokens_details": {"audio_tokens": 0, "cached_tokens": 0}}, "model": "gpt-4.1-mini"}, "run": null, "type": "LLMResult"}',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14718199334231172998,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770412512000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'ChatLiteLLM',
        'parent': dict({
          'is_remote': False,
          'span_id': 9082541568057802831,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703769450638080,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"messages": ["content=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\' additional_kwargs={} response_metadata={} id=\'8fb2c881-3e07-43b6-8d21-f4f7d24131f9\'"], "is_last_step": false, "remaining_steps": 24}',
          'llm.input_messages.0.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.0.message.role': 'user',
          'metadata': '{"langgraph_step": 1, "langgraph_node": "agent", "langgraph_triggers": ["branch:to:agent"], "langgraph_path": ["__pregel_pull", "agent"], "langgraph_checkpoint_ns": "agent:c1fb7a8d-1dee-d116-ab7d-a744a1b0673e", "checkpoint_ns": "agent:c1fb7a8d-1dee-d116-ab7d-a744a1b0673e"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"output": "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} id=\'run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0\' tool_calls=[{\'name\': \'get_current_time\', \'args\': {\'timezone\': \'America/New_York\'}, \'id\': \'call_oIYbXNQqRjJgFevQEzCA4lUE\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 288, \'output_tokens\': 18, \'total_tokens\': 306}"}',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9082541568057802831,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770415116032,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'RunnableSequence',
        'parent': dict({
          'is_remote': False,
          'span_id': 34733804761410838,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703769449754112,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"messages": ["content=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\' additional_kwargs={} response_metadata={} id=\'8fb2c881-3e07-43b6-8d21-f4f7d24131f9\'"], "is_last_step": false, "remaining_steps": 24}',
          'llm.input_messages.0.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.0.message.role': 'user',
          'metadata': '{"langgraph_step": 1, "langgraph_node": "agent", "langgraph_triggers": ["branch:to:agent"], "langgraph_path": ["__pregel_pull", "agent"], "langgraph_checkpoint_ns": "agent:c1fb7a8d-1dee-d116-ab7d-a744a1b0673e"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"messages": ["content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0\' tool_calls=[{\'name\': \'get_current_time\', \'args\': {\'timezone\': \'America/New_York\'}, \'id\': \'call_oIYbXNQqRjJgFevQEzCA4lUE\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 288, \'output_tokens\': 18, \'total_tokens\': 306}"]}',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3915781595422775233,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770415728128,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_model',
        'parent': dict({
          'is_remote': False,
          'span_id': 34733804761410838,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703769447772928,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"messages": ["content=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\' additional_kwargs={} response_metadata={} id=\'8fb2c881-3e07-43b6-8d21-f4f7d24131f9\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0\' tool_calls=[{\'name\': \'get_current_time\', \'args\': {\'timezone\': \'America/New_York\'}, \'id\': \'call_oIYbXNQqRjJgFevQEzCA4lUE\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 288, \'output_tokens\': 18, \'total_tokens\': 306}"], "is_last_step": false, "remaining_steps": 24}',
          'llm.input_messages.0.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.0.message.role': 'user',
          'metadata': '{"langgraph_step": 1, "langgraph_node": "agent", "langgraph_triggers": ["branch:to:agent"], "langgraph_path": ["__pregel_pull", "agent"], "langgraph_checkpoint_ns": "agent:c1fb7a8d-1dee-d116-ab7d-a744a1b0673e"}',
          'openinference.span.kind': 'CHAIN',
          'output.value': 'tools',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 13415282657293315558,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770416975872,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'should_continue',
        'parent': dict({
          'is_remote': False,
          'span_id': 34733804761410838,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703770416523008,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"messages": ["content=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\' additional_kwargs={} response_metadata={} id=\'8fb2c881-3e07-43b6-8d21-f4f7d24131f9\'"], "is_last_step": false, "remaining_steps": 24}',
          'llm.input_messages.0.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.0.message.role': 'user',
          'metadata': '{"langgraph_step": 1, "langgraph_node": "agent", "langgraph_triggers": ["branch:to:agent"], "langgraph_path": ["__pregel_pull", "agent"], "langgraph_checkpoint_ns": "agent:c1fb7a8d-1dee-d116-ab7d-a744a1b0673e"}',
          'openinference.span.kind': 'AGENT',
          'output.mime_type': 'application/json',
          'output.value': '{"messages": ["content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0\' tool_calls=[{\'name\': \'get_current_time\', \'args\': {\'timezone\': \'America/New_York\'}, \'id\': \'call_oIYbXNQqRjJgFevQEzCA4lUE\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 288, \'output_tokens\': 18, \'total_tokens\': 306}"]}',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 34733804761410838,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770417395968,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'agent',
        'parent': dict({
          'is_remote': False,
          'span_id': 9343218972044743962,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703769447567104,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.value': "{'timezone': 'America/New_York'}",
          'metadata': '{"langgraph_step": 2, "langgraph_node": "tools", "langgraph_triggers": ["branch:to:tools"], "langgraph_path": ["__pregel_pull", "tools"], "langgraph_checkpoint_ns": "tools:781e0d58-c6ac-fbc0-9675-4212bd578658", "checkpoint_ns": "tools:781e0d58-c6ac-fbc0-9675-4212bd578658"}',
          'openinference.span.kind': 'TOOL',
          'output.mime_type': 'application/json',
          'output.value': '{"output": "content=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\' name=\'get_current_time\' tool_call_id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\'"}',
          'service.name': 'langchain',
          'tool.description': 'Get current time in a specific timezones',
          'tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17059935400491356848,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770422269952,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 6190536795910454692,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703770419611904,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"messages": ["content=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\' additional_kwargs={} response_metadata={} id=\'8fb2c881-3e07-43b6-8d21-f4f7d24131f9\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0\' tool_calls=[{\'name\': \'get_current_time\', \'args\': {\'timezone\': \'America/New_York\'}, \'id\': \'call_oIYbXNQqRjJgFevQEzCA4lUE\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 288, \'output_tokens\': 18, \'total_tokens\': 306}"], "is_last_step": false, "remaining_steps": 23}',
          'llm.input_messages.0.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.0.message.role': 'user',
          'metadata': '{"langgraph_step": 2, "langgraph_node": "tools", "langgraph_triggers": ["branch:to:tools"], "langgraph_path": ["__pregel_pull", "tools"], "langgraph_checkpoint_ns": "tools:781e0d58-c6ac-fbc0-9675-4212bd578658"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"messages": ["content=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\' name=\'get_current_time\' tool_call_id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\'"]}',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6190536795910454692,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770424541952,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'tools',
        'parent': dict({
          'is_remote': False,
          'span_id': 9343218972044743962,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703770419207168,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"messages": ["content=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\' additional_kwargs={} response_metadata={} id=\'8fb2c881-3e07-43b6-8d21-f4f7d24131f9\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0\' tool_calls=[{\'name\': \'get_current_time\', \'args\': {\'timezone\': \'America/New_York\'}, \'id\': \'call_oIYbXNQqRjJgFevQEzCA4lUE\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 288, \'output_tokens\': 18, \'total_tokens\': 306}", "content=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\' name=\'get_current_time\' id=\'8c9b293b-5636-4de1-8ea6-edc537fb8f5e\' tool_call_id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\'"], "is_last_step": false, "remaining_steps": 22}',
          'llm.input_messages.0.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.0.message.role': 'user',
          'metadata': '{"langgraph_step": 3, "langgraph_node": "agent", "langgraph_triggers": ["branch:to:agent"], "langgraph_path": ["__pregel_pull", "agent"], "langgraph_checkpoint_ns": "agent:c58f0c73-f686-cb7f-fbd2-93ab5fb22f89", "checkpoint_ns": "agent:c58f0c73-f686-cb7f-fbd2-93ab5fb22f89"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"output": ["content=\'Search the web to answer\' additional_kwargs={} response_metadata={}", "content=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\' additional_kwargs={} response_metadata={} id=\'8fb2c881-3e07-43b6-8d21-f4f7d24131f9\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0\' tool_calls=[{\'name\': \'get_current_time\', \'args\': {\'timezone\': \'America/New_York\'}, \'id\': \'call_oIYbXNQqRjJgFevQEzCA4lUE\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 288, \'output_tokens\': 18, \'total_tokens\': 306}", "content=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\' name=\'get_current_time\' id=\'8c9b293b-5636-4de1-8ea6-edc537fb8f5e\' tool_call_id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\'"]}',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12994016831745941968,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770426115072,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'Prompt',
        'parent': dict({
          'is_remote': False,
          'span_id': 3115496561697237387,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703770426040832,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'cost_completion': 0.0,
          'cost_prompt': 0.0001424,
          'input.mime_type': 'application/json',
          'input.value': '{"messages": [[{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "messages", "SystemMessage"], "kwargs": {"content": "Search the web to answer", "type": "system"}}, {"lc": 1, "type": "constructor", "id": ["langchain", "schema", "messages", "HumanMessage"], "kwargs": {"content": "Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file", "type": "human", "id": "8fb2c881-3e07-43b6-8d21-f4f7d24131f9"}}, {"lc": 1, "type": "constructor", "id": ["langchain", "schema", "messages", "AIMessage"], "kwargs": {"content": "", "additional_kwargs": {"tool_calls": [{"lc": 1, "type": "not_implemented", "id": ["litellm", "types", "utils", "ChatCompletionMessageToolCall"], "repr": "ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')"}]}, "response_metadata": {"token_usage": {"lc": 1, "type": "not_implemented", "id": ["litellm", "types", "utils", "Usage"], "repr": "Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None))"}, "model": "gpt-4.1-mini", "finish_reason": "tool_calls", "model_name": "gpt-4.1-mini"}, "type": "ai", "name": "any_agent", "id": "run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0", "tool_calls": [{"name": "get_current_time", "args": {"timezone": "America/New_York"}, "id": "call_oIYbXNQqRjJgFevQEzCA4lUE", "type": "tool_call"}], "usage_metadata": {"input_tokens": 288, "output_tokens": 18, "total_tokens": 306}, "invalid_tool_calls": []}}, {"lc": 1, "type": "constructor", "id": ["langchain", "schema", "messages", "ToolMessage"], "kwargs": {"content": "{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\n  \\"is_dst\\": true\\n}", "type": "tool", "name": "get_current_time", "id": "8c9b293b-5636-4de1-8ea6-edc537fb8f5e", "tool_call_id": "call_oIYbXNQqRjJgFevQEzCA4lUE", "status": "success"}}]]}',
          'llm.input_messages.0.message.content': 'Search the web to answer',
          'llm.input_messages.0.message.role': 'system',
          'llm.input_messages.1.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.1.message.role': 'user',
          'llm.input_messages.2.message.name': 'any_agent',
          'llm.input_messages.2.message.role': 'assistant',
          'llm.input_messages.3.message.content': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-05-19T21:16:10-04:00",
              "is_dst": true
            }
          ''',
          'llm.input_messages.3.message.name': 'get_current_time',
          'llm.input_messages.3.message.role': 'tool',
          'llm.input_messages.3.message.tool_call_id': 'call_oIYbXNQqRjJgFevQEzCA4lUE',
          'llm.invocation_parameters': '{"model": "gpt-4.1-mini", "temperature": null, "top_p": null, "top_k": null, "n": null, "_type": "litellm-chat", "stop": null, "tools": [{"type": "function", "function": {"name": "write_file", "description": "write the text to a file in the tmp_path directory\\n\\n        Args:\\n            text (str): The text to write to the file.\\n\\n        Returns:\\n            None", "parameters": {"properties": {"text": {"type": "string"}}, "required": ["text"], "type": "object"}}}, {"type": "function", "function": {"name": "get_current_time", "description": "Get current time in a specific timezones", "parameters": {"type": "object", "properties": {"timezone": {"type": "string", "description": "IANA timezone name (e.g., \'America/New_York\', \'Europe/London\'). Use \'America/New_York\' as local timezone if no timezone provided by the user."}}, "required": ["timezone"]}}}, {"type": "function", "function": {"name": "convert_time", "description": "Convert time between timezones", "parameters": {"type": "object", "properties": {"source_timezone": {"type": "string", "description": "Source IANA timezone name (e.g., \'America/New_York\', \'Europe/London\'). Use \'America/New_York\' as local timezone if no source timezone provided by the user."}, "time": {"type": "string", "description": "Time to convert in 24-hour format (HH:MM)"}, "target_timezone": {"type": "string", "description": "Target IANA timezone name (e.g., \'Asia/Tokyo\', \'America/San_Francisco\'). Use \'America/New_York\' as local timezone if no target timezone provided by the user."}}, "required": ["source_timezone", "time", "target_timezone"]}}}], "tool_choice": null}',
          'llm.model_name': 'gpt-4.1-mini',
          'llm.output_messages.0.message.role': 'assistant',
          'llm.token_count.completion': 15,
          'llm.token_count.completion_details.audio': 0,
          'llm.token_count.completion_details.reasoning': 0,
          'llm.token_count.prompt': 356,
          'llm.token_count.prompt_details.audio': 0,
          'llm.token_count.prompt_details.cache_read': 0,
          'llm.token_count.total': 371,
          'metadata': '{"langgraph_step": 3, "langgraph_node": "agent", "langgraph_triggers": ["branch:to:agent"], "langgraph_path": ["__pregel_pull", "agent"], "langgraph_checkpoint_ns": "agent:c58f0c73-f686-cb7f-fbd2-93ab5fb22f89", "checkpoint_ns": "agent:c58f0c73-f686-cb7f-fbd2-93ab5fb22f89", "ls_provider": "litellm", "ls_model_type": "chat", "ls_model_name": "gpt-4.1-mini"}',
          'openinference.span.kind': 'LLM',
          'output.mime_type': 'application/json',
          'output.value': '{"generations": [[{"generation_info": {"finish_reason": "tool_calls"}, "type": "ChatGeneration", "message": {"lc": 1, "type": "constructor", "id": ["langchain", "schema", "messages", "AIMessage"], "kwargs": {"content": "", "additional_kwargs": {"tool_calls": [{"lc": 1, "type": "not_implemented", "id": ["litellm", "types", "utils", "ChatCompletionMessageToolCall"], "repr": "ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"text\\":\\"2025\\"}\', name=\'write_file\'), id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\', type=\'function\')"}]}, "response_metadata": {"token_usage": {"lc": 1, "type": "not_implemented", "id": ["litellm", "types", "utils", "Usage"], "repr": "Usage(completion_tokens=15, prompt_tokens=356, total_tokens=371, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None))"}, "model": "gpt-4.1-mini", "finish_reason": "tool_calls", "model_name": "gpt-4.1-mini"}, "type": "ai", "id": "run--e8fd3c88-e61c-43bd-b203-002b8726f516-0", "tool_calls": [{"name": "write_file", "args": {"text": "2025"}, "id": "call_zp7LW8H4WGNyXcMvgYfW6oZj", "type": "tool_call"}], "usage_metadata": {"input_tokens": 356, "output_tokens": 15, "total_tokens": 371}, "invalid_tool_calls": []}}, "text": ""}]], "llm_output": {"token_usage": {"completion_tokens": 15, "prompt_tokens": 356, "total_tokens": 371, "completion_tokens_details": {"accepted_prediction_tokens": 0, "audio_tokens": 0, "reasoning_tokens": 0, "rejected_prediction_tokens": 0}, "prompt_tokens_details": {"audio_tokens": 0, "cached_tokens": 0}}, "model": "gpt-4.1-mini"}, "run": null, "type": "LLMResult"}',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7512122423612243338,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703771392671232,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'ChatLiteLLM',
        'parent': dict({
          'is_remote': False,
          'span_id': 3115496561697237387,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703770426686976,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"messages": ["content=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\' additional_kwargs={} response_metadata={} id=\'8fb2c881-3e07-43b6-8d21-f4f7d24131f9\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0\' tool_calls=[{\'name\': \'get_current_time\', \'args\': {\'timezone\': \'America/New_York\'}, \'id\': \'call_oIYbXNQqRjJgFevQEzCA4lUE\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 288, \'output_tokens\': 18, \'total_tokens\': 306}", "content=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\' name=\'get_current_time\' id=\'8c9b293b-5636-4de1-8ea6-edc537fb8f5e\' tool_call_id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\'"], "is_last_step": false, "remaining_steps": 22}',
          'llm.input_messages.0.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.0.message.role': 'user',
          'metadata': '{"langgraph_step": 3, "langgraph_node": "agent", "langgraph_triggers": ["branch:to:agent"], "langgraph_path": ["__pregel_pull", "agent"], "langgraph_checkpoint_ns": "agent:c58f0c73-f686-cb7f-fbd2-93ab5fb22f89", "checkpoint_ns": "agent:c58f0c73-f686-cb7f-fbd2-93ab5fb22f89"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"output": "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"text\\":\\"2025\\"}\', name=\'write_file\'), id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=15, prompt_tokens=356, total_tokens=371, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} id=\'run--e8fd3c88-e61c-43bd-b203-002b8726f516-0\' tool_calls=[{\'name\': \'write_file\', \'args\': {\'text\': \'2025\'}, \'id\': \'call_zp7LW8H4WGNyXcMvgYfW6oZj\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 356, \'output_tokens\': 15, \'total_tokens\': 371}"}',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3115496561697237387,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703771396226816,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'RunnableSequence',
        'parent': dict({
          'is_remote': False,
          'span_id': 7546974801088883760,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703770425822976,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"messages": ["content=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\' additional_kwargs={} response_metadata={} id=\'8fb2c881-3e07-43b6-8d21-f4f7d24131f9\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0\' tool_calls=[{\'name\': \'get_current_time\', \'args\': {\'timezone\': \'America/New_York\'}, \'id\': \'call_oIYbXNQqRjJgFevQEzCA4lUE\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 288, \'output_tokens\': 18, \'total_tokens\': 306}", "content=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\' name=\'get_current_time\' id=\'8c9b293b-5636-4de1-8ea6-edc537fb8f5e\' tool_call_id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\'"], "is_last_step": false, "remaining_steps": 22}',
          'llm.input_messages.0.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.0.message.role': 'user',
          'metadata': '{"langgraph_step": 3, "langgraph_node": "agent", "langgraph_triggers": ["branch:to:agent"], "langgraph_path": ["__pregel_pull", "agent"], "langgraph_checkpoint_ns": "agent:c58f0c73-f686-cb7f-fbd2-93ab5fb22f89"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"messages": ["content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"text\\":\\"2025\\"}\', name=\'write_file\'), id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=15, prompt_tokens=356, total_tokens=371, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--e8fd3c88-e61c-43bd-b203-002b8726f516-0\' tool_calls=[{\'name\': \'write_file\', \'args\': {\'text\': \'2025\'}, \'id\': \'call_zp7LW8H4WGNyXcMvgYfW6oZj\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 356, \'output_tokens\': 15, \'total_tokens\': 371}"]}',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12973653824375849165,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703771397298944,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_model',
        'parent': dict({
          'is_remote': False,
          'span_id': 7546974801088883760,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703770425452032,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"messages": ["content=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\' additional_kwargs={} response_metadata={} id=\'8fb2c881-3e07-43b6-8d21-f4f7d24131f9\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0\' tool_calls=[{\'name\': \'get_current_time\', \'args\': {\'timezone\': \'America/New_York\'}, \'id\': \'call_oIYbXNQqRjJgFevQEzCA4lUE\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 288, \'output_tokens\': 18, \'total_tokens\': 306}", "content=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\' name=\'get_current_time\' id=\'8c9b293b-5636-4de1-8ea6-edc537fb8f5e\' tool_call_id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"text\\":\\"2025\\"}\', name=\'write_file\'), id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=15, prompt_tokens=356, total_tokens=371, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--e8fd3c88-e61c-43bd-b203-002b8726f516-0\' tool_calls=[{\'name\': \'write_file\', \'args\': {\'text\': \'2025\'}, \'id\': \'call_zp7LW8H4WGNyXcMvgYfW6oZj\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 356, \'output_tokens\': 15, \'total_tokens\': 371}"], "is_last_step": false, "remaining_steps": 22}',
          'llm.input_messages.0.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.0.message.role': 'user',
          'metadata': '{"langgraph_step": 3, "langgraph_node": "agent", "langgraph_triggers": ["branch:to:agent"], "langgraph_path": ["__pregel_pull", "agent"], "langgraph_checkpoint_ns": "agent:c58f0c73-f686-cb7f-fbd2-93ab5fb22f89"}',
          'openinference.span.kind': 'CHAIN',
          'output.value': 'tools',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3507791835511028506,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703771399034880,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'should_continue',
        'parent': dict({
          'is_remote': False,
          'span_id': 7546974801088883760,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703771398444800,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"messages": ["content=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\' additional_kwargs={} response_metadata={} id=\'8fb2c881-3e07-43b6-8d21-f4f7d24131f9\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0\' tool_calls=[{\'name\': \'get_current_time\', \'args\': {\'timezone\': \'America/New_York\'}, \'id\': \'call_oIYbXNQqRjJgFevQEzCA4lUE\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 288, \'output_tokens\': 18, \'total_tokens\': 306}", "content=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\' name=\'get_current_time\' id=\'8c9b293b-5636-4de1-8ea6-edc537fb8f5e\' tool_call_id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\'"], "is_last_step": false, "remaining_steps": 22}',
          'llm.input_messages.0.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.0.message.role': 'user',
          'metadata': '{"langgraph_step": 3, "langgraph_node": "agent", "langgraph_triggers": ["branch:to:agent"], "langgraph_path": ["__pregel_pull", "agent"], "langgraph_checkpoint_ns": "agent:c58f0c73-f686-cb7f-fbd2-93ab5fb22f89"}',
          'openinference.span.kind': 'AGENT',
          'output.mime_type': 'application/json',
          'output.value': '{"messages": ["content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"text\\":\\"2025\\"}\', name=\'write_file\'), id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=15, prompt_tokens=356, total_tokens=371, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--e8fd3c88-e61c-43bd-b203-002b8726f516-0\' tool_calls=[{\'name\': \'write_file\', \'args\': {\'text\': \'2025\'}, \'id\': \'call_zp7LW8H4WGNyXcMvgYfW6oZj\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 356, \'output_tokens\': 15, \'total_tokens\': 371}"]}',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7546974801088883760,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703771399725056,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'agent',
        'parent': dict({
          'is_remote': False,
          'span_id': 9343218972044743962,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703770425167104,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.value': "{'text': '2025'}",
          'metadata': '{"langgraph_step": 4, "langgraph_node": "tools", "langgraph_triggers": ["branch:to:tools"], "langgraph_path": ["__pregel_pull", "tools"], "langgraph_checkpoint_ns": "tools:a6d15cbf-b9c2-c73c-04de-a0e49a8743f4", "checkpoint_ns": "tools:a6d15cbf-b9c2-c73c-04de-a0e49a8743f4"}',
          'openinference.span.kind': 'TOOL',
          'output.mime_type': 'application/json',
          'output.value': '{"output": "content=\'null\' name=\'write_file\' tool_call_id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\'"}',
          'service.name': 'langchain',
          'tool.description': '''
            write the text to a file in the tmp_path directory
            
                    Args:
                        text (str): The text to write to the file.
            
                    Returns:
                        None
          ''',
          'tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 18257561098571918432,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703771402308864,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 9706690659599348340,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703771401331968,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"messages": ["content=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\' additional_kwargs={} response_metadata={} id=\'8fb2c881-3e07-43b6-8d21-f4f7d24131f9\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0\' tool_calls=[{\'name\': \'get_current_time\', \'args\': {\'timezone\': \'America/New_York\'}, \'id\': \'call_oIYbXNQqRjJgFevQEzCA4lUE\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 288, \'output_tokens\': 18, \'total_tokens\': 306}", "content=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\' name=\'get_current_time\' id=\'8c9b293b-5636-4de1-8ea6-edc537fb8f5e\' tool_call_id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"text\\":\\"2025\\"}\', name=\'write_file\'), id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=15, prompt_tokens=356, total_tokens=371, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--e8fd3c88-e61c-43bd-b203-002b8726f516-0\' tool_calls=[{\'name\': \'write_file\', \'args\': {\'text\': \'2025\'}, \'id\': \'call_zp7LW8H4WGNyXcMvgYfW6oZj\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 356, \'output_tokens\': 15, \'total_tokens\': 371}"], "is_last_step": false, "remaining_steps": 21}',
          'llm.input_messages.0.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.0.message.role': 'user',
          'metadata': '{"langgraph_step": 4, "langgraph_node": "tools", "langgraph_triggers": ["branch:to:tools"], "langgraph_path": ["__pregel_pull", "tools"], "langgraph_checkpoint_ns": "tools:a6d15cbf-b9c2-c73c-04de-a0e49a8743f4"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"messages": ["content=\'null\' name=\'write_file\' tool_call_id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\'"]}',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9706690659599348340,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703771404753920,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'tools',
        'parent': dict({
          'is_remote': False,
          'span_id': 9343218972044743962,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703771400745984,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"messages": ["content=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\' additional_kwargs={} response_metadata={} id=\'8fb2c881-3e07-43b6-8d21-f4f7d24131f9\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0\' tool_calls=[{\'name\': \'get_current_time\', \'args\': {\'timezone\': \'America/New_York\'}, \'id\': \'call_oIYbXNQqRjJgFevQEzCA4lUE\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 288, \'output_tokens\': 18, \'total_tokens\': 306}", "content=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\' name=\'get_current_time\' id=\'8c9b293b-5636-4de1-8ea6-edc537fb8f5e\' tool_call_id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"text\\":\\"2025\\"}\', name=\'write_file\'), id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=15, prompt_tokens=356, total_tokens=371, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--e8fd3c88-e61c-43bd-b203-002b8726f516-0\' tool_calls=[{\'name\': \'write_file\', \'args\': {\'text\': \'2025\'}, \'id\': \'call_zp7LW8H4WGNyXcMvgYfW6oZj\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 356, \'output_tokens\': 15, \'total_tokens\': 371}", "content=\'null\' name=\'write_file\' id=\'fe1fa1d5-aacf-416a-985a-e0f9213bd105\' tool_call_id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\'"], "is_last_step": false, "remaining_steps": 20}',
          'llm.input_messages.0.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.0.message.role': 'user',
          'metadata': '{"langgraph_step": 5, "langgraph_node": "agent", "langgraph_triggers": ["branch:to:agent"], "langgraph_path": ["__pregel_pull", "agent"], "langgraph_checkpoint_ns": "agent:074270fe-f1dd-9212-12ac-36eb86f26c46", "checkpoint_ns": "agent:074270fe-f1dd-9212-12ac-36eb86f26c46"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"output": ["content=\'Search the web to answer\' additional_kwargs={} response_metadata={}", "content=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\' additional_kwargs={} response_metadata={} id=\'8fb2c881-3e07-43b6-8d21-f4f7d24131f9\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0\' tool_calls=[{\'name\': \'get_current_time\', \'args\': {\'timezone\': \'America/New_York\'}, \'id\': \'call_oIYbXNQqRjJgFevQEzCA4lUE\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 288, \'output_tokens\': 18, \'total_tokens\': 306}", "content=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\' name=\'get_current_time\' id=\'8c9b293b-5636-4de1-8ea6-edc537fb8f5e\' tool_call_id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"text\\":\\"2025\\"}\', name=\'write_file\'), id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=15, prompt_tokens=356, total_tokens=371, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--e8fd3c88-e61c-43bd-b203-002b8726f516-0\' tool_calls=[{\'name\': \'write_file\', \'args\': {\'text\': \'2025\'}, \'id\': \'call_zp7LW8H4WGNyXcMvgYfW6oZj\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 356, \'output_tokens\': 15, \'total_tokens\': 371}", "content=\'null\' name=\'write_file\' id=\'fe1fa1d5-aacf-416a-985a-e0f9213bd105\' tool_call_id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\'"]}',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15368733704244875973,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703771406789120,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'Prompt',
        'parent': dict({
          'is_remote': False,
          'span_id': 4778820589913420216,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703771406688000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'cost_completion': 0.0,
          'cost_prompt': 0.00015199999999999998,
          'input.mime_type': 'application/json',
          'input.value': '{"messages": [[{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "messages", "SystemMessage"], "kwargs": {"content": "Search the web to answer", "type": "system"}}, {"lc": 1, "type": "constructor", "id": ["langchain", "schema", "messages", "HumanMessage"], "kwargs": {"content": "Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file", "type": "human", "id": "8fb2c881-3e07-43b6-8d21-f4f7d24131f9"}}, {"lc": 1, "type": "constructor", "id": ["langchain", "schema", "messages", "AIMessage"], "kwargs": {"content": "", "additional_kwargs": {"tool_calls": [{"lc": 1, "type": "not_implemented", "id": ["litellm", "types", "utils", "ChatCompletionMessageToolCall"], "repr": "ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')"}]}, "response_metadata": {"token_usage": {"lc": 1, "type": "not_implemented", "id": ["litellm", "types", "utils", "Usage"], "repr": "Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None))"}, "model": "gpt-4.1-mini", "finish_reason": "tool_calls", "model_name": "gpt-4.1-mini"}, "type": "ai", "name": "any_agent", "id": "run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0", "tool_calls": [{"name": "get_current_time", "args": {"timezone": "America/New_York"}, "id": "call_oIYbXNQqRjJgFevQEzCA4lUE", "type": "tool_call"}], "usage_metadata": {"input_tokens": 288, "output_tokens": 18, "total_tokens": 306}, "invalid_tool_calls": []}}, {"lc": 1, "type": "constructor", "id": ["langchain", "schema", "messages", "ToolMessage"], "kwargs": {"content": "{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\n  \\"is_dst\\": true\\n}", "type": "tool", "name": "get_current_time", "id": "8c9b293b-5636-4de1-8ea6-edc537fb8f5e", "tool_call_id": "call_oIYbXNQqRjJgFevQEzCA4lUE", "status": "success"}}, {"lc": 1, "type": "constructor", "id": ["langchain", "schema", "messages", "AIMessage"], "kwargs": {"content": "", "additional_kwargs": {"tool_calls": [{"lc": 1, "type": "not_implemented", "id": ["litellm", "types", "utils", "ChatCompletionMessageToolCall"], "repr": "ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"text\\":\\"2025\\"}\', name=\'write_file\'), id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\', type=\'function\')"}]}, "response_metadata": {"token_usage": {"lc": 1, "type": "not_implemented", "id": ["litellm", "types", "utils", "Usage"], "repr": "Usage(completion_tokens=15, prompt_tokens=356, total_tokens=371, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None))"}, "model": "gpt-4.1-mini", "finish_reason": "tool_calls", "model_name": "gpt-4.1-mini"}, "type": "ai", "name": "any_agent", "id": "run--e8fd3c88-e61c-43bd-b203-002b8726f516-0", "tool_calls": [{"name": "write_file", "args": {"text": "2025"}, "id": "call_zp7LW8H4WGNyXcMvgYfW6oZj", "type": "tool_call"}], "usage_metadata": {"input_tokens": 356, "output_tokens": 15, "total_tokens": 371}, "invalid_tool_calls": []}}, {"lc": 1, "type": "constructor", "id": ["langchain", "schema", "messages", "ToolMessage"], "kwargs": {"content": "null", "type": "tool", "name": "write_file", "id": "fe1fa1d5-aacf-416a-985a-e0f9213bd105", "tool_call_id": "call_zp7LW8H4WGNyXcMvgYfW6oZj", "status": "success"}}]]}',
          'llm.input_messages.0.message.content': 'Search the web to answer',
          'llm.input_messages.0.message.role': 'system',
          'llm.input_messages.1.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.1.message.role': 'user',
          'llm.input_messages.2.message.name': 'any_agent',
          'llm.input_messages.2.message.role': 'assistant',
          'llm.input_messages.3.message.content': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-05-19T21:16:10-04:00",
              "is_dst": true
            }
          ''',
          'llm.input_messages.3.message.name': 'get_current_time',
          'llm.input_messages.3.message.role': 'tool',
          'llm.input_messages.3.message.tool_call_id': 'call_oIYbXNQqRjJgFevQEzCA4lUE',
          'llm.input_messages.4.message.name': 'any_agent',
          'llm.input_messages.4.message.role': 'assistant',
          'llm.input_messages.5.message.content': 'null',
          'llm.input_messages.5.message.name': 'write_file',
          'llm.input_messages.5.message.role': 'tool',
          'llm.input_messages.5.message.tool_call_id': 'call_zp7LW8H4WGNyXcMvgYfW6oZj',
          'llm.invocation_parameters': '{"model": "gpt-4.1-mini", "temperature": null, "top_p": null, "top_k": null, "n": null, "_type": "litellm-chat", "stop": null, "tools": [{"type": "function", "function": {"name": "write_file", "description": "write the text to a file in the tmp_path directory\\n\\n        Args:\\n            text (str): The text to write to the file.\\n\\n        Returns:\\n            None", "parameters": {"properties": {"text": {"type": "string"}}, "required": ["text"], "type": "object"}}}, {"type": "function", "function": {"name": "get_current_time", "description": "Get current time in a specific timezones", "parameters": {"type": "object", "properties": {"timezone": {"type": "string", "description": "IANA timezone name (e.g., \'America/New_York\', \'Europe/London\'). Use \'America/New_York\' as local timezone if no timezone provided by the user."}}, "required": ["timezone"]}}}, {"type": "function", "function": {"name": "convert_time", "description": "Convert time between timezones", "parameters": {"type": "object", "properties": {"source_timezone": {"type": "string", "description": "Source IANA timezone name (e.g., \'America/New_York\', \'Europe/London\'). Use \'America/New_York\' as local timezone if no source timezone provided by the user."}, "time": {"type": "string", "description": "Time to convert in 24-hour format (HH:MM)"}, "target_timezone": {"type": "string", "description": "Target IANA timezone name (e.g., \'Asia/Tokyo\', \'America/San_Francisco\'). Use \'America/New_York\' as local timezone if no target timezone provided by the user."}}, "required": ["source_timezone", "time", "target_timezone"]}}}], "tool_choice": null}',
          'llm.model_name': 'gpt-4.1-mini',
          'llm.output_messages.0.message.content': 'The year in the America/New_York timezone is 2025. I have written this value to a file.',
          'llm.output_messages.0.message.role': 'assistant',
          'llm.token_count.completion': 24,
          'llm.token_count.completion_details.audio': 0,
          'llm.token_count.completion_details.reasoning': 0,
          'llm.token_count.prompt': 380,
          'llm.token_count.prompt_details.audio': 0,
          'llm.token_count.prompt_details.cache_read': 0,
          'llm.token_count.total': 404,
          'metadata': '{"langgraph_step": 5, "langgraph_node": "agent", "langgraph_triggers": ["branch:to:agent"], "langgraph_path": ["__pregel_pull", "agent"], "langgraph_checkpoint_ns": "agent:074270fe-f1dd-9212-12ac-36eb86f26c46", "checkpoint_ns": "agent:074270fe-f1dd-9212-12ac-36eb86f26c46", "ls_provider": "litellm", "ls_model_type": "chat", "ls_model_name": "gpt-4.1-mini"}',
          'openinference.span.kind': 'LLM',
          'output.mime_type': 'application/json',
          'output.value': '{"generations": [[{"generation_info": {"finish_reason": "stop"}, "type": "ChatGeneration", "message": {"lc": 1, "type": "constructor", "id": ["langchain", "schema", "messages", "AIMessage"], "kwargs": {"content": "The year in the America/New_York timezone is 2025. I have written this value to a file.", "response_metadata": {"token_usage": {"lc": 1, "type": "not_implemented", "id": ["litellm", "types", "utils", "Usage"], "repr": "Usage(completion_tokens=24, prompt_tokens=380, total_tokens=404, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None))"}, "model": "gpt-4.1-mini", "finish_reason": "stop", "model_name": "gpt-4.1-mini"}, "type": "ai", "id": "run--fe9f1203-fa2c-4daa-8789-001dcc973061-0", "usage_metadata": {"input_tokens": 380, "output_tokens": 24, "total_tokens": 404}, "tool_calls": [], "invalid_tool_calls": []}}, "text": "The year in the America/New_York timezone is 2025. I have written this value to a file."}]], "llm_output": {"token_usage": {"completion_tokens": 24, "prompt_tokens": 380, "total_tokens": 404, "completion_tokens_details": {"accepted_prediction_tokens": 0, "audio_tokens": 0, "reasoning_tokens": 0, "rejected_prediction_tokens": 0}, "prompt_tokens_details": {"audio_tokens": 0, "cached_tokens": 0}}, "model": "gpt-4.1-mini"}, "run": null, "type": "LLMResult"}',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11099732494796042823,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703773440425984,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'ChatLiteLLM',
        'parent': dict({
          'is_remote': False,
          'span_id': 4778820589913420216,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703771407459072,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"messages": ["content=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\' additional_kwargs={} response_metadata={} id=\'8fb2c881-3e07-43b6-8d21-f4f7d24131f9\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0\' tool_calls=[{\'name\': \'get_current_time\', \'args\': {\'timezone\': \'America/New_York\'}, \'id\': \'call_oIYbXNQqRjJgFevQEzCA4lUE\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 288, \'output_tokens\': 18, \'total_tokens\': 306}", "content=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\' name=\'get_current_time\' id=\'8c9b293b-5636-4de1-8ea6-edc537fb8f5e\' tool_call_id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"text\\":\\"2025\\"}\', name=\'write_file\'), id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=15, prompt_tokens=356, total_tokens=371, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--e8fd3c88-e61c-43bd-b203-002b8726f516-0\' tool_calls=[{\'name\': \'write_file\', \'args\': {\'text\': \'2025\'}, \'id\': \'call_zp7LW8H4WGNyXcMvgYfW6oZj\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 356, \'output_tokens\': 15, \'total_tokens\': 371}", "content=\'null\' name=\'write_file\' id=\'fe1fa1d5-aacf-416a-985a-e0f9213bd105\' tool_call_id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\'"], "is_last_step": false, "remaining_steps": 20}',
          'llm.input_messages.0.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.0.message.role': 'user',
          'metadata': '{"langgraph_step": 5, "langgraph_node": "agent", "langgraph_triggers": ["branch:to:agent"], "langgraph_path": ["__pregel_pull", "agent"], "langgraph_checkpoint_ns": "agent:074270fe-f1dd-9212-12ac-36eb86f26c46", "checkpoint_ns": "agent:074270fe-f1dd-9212-12ac-36eb86f26c46"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"output": "content=\'The year in the America/New_York timezone is 2025. I have written this value to a file.\' additional_kwargs={} response_metadata={\'token_usage\': Usage(completion_tokens=24, prompt_tokens=380, total_tokens=404, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'stop\', \'model_name\': \'gpt-4.1-mini\'} id=\'run--fe9f1203-fa2c-4daa-8789-001dcc973061-0\' usage_metadata={\'input_tokens\': 380, \'output_tokens\': 24, \'total_tokens\': 404}"}',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4778820589913420216,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703773444315904,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'RunnableSequence',
        'parent': dict({
          'is_remote': False,
          'span_id': 6841290189651192101,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703771406414080,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"messages": ["content=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\' additional_kwargs={} response_metadata={} id=\'8fb2c881-3e07-43b6-8d21-f4f7d24131f9\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0\' tool_calls=[{\'name\': \'get_current_time\', \'args\': {\'timezone\': \'America/New_York\'}, \'id\': \'call_oIYbXNQqRjJgFevQEzCA4lUE\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 288, \'output_tokens\': 18, \'total_tokens\': 306}", "content=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\' name=\'get_current_time\' id=\'8c9b293b-5636-4de1-8ea6-edc537fb8f5e\' tool_call_id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"text\\":\\"2025\\"}\', name=\'write_file\'), id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=15, prompt_tokens=356, total_tokens=371, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--e8fd3c88-e61c-43bd-b203-002b8726f516-0\' tool_calls=[{\'name\': \'write_file\', \'args\': {\'text\': \'2025\'}, \'id\': \'call_zp7LW8H4WGNyXcMvgYfW6oZj\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 356, \'output_tokens\': 15, \'total_tokens\': 371}", "content=\'null\' name=\'write_file\' id=\'fe1fa1d5-aacf-416a-985a-e0f9213bd105\' tool_call_id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\'"], "is_last_step": false, "remaining_steps": 20}',
          'llm.input_messages.0.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.0.message.role': 'user',
          'metadata': '{"langgraph_step": 5, "langgraph_node": "agent", "langgraph_triggers": ["branch:to:agent"], "langgraph_path": ["__pregel_pull", "agent"], "langgraph_checkpoint_ns": "agent:074270fe-f1dd-9212-12ac-36eb86f26c46"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"messages": ["content=\'The year in the America/New_York timezone is 2025. I have written this value to a file.\' additional_kwargs={} response_metadata={\'token_usage\': Usage(completion_tokens=24, prompt_tokens=380, total_tokens=404, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'stop\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--fe9f1203-fa2c-4daa-8789-001dcc973061-0\' usage_metadata={\'input_tokens\': 380, \'output_tokens\': 24, \'total_tokens\': 404}"]}',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3596457905339063999,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703773445359104,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_model',
        'parent': dict({
          'is_remote': False,
          'span_id': 6841290189651192101,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703771405927936,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"messages": ["content=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\' additional_kwargs={} response_metadata={} id=\'8fb2c881-3e07-43b6-8d21-f4f7d24131f9\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0\' tool_calls=[{\'name\': \'get_current_time\', \'args\': {\'timezone\': \'America/New_York\'}, \'id\': \'call_oIYbXNQqRjJgFevQEzCA4lUE\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 288, \'output_tokens\': 18, \'total_tokens\': 306}", "content=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\' name=\'get_current_time\' id=\'8c9b293b-5636-4de1-8ea6-edc537fb8f5e\' tool_call_id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"text\\":\\"2025\\"}\', name=\'write_file\'), id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=15, prompt_tokens=356, total_tokens=371, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--e8fd3c88-e61c-43bd-b203-002b8726f516-0\' tool_calls=[{\'name\': \'write_file\', \'args\': {\'text\': \'2025\'}, \'id\': \'call_zp7LW8H4WGNyXcMvgYfW6oZj\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 356, \'output_tokens\': 15, \'total_tokens\': 371}", "content=\'null\' name=\'write_file\' id=\'fe1fa1d5-aacf-416a-985a-e0f9213bd105\' tool_call_id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\'", "content=\'The year in the America/New_York timezone is 2025. I have written this value to a file.\' additional_kwargs={} response_metadata={\'token_usage\': Usage(completion_tokens=24, prompt_tokens=380, total_tokens=404, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'stop\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--fe9f1203-fa2c-4daa-8789-001dcc973061-0\' usage_metadata={\'input_tokens\': 380, \'output_tokens\': 24, \'total_tokens\': 404}"], "is_last_step": false, "remaining_steps": 20}',
          'llm.input_messages.0.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.0.message.role': 'user',
          'metadata': '{"langgraph_step": 5, "langgraph_node": "agent", "langgraph_triggers": ["branch:to:agent"], "langgraph_path": ["__pregel_pull", "agent"], "langgraph_checkpoint_ns": "agent:074270fe-f1dd-9212-12ac-36eb86f26c46"}',
          'openinference.span.kind': 'CHAIN',
          'output.value': '__end__',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 107121363156210220,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703773447226112,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'should_continue',
        'parent': dict({
          'is_remote': False,
          'span_id': 6841290189651192101,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703773446651904,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"messages": ["content=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\' additional_kwargs={} response_metadata={} id=\'8fb2c881-3e07-43b6-8d21-f4f7d24131f9\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0\' tool_calls=[{\'name\': \'get_current_time\', \'args\': {\'timezone\': \'America/New_York\'}, \'id\': \'call_oIYbXNQqRjJgFevQEzCA4lUE\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 288, \'output_tokens\': 18, \'total_tokens\': 306}", "content=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\' name=\'get_current_time\' id=\'8c9b293b-5636-4de1-8ea6-edc537fb8f5e\' tool_call_id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"text\\":\\"2025\\"}\', name=\'write_file\'), id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=15, prompt_tokens=356, total_tokens=371, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--e8fd3c88-e61c-43bd-b203-002b8726f516-0\' tool_calls=[{\'name\': \'write_file\', \'args\': {\'text\': \'2025\'}, \'id\': \'call_zp7LW8H4WGNyXcMvgYfW6oZj\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 356, \'output_tokens\': 15, \'total_tokens\': 371}", "content=\'null\' name=\'write_file\' id=\'fe1fa1d5-aacf-416a-985a-e0f9213bd105\' tool_call_id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\'"], "is_last_step": false, "remaining_steps": 20}',
          'llm.input_messages.0.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.0.message.role': 'user',
          'metadata': '{"langgraph_step": 5, "langgraph_node": "agent", "langgraph_triggers": ["branch:to:agent"], "langgraph_path": ["__pregel_pull", "agent"], "langgraph_checkpoint_ns": "agent:074270fe-f1dd-9212-12ac-36eb86f26c46"}',
          'openinference.span.kind': 'AGENT',
          'output.mime_type': 'application/json',
          'output.value': '{"messages": ["content=\'The year in the America/New_York timezone is 2025. I have written this value to a file.\' additional_kwargs={} response_metadata={\'token_usage\': Usage(completion_tokens=24, prompt_tokens=380, total_tokens=404, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'stop\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--fe9f1203-fa2c-4daa-8789-001dcc973061-0\' usage_metadata={\'input_tokens\': 380, \'output_tokens\': 24, \'total_tokens\': 404}"]}',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6841290189651192101,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703773447973120,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'agent',
        'parent': dict({
          'is_remote': False,
          'span_id': 9343218972044743962,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703771405609984,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"messages": [["user", "Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"]]}',
          'llm.input_messages.0.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.0.message.role': 'user',
          'openinference.span.kind': 'AGENT',
          'output.mime_type': 'application/json',
          'output.value': '{"messages": ["content=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\' additional_kwargs={} response_metadata={} id=\'8fb2c881-3e07-43b6-8d21-f4f7d24131f9\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"timezone\\":\\"America/New_York\\"}\', name=\'get_current_time\'), id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=18, prompt_tokens=288, total_tokens=306, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--32eb6ca6-0ff9-4898-9d7a-1bb2b26df086-0\' tool_calls=[{\'name\': \'get_current_time\', \'args\': {\'timezone\': \'America/New_York\'}, \'id\': \'call_oIYbXNQqRjJgFevQEzCA4lUE\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 288, \'output_tokens\': 18, \'total_tokens\': 306}", "content=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\' name=\'get_current_time\' id=\'8c9b293b-5636-4de1-8ea6-edc537fb8f5e\' tool_call_id=\'call_oIYbXNQqRjJgFevQEzCA4lUE\'", "content=\'\' additional_kwargs={\'tool_calls\': [ChatCompletionMessageToolCall(function=Function(arguments=\'{\\"text\\":\\"2025\\"}\', name=\'write_file\'), id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\', type=\'function\')]} response_metadata={\'token_usage\': Usage(completion_tokens=15, prompt_tokens=356, total_tokens=371, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'tool_calls\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--e8fd3c88-e61c-43bd-b203-002b8726f516-0\' tool_calls=[{\'name\': \'write_file\', \'args\': {\'text\': \'2025\'}, \'id\': \'call_zp7LW8H4WGNyXcMvgYfW6oZj\', \'type\': \'tool_call\'}] usage_metadata={\'input_tokens\': 356, \'output_tokens\': 15, \'total_tokens\': 371}", "content=\'null\' name=\'write_file\' id=\'fe1fa1d5-aacf-416a-985a-e0f9213bd105\' tool_call_id=\'call_zp7LW8H4WGNyXcMvgYfW6oZj\'", "content=\'The year in the America/New_York timezone is 2025. I have written this value to a file.\' additional_kwargs={} response_metadata={\'token_usage\': Usage(completion_tokens=24, prompt_tokens=380, total_tokens=404, completion_tokens_details=CompletionTokensDetailsWrapper(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0, text_tokens=None), prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=0, cached_tokens=0, text_tokens=None, image_tokens=None)), \'model\': \'gpt-4.1-mini\', \'finish_reason\': \'stop\', \'model_name\': \'gpt-4.1-mini\'} name=\'any_agent\' id=\'run--fe9f1203-fa2c-4daa-8789-001dcc973061-0\' usage_metadata={\'input_tokens\': 380, \'output_tokens\': 24, \'total_tokens\': 404}"]}',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9343218972044743962,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703773449184768,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'any_agent',
        'parent': dict({
          'is_remote': False,
          'span_id': 9143553269661178637,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703769446870016,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'any_agent.run_id': '0264fb92-7b8d-46cf-82a0-7bbde2edc85d',
          'service.name': 'langchain',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9143553269661178637,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 114887179090047558076556919547307696398,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703773449753000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'agent_run',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703769445991000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[LLAMA_INDEX_trace].338704787244175710339927973507296109956
  dict({
    'final_output': '2025',
    'spans': list([
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"ctx": "<llama_index.core.workflow.context.Context object at 0x1681e63c0>", "ev": "AgentWorkflowStartEvent()"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"input":[{"role":"user","blocks":[{"text":"Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]}],"current_agent_name":"any_agent"}',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 13396514744495681623,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703765318449000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'AgentWorkflow.init_run',
        'parent': dict({
          'is_remote': False,
          'span_id': 3029341646924076469,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703765317596000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"ctx": "<llama_index.core.workflow.context.Context object at 0x1681e63c0>", "ev": "AgentInput(input=[ChatMessage(role=<MessageRole.USER: \'user\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\')])], current_agent_name=\'any_agent\')"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"input":[{"role":"system","blocks":[{"text":"Search the web to answer"}]},{"role":"user","blocks":[{"text":"Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]}],"current_agent_name":"any_agent"}',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12030160034915900691,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703765318906000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'AgentWorkflow.setup_agent',
        'parent': dict({
          'is_remote': False,
          'span_id': 3029341646924076469,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703765318680000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'cost_completion': 0.0,
          'cost_prompt': 0.00024839999999999997,
          'input.mime_type': 'application/json',
          'input.value': '{"messages": ["ChatMessage(role=<MessageRole.SYSTEM: \'system\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\'You are designed to help with a variety of tasks, from answering questions to providing summaries to other types of analyses.\\\\n\\\\n## Tools\\\\n\\\\nYou have access to a wide variety of tools. You are responsible for using the tools in any sequence you deem appropriate to complete the task at hand.\\\\nThis may require breaking the task into subtasks and using different tools to complete each subtask.\\\\n\\\\nYou have access to the following tools:\\\\n> Tool Name: write_file\\\\nTool Description: write_file(text: str) -> None\\\\nwrite the text to a file in the tmp_path directory\\\\n\\\\n        Args:\\\\n            text (str): The text to write to the file.\\\\n\\\\n        Returns:\\\\n            None\\\\n        \\\\nTool Args: {\\"properties\\": {\\"text\\": {\\"title\\": \\"Text\\", \\"type\\": \\"string\\"}}, \\"required\\": [\\"text\\"], \\"type\\": \\"object\\"}\\\\n\\\\n> Tool Name: get_current_time\\\\nTool Description: Get current time in a specific timezones\\\\nTool Args: {\\"properties\\": {\\"timezone\\": {\\"description\\": \\"IANA timezone name (e.g., \\\\\'America/New_York\\\\\', \\\\\'Europe/London\\\\\'). Use \\\\\'America/New_York\\\\\' as local timezone if no timezone provided by the user.\\", \\"title\\": \\"Timezone\\", \\"type\\": \\"string\\"}}, \\"required\\": [\\"timezone\\"], \\"type\\": \\"object\\"}\\\\n\\\\n\\\\n\\\\n## Output Format\\\\n\\\\nPlease answer in the same language as the question and use the following format:\\\\n\\\\n```\\\\nThought: The current language of the user is: (user\\\\\'s language). I need to use a tool to help me answer the question.\\\\nAction: tool name (one of write_file, get_current_time) if using a tool.\\\\nAction Input: the input to the tool, in a JSON format representing the kwargs (e.g. {\\"input\\": \\"hello world\\", \\"num_beams\\": 5})\\\\n```\\\\n\\\\nPlease ALWAYS start with a Thought.\\\\n\\\\nNEVER surround your response with markdown code markers. You may use code markers within your response if you need to.\\\\n\\\\nPlease use a valid JSON format for the Action Input. Do NOT do this {\\\\\'input\\\\\': \\\\\'hello world\\\\\', \\\\\'num_beams\\\\\': 5}.\\\\n\\\\nIf this format is used, the tool will respond in the following format:\\\\n\\\\n```\\\\nObservation: tool response\\\\n```\\\\n\\\\nYou should keep repeating the above format till you have enough information to answer the question without using any more tools. At that point, you MUST respond in one of the following two formats:\\\\n\\\\n```\\\\nThought: I can answer without using any more tools. I\\\\\'ll use the user\\\\\'s language to answer\\\\nAnswer: [your answer here (In the same language as the user\\\\\'s question)]\\\\n```\\\\n\\\\n```\\\\nThought: I cannot answer the question with the provided tools.\\\\nAnswer: [your answer here (In the same language as the user\\\\\'s question)]\\\\n```\\\\n\\\\n## Current Conversation\\\\n\\\\nBelow is the current conversation consisting of interleaving human and assistant messages.\\\\n\')])", "ChatMessage(role=<MessageRole.USER: \'user\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\')])"]}',
          'llm.input_messages.0.message.content': '''
            You are designed to help with a variety of tasks, from answering questions to providing summaries to other types of analyses.
            
            ## Tools
            
            You have access to a wide variety of tools. You are responsible for using the tools in any sequence you deem appropriate to complete the task at hand.
            This may require breaking the task into subtasks and using different tools to complete each subtask.
            
            You have access to the following tools:
            > Tool Name: write_file
            Tool Description: write_file(text: str) -> None
            write the text to a file in the tmp_path directory
            
                    Args:
                        text (str): The text to write to the file.
            
                    Returns:
                        None
                    
            Tool Args: {"properties": {"text": {"title": "Text", "type": "string"}}, "required": ["text"], "type": "object"}
            
            > Tool Name: get_current_time
            Tool Description: Get current time in a specific timezones
            Tool Args: {"properties": {"timezone": {"description": "IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Use 'America/New_York' as local timezone if no timezone provided by the user.", "title": "Timezone", "type": "string"}}, "required": ["timezone"], "type": "object"}
            
            
            
            ## Output Format
            
            Please answer in the same language as the question and use the following format:
            
            ```
            Thought: The current language of the user is: (user's language). I need to use a tool to help me answer the question.
            Action: tool name (one of write_file, get_current_time) if using a tool.
            Action Input: the input to the tool, in a JSON format representing the kwargs (e.g. {"input": "hello world", "num_beams": 5})
            ```
            
            Please ALWAYS start with a Thought.
            
            NEVER surround your response with markdown code markers. You may use code markers within your response if you need to.
            
            Please use a valid JSON format for the Action Input. Do NOT do this {'input': 'hello world', 'num_beams': 5}.
            
            If this format is used, the tool will respond in the following format:
            
            ```
            Observation: tool response
            ```
            
            You should keep repeating the above format till you have enough information to answer the question without using any more tools. At that point, you MUST respond in one of the following two formats:
            
            ```
            Thought: I can answer without using any more tools. I'll use the user's language to answer
            Answer: [your answer here (In the same language as the user's question)]
            ```
            
            ```
            Thought: I cannot answer the question with the provided tools.
            Answer: [your answer here (In the same language as the user's question)]
            ```
            
            ## Current Conversation
            
            Below is the current conversation consisting of interleaving human and assistant messages.
  
          ''',
          'llm.input_messages.0.message.role': 'system',
          'llm.input_messages.1.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.1.message.role': 'user',
          'llm.invocation_parameters': '{"context_window":32768,"num_output":-1,"is_chat_model":true,"is_function_calling_model":true,"model_name":"gpt-4.1-mini"}',
          'llm.model_name': 'gpt-4.1-mini',
          'llm.output_messages.0.message.content': '''
            Thought: I need to get the current time in the America/New_York timezone to find out the year.
            Action: get_current_time
            Action Input: {"timezone":"America/New_York"}
          ''',
          'llm.output_messages.0.message.role': 'assistant',
          'llm.token_count.completion': 39,
          'llm.token_count.completion_details.audio': 0,
          'llm.token_count.completion_details.reasoning': 0,
          'llm.token_count.prompt': 621,
          'llm.token_count.prompt_details.audio': 0,
          'llm.token_count.prompt_details.cache_read': 0,
          'llm.token_count.total': 660,
          'openinference.span.kind': 'LLM',
          'output.value': '''
            assistant: Thought: I need to get the current time in the America/New_York timezone to find out the year.
            Action: get_current_time
            Action Input: {"timezone":"America/New_York"}
          ''',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 18385783247992642254,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703765320409000,
        'events': list([
          dict({
            'attributes': dict({
            }),
            'name': 'First Token Stream Event',
            'timestamp': 1747703766487036000,
          }),
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'LiteLLM.astream_chat',
        'parent': dict({
          'is_remote': False,
          'span_id': 52334206496828744,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703765319638000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"output": "Thought: I need to get the current time in the America/New_York timezone to find out the year.\\nAction: get_current_time\\nAction Input: {\\"timezone\\":\\"America/New_York\\"}", "is_streaming": false}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"thought":"I need to get the current time in the America/New_York timezone to find out the year.","action":"get_current_time","action_input":{"timezone":"America/New_York"}}',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2947614795570053778,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703767211292000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'ReActOutputParser.parse',
        'parent': dict({
          'is_remote': False,
          'span_id': 52334206496828744,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703767205747000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"ctx": "<llama_index.core.workflow.context.Context object at 0x1681e63c0>", "ev": "AgentSetup(input=[ChatMessage(role=<MessageRole.SYSTEM: \'system\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\'Search the web to answer\')]), ChatMessage(role=<MessageRole.USER: \'user\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\')])], current_agent_name=\'any_agent\')"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"response":{"role":"assistant","additional_kwargs":{},"blocks":[{"text":"Thought: I need to get the current time in the America/New_York timezone to find out the year.\\nAction: get_current_time\\nAction Input: {\\"timezone\\":\\"America/New_York\\"}"}]},"tool_calls":[{"tool_id":"3e77b9d7-4ef5-4b93-937d-eefa44db7703","tool_name":"get_current_time","tool_kwargs":{"timezone":"America/New_York"}}],"raw":{"id":"chatcmpl-b7ca726e-5b53-4344-a6d2-068510878808","created":1747703767,"model":"gpt-4.1-mini","object":"chat.completion.chunk","system_fingerprint":"fp_38647f5e19","choices":[{"finish_reason":null,"index":0,"delta":{"provider_specific_fields":null,"content":null,"role":null,"function_call":null,"tool_calls":null,"audio":null},"logprobs":null}],"provider_specific_fields":null,"stream_options":{"include_usage":true},"usage":{"completion_tokens":39,"prompt_tokens":621,"total_tokens":660,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":0,"rejected_prediction_tokens":0},"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0}}},"current_agent_name":"any_agent"}',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 52334206496828744,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703767211788000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'AgentWorkflow.run_agent_step',
        'parent': dict({
          'is_remote': False,
          'span_id': 3029341646924076469,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703765319033000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"ctx": "<llama_index.core.workflow.context.Context object at 0x1681e63c0>", "ev": "AgentOutput(response=ChatMessage(role=<MessageRole.ASSISTANT: \'assistant\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\'Thought: I need to get the current time in the America/New_York timezone to find out the year.\\\\nAction: get_current_time\\\\nAction Input: {\\"timezone\\":\\"America/New_York\\"}\')]), tool_calls=[ToolSelection(tool_id=\'3e77b9d7-4ef5-4b93-937d-eefa44db7703\', tool_name=\'get_current_time\', tool_kwargs={\'timezone\': \'America/New_York\'})], raw={\'id\': \'chatcmpl-b7ca726e-5b53-4344-a6d2-068510878808\', \'created\': 1747703767, \'model\': \'gpt-4.1-mini\', \'object\': \'chat.completion.chunk\', \'system_fingerprint\': \'fp_38647f5e19\', \'choices\': [{\'finish_reason\': None, \'index\': 0, \'delta\': {\'provider_specific_fields\': None, \'content\': None, \'role\': None, \'function_call\': None, \'tool_calls\': None, \'audio\': None}, \'logprobs\': None}], \'provider_specific_fields\': None, \'stream_options\': {\'include_usage\': True}, \'usage\': {\'completion_tokens\': 39, \'prompt_tokens\': 621, \'total_tokens\': 660, \'completion_tokens_details\': {\'accepted_prediction_tokens\': 0, \'audio_tokens\': 0, \'reasoning_tokens\': 0, \'rejected_prediction_tokens\': 0}, \'prompt_tokens_details\': {\'audio_tokens\': 0, \'cached_tokens\': 0}}}, current_agent_name=\'any_agent\')"}',
          'openinference.span.kind': 'CHAIN',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3255172610535699403,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703767213949000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'AgentWorkflow.parse_agent_output',
        'parent': dict({
          'is_remote': False,
          'span_id': 3029341646924076469,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703767213655000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"kwargs": {"timezone": "America/New_York"}}',
          'openinference.span.kind': 'TOOL',
          'output.mime_type': 'application/json',
          'output.value': '{"content":"meta=None content=[TextContent(type=\'text\', text=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-19T21:16:07-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\', annotations=None)] isError=False","tool_name":"get_current_time","raw_input":{"args":[],"kwargs":{"timezone":"America/New_York"}},"raw_output":{"content":[{"type":"text","text":"{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-05-19T21:16:07-04:00\\",\\n  \\"is_dst\\": true\\n}"}],"isError":false}}',
          'service.name': 'llama_index',
          'tool.description': 'Get current time in a specific timezones',
          'tool.name': 'get_current_time',
          'tool.parameters': '{"properties": {"timezone": {"description": "IANA timezone name (e.g., \'America/New_York\', \'Europe/London\'). Use \'America/New_York\' as local timezone if no timezone provided by the user.", "title": "Timezone", "type": "string"}}, "required": ["timezone"], "type": "object"}',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15503460373165139017,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703767422675000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'FunctionTool.acall',
        'parent': dict({
          'is_remote': False,
          'span_id': 14216752303977796275,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703767214371000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"ctx": "<llama_index.core.workflow.context.Context object at 0x1681e63c0>", "ev": "ToolCall(tool_name=\'get_current_time\', tool_kwargs={\'timezone\': \'America/New_York\'}, tool_id=\'3e77b9d7-4ef5-4b93-937d-eefa44db7703\')"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"tool_name":"get_current_time","tool_kwargs":{"timezone":"America/New_York"},"tool_id":"3e77b9d7-4ef5-4b93-937d-eefa44db7703","tool_output":{"content":"meta=None content=[TextContent(type=\'text\', text=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-19T21:16:07-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\', annotations=None)] isError=False","tool_name":"get_current_time","raw_input":{"args":[],"kwargs":{"timezone":"America/New_York"}},"raw_output":{"content":[{"type":"text","text":"{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-05-19T21:16:07-04:00\\",\\n  \\"is_dst\\": true\\n}"}],"isError":false}},"return_direct":false}',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14216752303977796275,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703767424840000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'AgentWorkflow.call_tool',
        'parent': dict({
          'is_remote': False,
          'span_id': 3029341646924076469,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703767214148000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"ctx": "<llama_index.core.workflow.context.Context object at 0x1681e63c0>", "ev": "ToolCallResult(tool_name=\'get_current_time\', tool_kwargs={\'timezone\': \'America/New_York\'}, tool_id=\'3e77b9d7-4ef5-4b93-937d-eefa44db7703\', tool_output=ToolOutput(content=\'meta=None content=[TextContent(type=\\\\\'text\\\\\', text=\\\\\'{\\\\\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\\\\\n  \\"datetime\\": \\"2025-05-19T21:16:07-04:00\\",\\\\\\\\n  \\"is_dst\\": true\\\\\\\\n}\\\\\', annotations=None)] isError=False\', tool_name=\'get_current_time\', raw_input={\'args\': (), \'kwargs\': {\'timezone\': \'America/New_York\'}}, raw_output=CallToolResult(meta=None, content=[TextContent(type=\'text\', text=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-19T21:16:07-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\', annotations=None)], isError=False), is_error=False), return_direct=False)"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"input":[{"role":"user","blocks":[{"text":"Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]}],"current_agent_name":"any_agent"}',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1519464874041884936,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703767425619000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'AgentWorkflow.aggregate_tool_results',
        'parent': dict({
          'is_remote': False,
          'span_id': 3029341646924076469,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703767425145000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"ctx": "<llama_index.core.workflow.context.Context object at 0x1681e63c0>", "ev": "AgentInput(input=[ChatMessage(role=<MessageRole.USER: \'user\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\')])], current_agent_name=\'any_agent\')"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"input":[{"role":"system","blocks":[{"text":"Search the web to answer"}]},{"role":"user","blocks":[{"text":"Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]}],"current_agent_name":"any_agent"}',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 18277159916124556379,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703767425961000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'AgentWorkflow.setup_agent',
        'parent': dict({
          'is_remote': False,
          'span_id': 3029341646924076469,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703767425758000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'cost_completion': 0.0,
          'cost_prompt': 0.000294,
          'input.mime_type': 'application/json',
          'input.value': '{"messages": ["ChatMessage(role=<MessageRole.SYSTEM: \'system\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\'You are designed to help with a variety of tasks, from answering questions to providing summaries to other types of analyses.\\\\n\\\\n## Tools\\\\n\\\\nYou have access to a wide variety of tools. You are responsible for using the tools in any sequence you deem appropriate to complete the task at hand.\\\\nThis may require breaking the task into subtasks and using different tools to complete each subtask.\\\\n\\\\nYou have access to the following tools:\\\\n> Tool Name: write_file\\\\nTool Description: write_file(text: str) -> None\\\\nwrite the text to a file in the tmp_path directory\\\\n\\\\n        Args:\\\\n            text (str): The text to write to the file.\\\\n\\\\n        Returns:\\\\n            None\\\\n        \\\\nTool Args: {\\"properties\\": {\\"text\\": {\\"title\\": \\"Text\\", \\"type\\": \\"string\\"}}, \\"required\\": [\\"text\\"], \\"type\\": \\"object\\"}\\\\n\\\\n> Tool Name: get_current_time\\\\nTool Description: Get current time in a specific timezones\\\\nTool Args: {\\"properties\\": {\\"timezone\\": {\\"description\\": \\"IANA timezone name (e.g., \\\\\'America/New_York\\\\\', \\\\\'Europe/London\\\\\'). Use \\\\\'America/New_York\\\\\' as local timezone if no timezone provided by the user.\\", \\"title\\": \\"Timezone\\", \\"type\\": \\"string\\"}}, \\"required\\": [\\"timezone\\"], \\"type\\": \\"object\\"}\\\\n\\\\n\\\\n\\\\n## Output Format\\\\n\\\\nPlease answer in the same language as the question and use the following format:\\\\n\\\\n```\\\\nThought: The current language of the user is: (user\\\\\'s language). I need to use a tool to help me answer the question.\\\\nAction: tool name (one of write_file, get_current_time) if using a tool.\\\\nAction Input: the input to the tool, in a JSON format representing the kwargs (e.g. {\\"input\\": \\"hello world\\", \\"num_beams\\": 5})\\\\n```\\\\n\\\\nPlease ALWAYS start with a Thought.\\\\n\\\\nNEVER surround your response with markdown code markers. You may use code markers within your response if you need to.\\\\n\\\\nPlease use a valid JSON format for the Action Input. Do NOT do this {\\\\\'input\\\\\': \\\\\'hello world\\\\\', \\\\\'num_beams\\\\\': 5}.\\\\n\\\\nIf this format is used, the tool will respond in the following format:\\\\n\\\\n```\\\\nObservation: tool response\\\\n```\\\\n\\\\nYou should keep repeating the above format till you have enough information to answer the question without using any more tools. At that point, you MUST respond in one of the following two formats:\\\\n\\\\n```\\\\nThought: I can answer without using any more tools. I\\\\\'ll use the user\\\\\'s language to answer\\\\nAnswer: [your answer here (In the same language as the user\\\\\'s question)]\\\\n```\\\\n\\\\n```\\\\nThought: I cannot answer the question with the provided tools.\\\\nAnswer: [your answer here (In the same language as the user\\\\\'s question)]\\\\n```\\\\n\\\\n## Current Conversation\\\\n\\\\nBelow is the current conversation consisting of interleaving human and assistant messages.\\\\n\')])", "ChatMessage(role=<MessageRole.USER: \'user\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\')])", "ChatMessage(role=<MessageRole.ASSISTANT: \'assistant\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\\"Thought: I need to get the current time in the America/New_York timezone to find out the year.\\\\nAction: get_current_time\\\\nAction Input: {\'timezone\': \'America/New_York\'}\\")])", "ChatMessage(role=<MessageRole.USER: \'user\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\'Observation: meta=None content=[TextContent(type=\\\\\'text\\\\\', text=\\\\\'{\\\\\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\\\\\n  \\"datetime\\": \\"2025-05-19T21:16:07-04:00\\",\\\\\\\\n  \\"is_dst\\": true\\\\\\\\n}\\\\\', annotations=None)] isError=False\')])"]}',
          'llm.input_messages.0.message.content': '''
            You are designed to help with a variety of tasks, from answering questions to providing summaries to other types of analyses.
            
            ## Tools
            
            You have access to a wide variety of tools. You are responsible for using the tools in any sequence you deem appropriate to complete the task at hand.
            This may require breaking the task into subtasks and using different tools to complete each subtask.
            
            You have access to the following tools:
            > Tool Name: write_file
            Tool Description: write_file(text: str) -> None
            write the text to a file in the tmp_path directory
            
                    Args:
                        text (str): The text to write to the file.
            
                    Returns:
                        None
                    
            Tool Args: {"properties": {"text": {"title": "Text", "type": "string"}}, "required": ["text"], "type": "object"}
            
            > Tool Name: get_current_time
            Tool Description: Get current time in a specific timezones
            Tool Args: {"properties": {"timezone": {"description": "IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Use 'America/New_York' as local timezone if no timezone provided by the user.", "title": "Timezone", "type": "string"}}, "required": ["timezone"], "type": "object"}
            
            
            
            ## Output Format
            
            Please answer in the same language as the question and use the following format:
            
            ```
            Thought: The current language of the user is: (user's language). I need to use a tool to help me answer the question.
            Action: tool name (one of write_file, get_current_time) if using a tool.
            Action Input: the input to the tool, in a JSON format representing the kwargs (e.g. {"input": "hello world", "num_beams": 5})
            ```
            
            Please ALWAYS start with a Thought.
            
            NEVER surround your response with markdown code markers. You may use code markers within your response if you need to.
            
            Please use a valid JSON format for the Action Input. Do NOT do this {'input': 'hello world', 'num_beams': 5}.
            
            If this format is used, the tool will respond in the following format:
            
            ```
            Observation: tool response
            ```
            
            You should keep repeating the above format till you have enough information to answer the question without using any more tools. At that point, you MUST respond in one of the following two formats:
            
            ```
            Thought: I can answer without using any more tools. I'll use the user's language to answer
            Answer: [your answer here (In the same language as the user's question)]
            ```
            
            ```
            Thought: I cannot answer the question with the provided tools.
            Answer: [your answer here (In the same language as the user's question)]
            ```
            
            ## Current Conversation
            
            Below is the current conversation consisting of interleaving human and assistant messages.
  
          ''',
          'llm.input_messages.0.message.role': 'system',
          'llm.input_messages.1.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.1.message.role': 'user',
          'llm.input_messages.2.message.content': '''
            Thought: I need to get the current time in the America/New_York timezone to find out the year.
            Action: get_current_time
            Action Input: {'timezone': 'America/New_York'}
          ''',
          'llm.input_messages.2.message.role': 'assistant',
          'llm.input_messages.3.message.content': 'Observation: meta=None content=[TextContent(type=\'text\', text=\'{\\n  "timezone": "America/New_York",\\n  "datetime": "2025-05-19T21:16:07-04:00",\\n  "is_dst": true\\n}\', annotations=None)] isError=False',
          'llm.input_messages.3.message.role': 'user',
          'llm.invocation_parameters': '{"context_window":32768,"num_output":-1,"is_chat_model":true,"is_function_calling_model":true,"model_name":"gpt-4.1-mini"}',
          'llm.model_name': 'gpt-4.1-mini',
          'llm.output_messages.0.message.content': '''
            Thought: I have the current datetime in the America/New_York timezone, which is 2025-05-19T21:16:07-04:00. The year is 2025. Now I will write this value to a file.
            Action: write_file
            Action Input: {"text": "2025"}
          ''',
          'llm.output_messages.0.message.role': 'assistant',
          'llm.token_count.completion': 67,
          'llm.token_count.completion_details.audio': 0,
          'llm.token_count.completion_details.reasoning': 0,
          'llm.token_count.prompt': 735,
          'llm.token_count.prompt_details.audio': 0,
          'llm.token_count.prompt_details.cache_read': 0,
          'llm.token_count.total': 802,
          'openinference.span.kind': 'LLM',
          'output.value': '''
            assistant: Thought: I have the current datetime in the America/New_York timezone, which is 2025-05-19T21:16:07-04:00. The year is 2025. Now I will write this value to a file.
            Action: write_file
            Action Input: {"text": "2025"}
          ''',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4105368862847681416,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703767427052000,
        'events': list([
          dict({
            'attributes': dict({
            }),
            'name': 'First Token Stream Event',
            'timestamp': 1747703768119503000,
          }),
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'LiteLLM.astream_chat',
        'parent': dict({
          'is_remote': False,
          'span_id': 7625371156976573856,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703767426592000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"output": "Thought: I have the current datetime in the America/New_York timezone, which is 2025-05-19T21:16:07-04:00. The year is 2025. Now I will write this value to a file.\\nAction: write_file\\nAction Input: {\\"text\\": \\"2025\\"}", "is_streaming": false}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"thought":"I have the current datetime in the America/New_York timezone, which is 2025-05-19T21:16:07-04:00. The year is 2025. Now I will write this value to a file.","action":"write_file","action_input":{"text":"2025"}}',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14418126001934765693,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703769297241000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'ReActOutputParser.parse',
        'parent': dict({
          'is_remote': False,
          'span_id': 7625371156976573856,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703769297032000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"ctx": "<llama_index.core.workflow.context.Context object at 0x1681e63c0>", "ev": "AgentSetup(input=[ChatMessage(role=<MessageRole.SYSTEM: \'system\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\'Search the web to answer\')]), ChatMessage(role=<MessageRole.USER: \'user\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\')])], current_agent_name=\'any_agent\')"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"response":{"role":"assistant","additional_kwargs":{},"blocks":[{"text":"Thought: I have the current datetime in the America/New_York timezone, which is 2025-05-19T21:16:07-04:00. The year is 2025. Now I will write this value to a file.\\nAction: write_file\\nAction Input: {\\"text\\": \\"2025\\"}"}]},"tool_calls":[{"tool_id":"4acb281f-5a3a-4429-81c0-64cd7bcba9e4","tool_name":"write_file","tool_kwargs":{"text":"2025"}}],"raw":{"id":"chatcmpl-778f045a-820a-40d2-909f-f1faf708c254","created":1747703769,"model":"gpt-4.1-mini","object":"chat.completion.chunk","system_fingerprint":"fp_79b79be41f","choices":[{"finish_reason":null,"index":0,"delta":{"provider_specific_fields":null,"content":null,"role":null,"function_call":null,"tool_calls":null,"audio":null},"logprobs":null}],"provider_specific_fields":null,"stream_options":{"include_usage":true},"usage":{"completion_tokens":67,"prompt_tokens":735,"total_tokens":802,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":0,"rejected_prediction_tokens":0},"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0}}},"current_agent_name":"any_agent"}',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7625371156976573856,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703769297420000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'AgentWorkflow.run_agent_step',
        'parent': dict({
          'is_remote': False,
          'span_id': 3029341646924076469,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703767426087000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"ctx": "<llama_index.core.workflow.context.Context object at 0x1681e63c0>", "ev": "AgentOutput(response=ChatMessage(role=<MessageRole.ASSISTANT: \'assistant\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\'Thought: I have the current datetime in the America/New_York timezone, which is 2025-05-19T21:16:07-04:00. The year is 2025. Now I will write this value to a file.\\\\nAction: write_file\\\\nAction Input: {\\"text\\": \\"2025\\"}\')]), tool_calls=[ToolSelection(tool_id=\'4acb281f-5a3a-4429-81c0-64cd7bcba9e4\', tool_name=\'write_file\', tool_kwargs={\'text\': \'2025\'})], raw={\'id\': \'chatcmpl-778f045a-820a-40d2-909f-f1faf708c254\', \'created\': 1747703769, \'model\': \'gpt-4.1-mini\', \'object\': \'chat.completion.chunk\', \'system_fingerprint\': \'fp_79b79be41f\', \'choices\': [{\'finish_reason\': None, \'index\': 0, \'delta\': {\'provider_specific_fields\': None, \'content\': None, \'role\': None, \'function_call\': None, \'tool_calls\': None, \'audio\': None}, \'logprobs\': None}], \'provider_specific_fields\': None, \'stream_options\': {\'include_usage\': True}, \'usage\': {\'completion_tokens\': 67, \'prompt_tokens\': 735, \'total_tokens\': 802, \'completion_tokens_details\': {\'accepted_prediction_tokens\': 0, \'audio_tokens\': 0, \'reasoning_tokens\': 0, \'rejected_prediction_tokens\': 0}, \'prompt_tokens_details\': {\'audio_tokens\': 0, \'cached_tokens\': 0}}}, current_agent_name=\'any_agent\')"}',
          'openinference.span.kind': 'CHAIN',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8663214271148978901,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703769298029000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'AgentWorkflow.parse_agent_output',
        'parent': dict({
          'is_remote': False,
          'span_id': 3029341646924076469,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703769297886000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"kwargs": {"text": "2025"}}',
          'openinference.span.kind': 'TOOL',
          'output.mime_type': 'application/json',
          'output.value': '{"content":"None","tool_name":"write_file","raw_input":{"args":[],"kwargs":{"text":"2025"}},"raw_output":null}',
          'service.name': 'llama_index',
          'tool.description': '''
            write_file(text: str) -> None
            write the text to a file in the tmp_path directory
            
                    Args:
                        text (str): The text to write to the file.
            
                    Returns:
                        None
                    
          ''',
          'tool.name': 'write_file',
          'tool.parameters': '{"properties": {"text": {"title": "Text", "type": "string"}}, "required": ["text"], "type": "object"}',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 861048184631276872,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703769298936000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'FunctionTool.acall',
        'parent': dict({
          'is_remote': False,
          'span_id': 2361895303743960096,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703769298363000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"ctx": "<llama_index.core.workflow.context.Context object at 0x1681e63c0>", "ev": "ToolCall(tool_name=\'write_file\', tool_kwargs={\'text\': \'2025\'}, tool_id=\'4acb281f-5a3a-4429-81c0-64cd7bcba9e4\')"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"tool_name":"write_file","tool_kwargs":{"text":"2025"},"tool_id":"4acb281f-5a3a-4429-81c0-64cd7bcba9e4","tool_output":{"content":"None","tool_name":"write_file","raw_input":{"args":[],"kwargs":{"text":"2025"}},"raw_output":null},"return_direct":false}',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2361895303743960096,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703769299794000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'AgentWorkflow.call_tool',
        'parent': dict({
          'is_remote': False,
          'span_id': 3029341646924076469,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703769298191000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"ctx": "<llama_index.core.workflow.context.Context object at 0x1681e63c0>", "ev": "ToolCallResult(tool_name=\'write_file\', tool_kwargs={\'text\': \'2025\'}, tool_id=\'4acb281f-5a3a-4429-81c0-64cd7bcba9e4\', tool_output=ToolOutput(content=\'None\', tool_name=\'write_file\', raw_input={\'args\': (), \'kwargs\': {\'text\': \'2025\'}}, raw_output=None, is_error=False), return_direct=False)"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"input":[{"role":"user","blocks":[{"text":"Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]}],"current_agent_name":"any_agent"}',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 13703791853730310157,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703769300201000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'AgentWorkflow.aggregate_tool_results',
        'parent': dict({
          'is_remote': False,
          'span_id': 3029341646924076469,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703769299947000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"ctx": "<llama_index.core.workflow.context.Context object at 0x1681e63c0>", "ev": "AgentInput(input=[ChatMessage(role=<MessageRole.USER: \'user\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\')])], current_agent_name=\'any_agent\')"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"input":[{"role":"system","blocks":[{"text":"Search the web to answer"}]},{"role":"user","blocks":[{"text":"Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]}],"current_agent_name":"any_agent"}',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 940271587442602724,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703769300462000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'AgentWorkflow.setup_agent',
        'parent': dict({
          'is_remote': False,
          'span_id': 3029341646924076469,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703769300314000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'cost_completion': 0.0,
          'cost_prompt': 0.0003252,
          'input.mime_type': 'application/json',
          'input.value': '{"messages": ["ChatMessage(role=<MessageRole.SYSTEM: \'system\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\'You are designed to help with a variety of tasks, from answering questions to providing summaries to other types of analyses.\\\\n\\\\n## Tools\\\\n\\\\nYou have access to a wide variety of tools. You are responsible for using the tools in any sequence you deem appropriate to complete the task at hand.\\\\nThis may require breaking the task into subtasks and using different tools to complete each subtask.\\\\n\\\\nYou have access to the following tools:\\\\n> Tool Name: write_file\\\\nTool Description: write_file(text: str) -> None\\\\nwrite the text to a file in the tmp_path directory\\\\n\\\\n        Args:\\\\n            text (str): The text to write to the file.\\\\n\\\\n        Returns:\\\\n            None\\\\n        \\\\nTool Args: {\\"properties\\": {\\"text\\": {\\"title\\": \\"Text\\", \\"type\\": \\"string\\"}}, \\"required\\": [\\"text\\"], \\"type\\": \\"object\\"}\\\\n\\\\n> Tool Name: get_current_time\\\\nTool Description: Get current time in a specific timezones\\\\nTool Args: {\\"properties\\": {\\"timezone\\": {\\"description\\": \\"IANA timezone name (e.g., \\\\\'America/New_York\\\\\', \\\\\'Europe/London\\\\\'). Use \\\\\'America/New_York\\\\\' as local timezone if no timezone provided by the user.\\", \\"title\\": \\"Timezone\\", \\"type\\": \\"string\\"}}, \\"required\\": [\\"timezone\\"], \\"type\\": \\"object\\"}\\\\n\\\\n\\\\n\\\\n## Output Format\\\\n\\\\nPlease answer in the same language as the question and use the following format:\\\\n\\\\n```\\\\nThought: The current language of the user is: (user\\\\\'s language). I need to use a tool to help me answer the question.\\\\nAction: tool name (one of write_file, get_current_time) if using a tool.\\\\nAction Input: the input to the tool, in a JSON format representing the kwargs (e.g. {\\"input\\": \\"hello world\\", \\"num_beams\\": 5})\\\\n```\\\\n\\\\nPlease ALWAYS start with a Thought.\\\\n\\\\nNEVER surround your response with markdown code markers. You may use code markers within your response if you need to.\\\\n\\\\nPlease use a valid JSON format for the Action Input. Do NOT do this {\\\\\'input\\\\\': \\\\\'hello world\\\\\', \\\\\'num_beams\\\\\': 5}.\\\\n\\\\nIf this format is used, the tool will respond in the following format:\\\\n\\\\n```\\\\nObservation: tool response\\\\n```\\\\n\\\\nYou should keep repeating the above format till you have enough information to answer the question without using any more tools. At that point, you MUST respond in one of the following two formats:\\\\n\\\\n```\\\\nThought: I can answer without using any more tools. I\\\\\'ll use the user\\\\\'s language to answer\\\\nAnswer: [your answer here (In the same language as the user\\\\\'s question)]\\\\n```\\\\n\\\\n```\\\\nThought: I cannot answer the question with the provided tools.\\\\nAnswer: [your answer here (In the same language as the user\\\\\'s question)]\\\\n```\\\\n\\\\n## Current Conversation\\\\n\\\\nBelow is the current conversation consisting of interleaving human and assistant messages.\\\\n\')])", "ChatMessage(role=<MessageRole.USER: \'user\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\')])", "ChatMessage(role=<MessageRole.ASSISTANT: \'assistant\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\\"Thought: I need to get the current time in the America/New_York timezone to find out the year.\\\\nAction: get_current_time\\\\nAction Input: {\'timezone\': \'America/New_York\'}\\")])", "ChatMessage(role=<MessageRole.USER: \'user\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\'Observation: meta=None content=[TextContent(type=\\\\\'text\\\\\', text=\\\\\'{\\\\\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\\\\\n  \\"datetime\\": \\"2025-05-19T21:16:07-04:00\\",\\\\\\\\n  \\"is_dst\\": true\\\\\\\\n}\\\\\', annotations=None)] isError=False\')])", "ChatMessage(role=<MessageRole.ASSISTANT: \'assistant\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\\"Thought: I have the current datetime in the America/New_York timezone, which is 2025-05-19T21:16:07-04:00. The year is 2025. Now I will write this value to a file.\\\\nAction: write_file\\\\nAction Input: {\'text\': \'2025\'}\\")])", "ChatMessage(role=<MessageRole.USER: \'user\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\'Observation: None\')])"]}',
          'llm.input_messages.0.message.content': '''
            You are designed to help with a variety of tasks, from answering questions to providing summaries to other types of analyses.
            
            ## Tools
            
            You have access to a wide variety of tools. You are responsible for using the tools in any sequence you deem appropriate to complete the task at hand.
            This may require breaking the task into subtasks and using different tools to complete each subtask.
            
            You have access to the following tools:
            > Tool Name: write_file
            Tool Description: write_file(text: str) -> None
            write the text to a file in the tmp_path directory
            
                    Args:
                        text (str): The text to write to the file.
            
                    Returns:
                        None
                    
            Tool Args: {"properties": {"text": {"title": "Text", "type": "string"}}, "required": ["text"], "type": "object"}
            
            > Tool Name: get_current_time
            Tool Description: Get current time in a specific timezones
            Tool Args: {"properties": {"timezone": {"description": "IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Use 'America/New_York' as local timezone if no timezone provided by the user.", "title": "Timezone", "type": "string"}}, "required": ["timezone"], "type": "object"}
            
            
            
            ## Output Format
            
            Please answer in the same language as the question and use the following format:
            
            ```
            Thought: The current language of the user is: (user's language). I need to use a tool to help me answer the question.
            Action: tool name (one of write_file, get_current_time) if using a tool.
            Action Input: the input to the tool, in a JSON format representing the kwargs (e.g. {"input": "hello world", "num_beams": 5})
            ```
            
            Please ALWAYS start with a Thought.
            
            NEVER surround your response with markdown code markers. You may use code markers within your response if you need to.
            
            Please use a valid JSON format for the Action Input. Do NOT do this {'input': 'hello world', 'num_beams': 5}.
            
            If this format is used, the tool will respond in the following format:
            
            ```
            Observation: tool response
            ```
            
            You should keep repeating the above format till you have enough information to answer the question without using any more tools. At that point, you MUST respond in one of the following two formats:
            
            ```
            Thought: I can answer without using any more tools. I'll use the user's language to answer
            Answer: [your answer here (In the same language as the user's question)]
            ```
            
            ```
            Thought: I cannot answer the question with the provided tools.
            Answer: [your answer here (In the same language as the user's question)]
            ```
            
            ## Current Conversation
            
            Below is the current conversation consisting of interleaving human and assistant messages.
  
          ''',
          'llm.input_messages.0.message.role': 'system',
          'llm.input_messages.1.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.1.message.role': 'user',
          'llm.input_messages.2.message.content': '''
            Thought: I need to get the current time in the America/New_York timezone to find out the year.
            Action: get_current_time
            Action Input: {'timezone': 'America/New_York'}
          ''',
          'llm.input_messages.2.message.role': 'assistant',
          'llm.input_messages.3.message.content': 'Observation: meta=None content=[TextContent(type=\'text\', text=\'{\\n  "timezone": "America/New_York",\\n  "datetime": "2025-05-19T21:16:07-04:00",\\n  "is_dst": true\\n}\', annotations=None)] isError=False',
          'llm.input_messages.3.message.role': 'user',
          'llm.input_messages.4.message.content': '''
            Thought: I have the current datetime in the America/New_York timezone, which is 2025-05-19T21:16:07-04:00. The year is 2025. Now I will write this value to a file.
            Action: write_file
            Action Input: {'text': '2025'}
          ''',
          'llm.input_messages.4.message.role': 'assistant',
          'llm.input_messages.5.message.content': 'Observation: None',
          'llm.input_messages.5.message.role': 'user',
          'llm.invocation_parameters': '{"context_window":32768,"num_output":-1,"is_chat_model":true,"is_function_calling_model":true,"model_name":"gpt-4.1-mini"}',
          'llm.model_name': 'gpt-4.1-mini',
          'llm.output_messages.0.message.content': '''
            Thought: I have written the year 2025 to the file as requested.
            Answer: 2025
          ''',
          'llm.output_messages.0.message.role': 'assistant',
          'llm.token_count.completion': 21,
          'llm.token_count.completion_details.audio': 0,
          'llm.token_count.completion_details.reasoning': 0,
          'llm.token_count.prompt': 813,
          'llm.token_count.prompt_details.audio': 0,
          'llm.token_count.prompt_details.cache_read': 0,
          'llm.token_count.total': 834,
          'openinference.span.kind': 'LLM',
          'output.value': '''
            assistant: Thought: I have written the year 2025 to the file as requested.
            Answer: 2025
          ''',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17502796193570300898,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703769301106000,
        'events': list([
          dict({
            'attributes': dict({
            }),
            'name': 'First Token Stream Event',
            'timestamp': 1747703770008611000,
          }),
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'LiteLLM.astream_chat',
        'parent': dict({
          'is_remote': False,
          'span_id': 9987582800293121742,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703769300872000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"output": "Thought: I have written the year 2025 to the file as requested.\\nAnswer: 2025", "is_streaming": false}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"thought":"I have written the year 2025 to the file as requested.","response":"2025","is_streaming":false}',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14932991423358516823,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770305910000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'ReActOutputParser.parse',
        'parent': dict({
          'is_remote': False,
          'span_id': 9987582800293121742,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703770305537000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"ctx": "<llama_index.core.workflow.context.Context object at 0x1681e63c0>", "ev": "AgentSetup(input=[ChatMessage(role=<MessageRole.SYSTEM: \'system\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\'Search the web to answer\')]), ChatMessage(role=<MessageRole.USER: \'user\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file\')])], current_agent_name=\'any_agent\')"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"response":{"role":"assistant","additional_kwargs":{},"blocks":[{"text":"Thought: I have written the year 2025 to the file as requested.\\nAnswer: 2025"}]},"tool_calls":[],"raw":{"id":"chatcmpl-745536b4-8d18-4846-bb22-2cc790096ec0","created":1747703770,"model":"gpt-4.1-mini","object":"chat.completion.chunk","system_fingerprint":"fp_38647f5e19","choices":[{"finish_reason":null,"index":0,"delta":{"provider_specific_fields":null,"content":null,"role":null,"function_call":null,"tool_calls":null,"audio":null},"logprobs":null}],"provider_specific_fields":null,"stream_options":{"include_usage":true},"usage":{"completion_tokens":21,"prompt_tokens":813,"total_tokens":834,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":0,"rejected_prediction_tokens":0},"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0}}},"current_agent_name":"any_agent"}',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9987582800293121742,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770306162000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'AgentWorkflow.run_agent_step',
        'parent': dict({
          'is_remote': False,
          'span_id': 3029341646924076469,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703769300562000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"ctx": "<llama_index.core.workflow.context.Context object at 0x1681e63c0>", "ev": "AgentOutput(response=ChatMessage(role=<MessageRole.ASSISTANT: \'assistant\'>, additional_kwargs={}, blocks=[TextBlock(block_type=\'text\', text=\'Thought: I have written the year 2025 to the file as requested.\\\\nAnswer: 2025\')]), tool_calls=[], raw={\'id\': \'chatcmpl-745536b4-8d18-4846-bb22-2cc790096ec0\', \'created\': 1747703770, \'model\': \'gpt-4.1-mini\', \'object\': \'chat.completion.chunk\', \'system_fingerprint\': \'fp_38647f5e19\', \'choices\': [{\'finish_reason\': None, \'index\': 0, \'delta\': {\'provider_specific_fields\': None, \'content\': None, \'role\': None, \'function_call\': None, \'tool_calls\': None, \'audio\': None}, \'logprobs\': None}], \'provider_specific_fields\': None, \'stream_options\': {\'include_usage\': True}, \'usage\': {\'completion_tokens\': 21, \'prompt_tokens\': 813, \'total_tokens\': 834, \'completion_tokens_details\': {\'accepted_prediction_tokens\': 0, \'audio_tokens\': 0, \'reasoning_tokens\': 0, \'rejected_prediction_tokens\': 0}, \'prompt_tokens_details\': {\'audio_tokens\': 0, \'cached_tokens\': 0}}}, current_agent_name=\'any_agent\')"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{}',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9614345761804704974,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770307060000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'AgentWorkflow.parse_agent_output',
        'parent': dict({
          'is_remote': False,
          'span_id': 3029341646924076469,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703770306671000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"ctx": "<llama_index.core.workflow.context.Context object at 0x1681e63c0>", "ev": "StopEvent()"}',
          'openinference.span.kind': 'CHAIN',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3417883725170232568,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770307352000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'Workflow._done',
        'parent': dict({
          'is_remote': False,
          'span_id': 3029341646924076469,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703770307211000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"ctx": null, "stepwise": false, "checkpoint_callback": null, "start_event": "AgentWorkflowStartEvent()"}',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '{"response":{"role":"assistant","additional_kwargs":{},"blocks":[{"text":"2025"}]},"tool_calls":[{"tool_name":"get_current_time","tool_kwargs":{"timezone":"America/New_York"},"tool_id":"3e77b9d7-4ef5-4b93-937d-eefa44db7703"},{"tool_name":"write_file","tool_kwargs":{"text":"2025"},"tool_id":"4acb281f-5a3a-4429-81c0-64cd7bcba9e4"}],"raw":{"id":"chatcmpl-745536b4-8d18-4846-bb22-2cc790096ec0","created":1747703770,"model":"gpt-4.1-mini","object":"chat.completion.chunk","system_fingerprint":"fp_38647f5e19","choices":[{"finish_reason":null,"index":0,"delta":{"provider_specific_fields":null,"content":null,"role":null,"function_call":null,"tool_calls":null,"audio":null},"logprobs":null}],"provider_specific_fields":null,"stream_options":{"include_usage":true},"usage":{"completion_tokens":21,"prompt_tokens":813,"total_tokens":834,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":0,"rejected_prediction_tokens":0},"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0}}},"current_agent_name":"any_agent"}',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3029341646924076469,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770307774000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'Workflow.run',
        'parent': dict({
          'is_remote': False,
          'span_id': 7412242778152513767,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703765316753000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'any_agent.run_id': 'e4b25a64-c79e-470f-a34d-a97b1fa1c296',
          'service.name': 'llama_index',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7412242778152513767,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 338704787244175710339927973507296109956,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770307889000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'agent_run',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703765316386000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[OPENAI_trace].70503246895701876745630889114692149350
  dict({
    'final_output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
    'spans': list([
      dict({
        'attributes': dict({
          'llm.system': 'openai',
          'openinference.span.kind': 'CHAIN',
          'output.mime_type': 'application/json',
          'output.value': '["get_current_time", "convert_time"]',
          'service.name': 'openai',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17571840300537932390,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 70503246895701876745630889114692149350,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703776884804864,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'mcp_tools',
        'parent': dict({
          'is_remote': False,
          'span_id': 4027014764254572619,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 70503246895701876745630889114692149350,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703776883974912,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'cost_completion': 0.0,
          'cost_prompt': 0.00011439999999999999,
          'input.mime_type': 'application/json',
          'input.value': '[{"content": "Search the web to answer", "role": "system"}, {"role": "user", "content": "Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]',
          'llm.input_messages.0.message.content': 'Search the web to answer',
          'llm.input_messages.0.message.role': 'system',
          'llm.input_messages.1.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.1.message.role': 'user',
          'llm.invocation_parameters': '{"temperature": 0.0, "parallel_tool_calls": false, "base_url": "", "model_impl": "litellm"}',
          'llm.model_name': 'gpt-4.1-mini',
          'llm.output_messages.0.message.role': 'assistant',
          'llm.output_messages.0.message.tool_calls.0.tool_call.function.arguments': '{"timezone":"America/New_York"}',
          'llm.output_messages.0.message.tool_calls.0.tool_call.function.name': 'get_current_time',
          'llm.output_messages.0.message.tool_calls.0.tool_call.id': 'call_sODhXQeZzcyeUGUqU5t4XwcS',
          'llm.system': 'openai',
          'llm.token_count.completion': 18,
          'llm.token_count.prompt': 286,
          'openinference.span.kind': 'LLM',
          'output.mime_type': 'application/json',
          'output.value': '[{"content": null, "role": "assistant", "tool_calls": [{"function": {"arguments": "{\\"timezone\\":\\"America/New_York\\"}", "name": "get_current_time"}, "id": "call_sODhXQeZzcyeUGUqU5t4XwcS", "type": "function"}], "function_call": null, "annotations": []}]',
          'service.name': 'openai',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2354968399456182861,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 70503246895701876745630889114692149350,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703778351859968,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'generation',
        'parent': dict({
          'is_remote': False,
          'span_id': 4027014764254572619,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 70503246895701876745630889114692149350,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703776885172992,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"timezone":"America/New_York"}',
          'llm.system': 'openai',
          'openinference.span.kind': 'TOOL',
          'output.mime_type': 'application/json',
          'output.value': '{"type":"text","text":"{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-05-19T21:16:18-04:00\\",\\n  \\"is_dst\\": true\\n}","annotations":null}',
          'service.name': 'openai',
          'tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6924183169858077663,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 70503246895701876745630889114692149350,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703778355171840,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 4027014764254572619,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 70503246895701876745630889114692149350,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703778353416960,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'cost_completion': 0.0,
          'cost_prompt': 0.00014759999999999998,
          'input.mime_type': 'application/json',
          'input.value': '[{"content": "Search the web to answer", "role": "system"}, {"role": "user", "content": "Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}, {"role": "assistant", "tool_calls": [{"id": "call_sODhXQeZzcyeUGUqU5t4XwcS", "type": "function", "function": {"name": "get_current_time", "arguments": "{\\"timezone\\":\\"America/New_York\\"}"}}]}, {"role": "tool", "tool_call_id": "call_sODhXQeZzcyeUGUqU5t4XwcS", "content": "{\\"type\\":\\"text\\",\\"text\\":\\"{\\\\n  \\\\\\"timezone\\\\\\": \\\\\\"America/New_York\\\\\\",\\\\n  \\\\\\"datetime\\\\\\": \\\\\\"2025-05-19T21:16:18-04:00\\\\\\",\\\\n  \\\\\\"is_dst\\\\\\": true\\\\n}\\",\\"annotations\\":null}"}]',
          'llm.input_messages.0.message.content': 'Search the web to answer',
          'llm.input_messages.0.message.role': 'system',
          'llm.input_messages.1.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.1.message.role': 'user',
          'llm.input_messages.2.message.role': 'assistant',
          'llm.input_messages.2.message.tool_calls.0.tool_call.function.arguments': '{"timezone":"America/New_York"}',
          'llm.input_messages.2.message.tool_calls.0.tool_call.function.name': 'get_current_time',
          'llm.input_messages.2.message.tool_calls.0.tool_call.id': 'call_sODhXQeZzcyeUGUqU5t4XwcS',
          'llm.input_messages.3.message.content': '{"type":"text","text":"{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-05-19T21:16:18-04:00\\",\\n  \\"is_dst\\": true\\n}","annotations":null}',
          'llm.input_messages.3.message.role': 'tool',
          'llm.input_messages.3.message.tool_call_id': 'call_sODhXQeZzcyeUGUqU5t4XwcS',
          'llm.invocation_parameters': '{"temperature": 0.0, "parallel_tool_calls": false, "base_url": "", "model_impl": "litellm"}',
          'llm.model_name': 'gpt-4.1-mini',
          'llm.output_messages.0.message.role': 'assistant',
          'llm.output_messages.0.message.tool_calls.0.tool_call.function.arguments': '{"text":"2025"}',
          'llm.output_messages.0.message.tool_calls.0.tool_call.function.name': 'write_file',
          'llm.output_messages.0.message.tool_calls.0.tool_call.id': 'call_FssHClGcaCPzmR9cTnXAnrLY',
          'llm.system': 'openai',
          'llm.token_count.completion': 15,
          'llm.token_count.prompt': 369,
          'openinference.span.kind': 'LLM',
          'output.mime_type': 'application/json',
          'output.value': '[{"content": null, "role": "assistant", "tool_calls": [{"function": {"arguments": "{\\"text\\":\\"2025\\"}", "name": "write_file"}, "id": "call_FssHClGcaCPzmR9cTnXAnrLY", "type": "function"}], "function_call": null, "annotations": []}]',
          'service.name': 'openai',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15048815751618262242,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 70503246895701876745630889114692149350,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703779785732864,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'generation',
        'parent': dict({
          'is_remote': False,
          'span_id': 4027014764254572619,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 70503246895701876745630889114692149350,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703778356619008,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.mime_type': 'application/json',
          'input.value': '{"text":"2025"}',
          'llm.system': 'openai',
          'openinference.span.kind': 'TOOL',
          'service.name': 'openai',
          'tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2965888732819264012,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 70503246895701876745630889114692149350,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703779791441920,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 4027014764254572619,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 70503246895701876745630889114692149350,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703779790039040,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'cost_completion': 0.0,
          'cost_prompt': 0.0001572,
          'input.mime_type': 'application/json',
          'input.value': '[{"content": "Search the web to answer", "role": "system"}, {"role": "user", "content": "Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}, {"role": "assistant", "tool_calls": [{"id": "call_sODhXQeZzcyeUGUqU5t4XwcS", "type": "function", "function": {"name": "get_current_time", "arguments": "{\\"timezone\\":\\"America/New_York\\"}"}}]}, {"role": "tool", "tool_call_id": "call_sODhXQeZzcyeUGUqU5t4XwcS", "content": "{\\"type\\":\\"text\\",\\"text\\":\\"{\\\\n  \\\\\\"timezone\\\\\\": \\\\\\"America/New_York\\\\\\",\\\\n  \\\\\\"datetime\\\\\\": \\\\\\"2025-05-19T21:16:18-04:00\\\\\\",\\\\n  \\\\\\"is_dst\\\\\\": true\\\\n}\\",\\"annotations\\":null}"}, {"role": "assistant", "tool_calls": [{"id": "call_FssHClGcaCPzmR9cTnXAnrLY", "type": "function", "function": {"name": "write_file", "arguments": "{\\"text\\":\\"2025\\"}"}}]}, {"role": "tool", "tool_call_id": "call_FssHClGcaCPzmR9cTnXAnrLY", "content": "None"}]',
          'llm.input_messages.0.message.content': 'Search the web to answer',
          'llm.input_messages.0.message.role': 'system',
          'llm.input_messages.1.message.content': 'Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file',
          'llm.input_messages.1.message.role': 'user',
          'llm.input_messages.2.message.role': 'assistant',
          'llm.input_messages.2.message.tool_calls.0.tool_call.function.arguments': '{"timezone":"America/New_York"}',
          'llm.input_messages.2.message.tool_calls.0.tool_call.function.name': 'get_current_time',
          'llm.input_messages.2.message.tool_calls.0.tool_call.id': 'call_sODhXQeZzcyeUGUqU5t4XwcS',
          'llm.input_messages.3.message.content': '{"type":"text","text":"{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-05-19T21:16:18-04:00\\",\\n  \\"is_dst\\": true\\n}","annotations":null}',
          'llm.input_messages.3.message.role': 'tool',
          'llm.input_messages.3.message.tool_call_id': 'call_sODhXQeZzcyeUGUqU5t4XwcS',
          'llm.input_messages.4.message.role': 'assistant',
          'llm.input_messages.4.message.tool_calls.1.tool_call.function.arguments': '{"text":"2025"}',
          'llm.input_messages.4.message.tool_calls.1.tool_call.function.name': 'write_file',
          'llm.input_messages.4.message.tool_calls.1.tool_call.id': 'call_FssHClGcaCPzmR9cTnXAnrLY',
          'llm.input_messages.5.message.content': 'None',
          'llm.input_messages.5.message.role': 'tool',
          'llm.input_messages.5.message.tool_call_id': 'call_FssHClGcaCPzmR9cTnXAnrLY',
          'llm.invocation_parameters': '{"temperature": 0.0, "parallel_tool_calls": false, "base_url": "", "model_impl": "litellm"}',
          'llm.model_name': 'gpt-4.1-mini',
          'llm.output_messages.0.message.content': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
          'llm.output_messages.0.message.role': 'assistant',
          'llm.system': 'openai',
          'llm.token_count.completion': 25,
          'llm.token_count.prompt': 393,
          'openinference.span.kind': 'LLM',
          'output.mime_type': 'application/json',
          'output.value': '[{"content": "The current year in the America/New_York timezone is 2025. I have written this value to a file.", "role": "assistant", "tool_calls": null, "function_call": null, "annotations": []}]',
          'service.name': 'openai',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14582906007277699820,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 70503246895701876745630889114692149350,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703780698921984,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'generation',
        'parent': dict({
          'is_remote': False,
          'span_id': 4027014764254572619,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 70503246895701876745630889114692149350,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703779793998080,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'llm.system': 'openai',
          'openinference.span.kind': 'AGENT',
          'service.name': 'openai',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4027014764254572619,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 70503246895701876745630889114692149350,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703780704185856,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'any_agent',
        'parent': dict({
          'is_remote': False,
          'span_id': 10721391478341357928,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 70503246895701876745630889114692149350,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703776883904000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'openinference.span.kind': 'AGENT',
          'service.name': 'openai',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10721391478341357928,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 70503246895701876745630889114692149350,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703780704453000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'Agent workflow',
        'parent': dict({
          'is_remote': False,
          'span_id': 6918154319248594771,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 70503246895701876745630889114692149350,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703776883854000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'any_agent.run_id': '92a596d7-2b0d-42ab-a431-a43eb1e9fe86',
          'service.name': 'openai',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6918154319248594771,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 70503246895701876745630889114692149350,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703780704559000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'agent_run',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703776883696000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[SMOLAGENTS_trace].332664600250007774184390537644517853432
  dict({
    'final_output': 'The current year in the America/New_York timezone is 2025, and the value has been written to a file.',
    'spans': list([
      dict({
        'attributes': dict({
          'cost_completion': 0.0,
          'cost_prompt': 0.0001248,
          'input.mime_type': 'application/json',
          'input.value': '{"args": [[{"role": "system", "content": [{"type": "text", "text": "Search the web to answer"}]}, {"role": "user", "content": [{"type": "text", "text": "New task:\\nUse the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]}]], "kwargs": {"stop_sequences": ["Observation:", "Calling tools:"], "tools_to_call_from": ["<smolagents.tools.tool.<locals>.SimpleTool object at 0x16513bb30>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x165196cf0>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x1651969c0>", "<smolagents.default_tools.FinalAnswerTool object at 0x16511bf50>"]}}',
          'llm.invocation_parameters': '{"parallel_tool_calls": false, "temperature": 0.0, "stop_sequences": ["Observation:", "Calling tools:"], "tools_to_call_from": ["<smolagents.tools.tool.<locals>.SimpleTool object at 0x16513bb30>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x165196cf0>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x1651969c0>", "<smolagents.default_tools.FinalAnswerTool object at 0x16511bf50>"]}',
          'llm.model_name': 'gpt-4.1-mini',
          'llm.output_messages.0.message.role': 'assistant',
          'llm.output_messages.0.message.tool_calls.0.tool_call.function.name': 'get_current_time',
          'llm.output_messages.0.message.tool_calls.0.tool_call.id': 'call_KwNqd81uqPBbCiVN7USAoX1e',
          'llm.token_count.completion': 18,
          'llm.token_count.prompt': 312,
          'llm.token_count.total': 330,
          'openinference.span.kind': 'LLM',
          'output.mime_type': 'application/json',
          'output.value': '{"role": "assistant", "content": null, "tool_calls": [{"function": {"arguments": "{\\"timezone\\":\\"America/New_York\\"}", "name": "get_current_time", "description": null}, "id": "call_KwNqd81uqPBbCiVN7USAoX1e", "type": "function"}]}',
          'service.name': 'smolagents',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1169954857428287220,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770059300000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'LiteLLMModel.__call__',
        'parent': dict({
          'is_remote': False,
          'span_id': 5057890928850028810,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703769230551000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'cost_completion': 0.0,
          'cost_prompt': 0.0001248,
          'input.mime_type': 'application/json',
          'input.value': '{"args": [[{"role": "system", "content": [{"type": "text", "text": "Search the web to answer"}]}, {"role": "user", "content": [{"type": "text", "text": "New task:\\nUse the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]}]], "kwargs": {"stop_sequences": ["Observation:", "Calling tools:"], "tools_to_call_from": ["<smolagents.tools.tool.<locals>.SimpleTool object at 0x16513bb30>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x165196cf0>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x1651969c0>", "<smolagents.default_tools.FinalAnswerTool object at 0x16511bf50>"]}}',
          'llm.invocation_parameters': '{"parallel_tool_calls": false, "temperature": 0.0, "stop_sequences": ["Observation:", "Calling tools:"], "tools_to_call_from": ["<smolagents.tools.tool.<locals>.SimpleTool object at 0x16513bb30>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x165196cf0>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x1651969c0>", "<smolagents.default_tools.FinalAnswerTool object at 0x16511bf50>"]}',
          'llm.model_name': 'gpt-4.1-mini',
          'llm.output_messages.0.message.role': 'assistant',
          'llm.output_messages.0.message.tool_calls.0.tool_call.function.name': 'get_current_time',
          'llm.output_messages.0.message.tool_calls.0.tool_call.id': 'call_KwNqd81uqPBbCiVN7USAoX1e',
          'llm.token_count.completion': 18,
          'llm.token_count.prompt': 312,
          'llm.token_count.total': 330,
          'openinference.span.kind': 'LLM',
          'output.mime_type': 'application/json',
          'output.value': '{"role": "assistant", "content": null, "tool_calls": [{"function": {"arguments": "{\\"timezone\\":\\"America/New_York\\"}", "name": "get_current_time", "description": null}, "id": "call_KwNqd81uqPBbCiVN7USAoX1e", "type": "function"}]}',
          'service.name': 'smolagents',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5057890928850028810,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770063154000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'LiteLLMModel.__call__',
        'parent': dict({
          'is_remote': False,
          'span_id': 7052904030176754106,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703769230499000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'cost_completion': 0.0,
          'cost_prompt': 0.0001248,
          'input.mime_type': 'application/json',
          'input.value': '{"args": [[{"role": "system", "content": [{"type": "text", "text": "Search the web to answer"}]}, {"role": "user", "content": [{"type": "text", "text": "New task:\\nUse the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]}]], "kwargs": {"stop_sequences": ["Observation:", "Calling tools:"], "tools_to_call_from": ["<smolagents.tools.tool.<locals>.SimpleTool object at 0x16513bb30>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x165196cf0>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x1651969c0>", "<smolagents.default_tools.FinalAnswerTool object at 0x16511bf50>"]}}',
          'llm.invocation_parameters': '{"parallel_tool_calls": false, "temperature": 0.0, "stop_sequences": ["Observation:", "Calling tools:"], "tools_to_call_from": ["<smolagents.tools.tool.<locals>.SimpleTool object at 0x16513bb30>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x165196cf0>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x1651969c0>", "<smolagents.default_tools.FinalAnswerTool object at 0x16511bf50>"]}',
          'llm.model_name': 'gpt-4.1-mini',
          'llm.output_messages.0.message.role': 'assistant',
          'llm.output_messages.0.message.tool_calls.0.tool_call.function.name': 'get_current_time',
          'llm.output_messages.0.message.tool_calls.0.tool_call.id': 'call_KwNqd81uqPBbCiVN7USAoX1e',
          'llm.token_count.completion': 18,
          'llm.token_count.prompt': 312,
          'llm.token_count.total': 330,
          'openinference.span.kind': 'LLM',
          'output.mime_type': 'application/json',
          'output.value': '{"role": "assistant", "content": null, "tool_calls": [{"function": {"arguments": "{\\"timezone\\":\\"America/New_York\\"}", "name": "get_current_time", "description": null}, "id": "call_KwNqd81uqPBbCiVN7USAoX1e", "type": "function"}]}',
          'service.name': 'smolagents',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7052904030176754106,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770065447000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'LiteLLMModel.__call__',
        'parent': dict({
          'is_remote': False,
          'span_id': 18065446581058670880,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703769230433000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.value': '{"args": [], "sanitize_inputs_outputs": true, "kwargs": {"timezone": "America/New_York"}}',
          'openinference.span.kind': 'TOOL',
          'output.mime_type': 'text/plain',
          'output.value': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-05-19T21:16:10-04:00",
              "is_dst": true
            }
          ''',
          'service.name': 'smolagents',
          'tool.description': 'Get current time in a specific timezones',
          'tool.name': 'get_current_time',
          'tool.parameters': '{"timezone": {"type": "string", "description": "IANA timezone name (e.g., \'America/New_York\', \'Europe/London\'). Use \'America/New_York\' as local timezone if no timezone provided by the user."}}',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4177140074166202241,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770071184000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'MCPAdaptTool',
        'parent': dict({
          'is_remote': False,
          'span_id': 18065446581058670880,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703770068646000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'cost_completion': 0.0,
          'cost_prompt': 0.00017559999999999999,
          'input.mime_type': 'application/json',
          'input.value': '{"args": [[{"role": "system", "content": [{"type": "text", "text": "Search the web to answer"}]}, {"role": "user", "content": [{"type": "text", "text": "New task:\\nUse the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]}, {"role": "assistant", "content": [{"type": "text", "text": "Called Tool: \'get_current_time\' with arguments: {\'timezone\': \'America/New_York\'}"}]}, {"role": "tool-call", "content": [{"type": "text", "text": "Calling tools:\\n[{\'id\': \'call_KwNqd81uqPBbCiVN7USAoX1e\', \'type\': \'function\', \'function\': {\'name\': \'get_current_time\', \'arguments\': {\'timezone\': \'America/New_York\'}}}]"}]}, {"role": "tool-response", "content": [{"type": "text", "text": "Observation:\\n{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\n  \\"is_dst\\": true\\n}"}]}]], "kwargs": {"stop_sequences": ["Observation:", "Calling tools:"], "tools_to_call_from": ["<smolagents.tools.tool.<locals>.SimpleTool object at 0x16513bb30>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x165196cf0>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x1651969c0>", "<smolagents.default_tools.FinalAnswerTool object at 0x16511bf50>"]}}',
          'llm.invocation_parameters': '{"parallel_tool_calls": false, "temperature": 0.0, "stop_sequences": ["Observation:", "Calling tools:"], "tools_to_call_from": ["<smolagents.tools.tool.<locals>.SimpleTool object at 0x16513bb30>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x165196cf0>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x1651969c0>", "<smolagents.default_tools.FinalAnswerTool object at 0x16511bf50>"]}',
          'llm.model_name': 'gpt-4.1-mini',
          'llm.output_messages.0.message.role': 'assistant',
          'llm.output_messages.0.message.tool_calls.0.tool_call.function.name': 'write_file',
          'llm.output_messages.0.message.tool_calls.0.tool_call.id': 'call_UFzUSAv9BAHZ8xnSD1ONdhN3',
          'llm.token_count.completion': 15,
          'llm.token_count.prompt': 439,
          'llm.token_count.total': 454,
          'openinference.span.kind': 'LLM',
          'output.mime_type': 'application/json',
          'output.value': '{"role": "assistant", "content": null, "tool_calls": [{"function": {"arguments": "{\\"text\\":\\"2025\\"}", "name": "write_file", "description": null}, "id": "call_UFzUSAv9BAHZ8xnSD1ONdhN3", "type": "function"}]}',
          'service.name': 'smolagents',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14640408561281880973,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770965273000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'LiteLLMModel.__call__',
        'parent': dict({
          'is_remote': False,
          'span_id': 5511606290194087293,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703770074037000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'cost_completion': 0.0,
          'cost_prompt': 0.00017559999999999999,
          'input.mime_type': 'application/json',
          'input.value': '{"args": [[{"role": "system", "content": [{"type": "text", "text": "Search the web to answer"}]}, {"role": "user", "content": [{"type": "text", "text": "New task:\\nUse the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]}, {"role": "assistant", "content": [{"type": "text", "text": "Called Tool: \'get_current_time\' with arguments: {\'timezone\': \'America/New_York\'}"}]}, {"role": "tool-call", "content": [{"type": "text", "text": "Calling tools:\\n[{\'id\': \'call_KwNqd81uqPBbCiVN7USAoX1e\', \'type\': \'function\', \'function\': {\'name\': \'get_current_time\', \'arguments\': {\'timezone\': \'America/New_York\'}}}]"}]}, {"role": "tool-response", "content": [{"type": "text", "text": "Observation:\\n{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\n  \\"is_dst\\": true\\n}"}]}]], "kwargs": {"stop_sequences": ["Observation:", "Calling tools:"], "tools_to_call_from": ["<smolagents.tools.tool.<locals>.SimpleTool object at 0x16513bb30>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x165196cf0>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x1651969c0>", "<smolagents.default_tools.FinalAnswerTool object at 0x16511bf50>"]}}',
          'llm.invocation_parameters': '{"parallel_tool_calls": false, "temperature": 0.0, "stop_sequences": ["Observation:", "Calling tools:"], "tools_to_call_from": ["<smolagents.tools.tool.<locals>.SimpleTool object at 0x16513bb30>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x165196cf0>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x1651969c0>", "<smolagents.default_tools.FinalAnswerTool object at 0x16511bf50>"]}',
          'llm.model_name': 'gpt-4.1-mini',
          'llm.output_messages.0.message.role': 'assistant',
          'llm.output_messages.0.message.tool_calls.0.tool_call.function.name': 'write_file',
          'llm.output_messages.0.message.tool_calls.0.tool_call.id': 'call_UFzUSAv9BAHZ8xnSD1ONdhN3',
          'llm.token_count.completion': 15,
          'llm.token_count.prompt': 439,
          'llm.token_count.total': 454,
          'openinference.span.kind': 'LLM',
          'output.mime_type': 'application/json',
          'output.value': '{"role": "assistant", "content": null, "tool_calls": [{"function": {"arguments": "{\\"text\\":\\"2025\\"}", "name": "write_file", "description": null}, "id": "call_UFzUSAv9BAHZ8xnSD1ONdhN3", "type": "function"}]}',
          'service.name': 'smolagents',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5511606290194087293,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770971662000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'LiteLLMModel.__call__',
        'parent': dict({
          'is_remote': False,
          'span_id': 5443838043861887119,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703770073933000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'cost_completion': 0.0,
          'cost_prompt': 0.00017559999999999999,
          'input.mime_type': 'application/json',
          'input.value': '{"args": [[{"role": "system", "content": [{"type": "text", "text": "Search the web to answer"}]}, {"role": "user", "content": [{"type": "text", "text": "New task:\\nUse the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]}, {"role": "assistant", "content": [{"type": "text", "text": "Called Tool: \'get_current_time\' with arguments: {\'timezone\': \'America/New_York\'}"}]}, {"role": "tool-call", "content": [{"type": "text", "text": "Calling tools:\\n[{\'id\': \'call_KwNqd81uqPBbCiVN7USAoX1e\', \'type\': \'function\', \'function\': {\'name\': \'get_current_time\', \'arguments\': {\'timezone\': \'America/New_York\'}}}]"}]}, {"role": "tool-response", "content": [{"type": "text", "text": "Observation:\\n{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\n  \\"is_dst\\": true\\n}"}]}]], "kwargs": {"stop_sequences": ["Observation:", "Calling tools:"], "tools_to_call_from": ["<smolagents.tools.tool.<locals>.SimpleTool object at 0x16513bb30>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x165196cf0>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x1651969c0>", "<smolagents.default_tools.FinalAnswerTool object at 0x16511bf50>"]}}',
          'llm.invocation_parameters': '{"parallel_tool_calls": false, "temperature": 0.0, "stop_sequences": ["Observation:", "Calling tools:"], "tools_to_call_from": ["<smolagents.tools.tool.<locals>.SimpleTool object at 0x16513bb30>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x165196cf0>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x1651969c0>", "<smolagents.default_tools.FinalAnswerTool object at 0x16511bf50>"]}',
          'llm.model_name': 'gpt-4.1-mini',
          'llm.output_messages.0.message.role': 'assistant',
          'llm.output_messages.0.message.tool_calls.0.tool_call.function.name': 'write_file',
          'llm.output_messages.0.message.tool_calls.0.tool_call.id': 'call_UFzUSAv9BAHZ8xnSD1ONdhN3',
          'llm.token_count.completion': 15,
          'llm.token_count.prompt': 439,
          'llm.token_count.total': 454,
          'openinference.span.kind': 'LLM',
          'output.mime_type': 'application/json',
          'output.value': '{"role": "assistant", "content": null, "tool_calls": [{"function": {"arguments": "{\\"text\\":\\"2025\\"}", "name": "write_file", "description": null}, "id": "call_UFzUSAv9BAHZ8xnSD1ONdhN3", "type": "function"}]}',
          'service.name': 'smolagents',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5443838043861887119,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770975561000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'LiteLLMModel.__call__',
        'parent': dict({
          'is_remote': False,
          'span_id': 18065446581058670880,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703770073799000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.value': '{"args": [], "sanitize_inputs_outputs": true, "kwargs": {"text": "2025"}}',
          'openinference.span.kind': 'TOOL',
          'service.name': 'smolagents',
          'tool.description': 'write the text to a file in the tmp_path directory',
          'tool.name': 'write_file',
          'tool.parameters': '{"text": {"type": "string", "description": "The text to write to the file."}}',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8333932426886524017,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703770979826000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'SimpleTool',
        'parent': dict({
          'is_remote': False,
          'span_id': 18065446581058670880,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703770978795000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'cost_completion': 0.0,
          'cost_prompt': 0.000208,
          'input.mime_type': 'application/json',
          'input.value': '{"args": [[{"role": "system", "content": [{"type": "text", "text": "Search the web to answer"}]}, {"role": "user", "content": [{"type": "text", "text": "New task:\\nUse the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]}, {"role": "assistant", "content": [{"type": "text", "text": "Called Tool: \'get_current_time\' with arguments: {\'timezone\': \'America/New_York\'}"}]}, {"role": "tool-call", "content": [{"type": "text", "text": "Calling tools:\\n[{\'id\': \'call_KwNqd81uqPBbCiVN7USAoX1e\', \'type\': \'function\', \'function\': {\'name\': \'get_current_time\', \'arguments\': {\'timezone\': \'America/New_York\'}}}]"}]}, {"role": "tool-response", "content": [{"type": "text", "text": "Observation:\\n{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\n  \\"is_dst\\": true\\n}"}]}, {"role": "assistant", "content": [{"type": "text", "text": "Called Tool: \'write_file\' with arguments: {\'text\': \'2025\'}"}]}, {"role": "tool-call", "content": [{"type": "text", "text": "Calling tools:\\n[{\'id\': \'call_UFzUSAv9BAHZ8xnSD1ONdhN3\', \'type\': \'function\', \'function\': {\'name\': \'write_file\', \'arguments\': {\'text\': \'2025\'}}}]"}]}, {"role": "tool-response", "content": [{"type": "text", "text": "Observation:\\nNone"}]}]], "kwargs": {"stop_sequences": ["Observation:", "Calling tools:"], "tools_to_call_from": ["<smolagents.tools.tool.<locals>.SimpleTool object at 0x16513bb30>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x165196cf0>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x1651969c0>", "<smolagents.default_tools.FinalAnswerTool object at 0x16511bf50>"]}}',
          'llm.invocation_parameters': '{"parallel_tool_calls": false, "temperature": 0.0, "stop_sequences": ["Observation:", "Calling tools:"], "tools_to_call_from": ["<smolagents.tools.tool.<locals>.SimpleTool object at 0x16513bb30>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x165196cf0>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x1651969c0>", "<smolagents.default_tools.FinalAnswerTool object at 0x16511bf50>"]}',
          'llm.model_name': 'gpt-4.1-mini',
          'llm.output_messages.0.message.role': 'assistant',
          'llm.output_messages.0.message.tool_calls.0.tool_call.function.name': 'final_answer',
          'llm.output_messages.0.message.tool_calls.0.tool_call.id': 'call_qLMyRnlxEFBMzWdT1CCGDdeS',
          'llm.token_count.completion': 38,
          'llm.token_count.prompt': 520,
          'llm.token_count.total': 558,
          'openinference.span.kind': 'LLM',
          'output.mime_type': 'application/json',
          'output.value': '{"role": "assistant", "content": null, "tool_calls": [{"function": {"arguments": "{\\"answer\\":\\"The current year in the America/New_York timezone is 2025, and the value has been written to a file.\\"}", "name": "final_answer", "description": null}, "id": "call_qLMyRnlxEFBMzWdT1CCGDdeS", "type": "function"}]}',
          'service.name': 'smolagents',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8722187704685366638,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703772188628000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'LiteLLMModel.__call__',
        'parent': dict({
          'is_remote': False,
          'span_id': 14606795512068904562,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703770981965000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'cost_completion': 0.0,
          'cost_prompt': 0.000208,
          'input.mime_type': 'application/json',
          'input.value': '{"args": [[{"role": "system", "content": [{"type": "text", "text": "Search the web to answer"}]}, {"role": "user", "content": [{"type": "text", "text": "New task:\\nUse the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]}, {"role": "assistant", "content": [{"type": "text", "text": "Called Tool: \'get_current_time\' with arguments: {\'timezone\': \'America/New_York\'}"}]}, {"role": "tool-call", "content": [{"type": "text", "text": "Calling tools:\\n[{\'id\': \'call_KwNqd81uqPBbCiVN7USAoX1e\', \'type\': \'function\', \'function\': {\'name\': \'get_current_time\', \'arguments\': {\'timezone\': \'America/New_York\'}}}]"}]}, {"role": "tool-response", "content": [{"type": "text", "text": "Observation:\\n{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\n  \\"is_dst\\": true\\n}"}]}, {"role": "assistant", "content": [{"type": "text", "text": "Called Tool: \'write_file\' with arguments: {\'text\': \'2025\'}"}]}, {"role": "tool-call", "content": [{"type": "text", "text": "Calling tools:\\n[{\'id\': \'call_UFzUSAv9BAHZ8xnSD1ONdhN3\', \'type\': \'function\', \'function\': {\'name\': \'write_file\', \'arguments\': {\'text\': \'2025\'}}}]"}]}, {"role": "tool-response", "content": [{"type": "text", "text": "Observation:\\nNone"}]}]], "kwargs": {"stop_sequences": ["Observation:", "Calling tools:"], "tools_to_call_from": ["<smolagents.tools.tool.<locals>.SimpleTool object at 0x16513bb30>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x165196cf0>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x1651969c0>", "<smolagents.default_tools.FinalAnswerTool object at 0x16511bf50>"]}}',
          'llm.invocation_parameters': '{"parallel_tool_calls": false, "temperature": 0.0, "stop_sequences": ["Observation:", "Calling tools:"], "tools_to_call_from": ["<smolagents.tools.tool.<locals>.SimpleTool object at 0x16513bb30>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x165196cf0>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x1651969c0>", "<smolagents.default_tools.FinalAnswerTool object at 0x16511bf50>"]}',
          'llm.model_name': 'gpt-4.1-mini',
          'llm.output_messages.0.message.role': 'assistant',
          'llm.output_messages.0.message.tool_calls.0.tool_call.function.name': 'final_answer',
          'llm.output_messages.0.message.tool_calls.0.tool_call.id': 'call_qLMyRnlxEFBMzWdT1CCGDdeS',
          'llm.token_count.completion': 38,
          'llm.token_count.prompt': 520,
          'llm.token_count.total': 558,
          'openinference.span.kind': 'LLM',
          'output.mime_type': 'application/json',
          'output.value': '{"role": "assistant", "content": null, "tool_calls": [{"function": {"arguments": "{\\"answer\\":\\"The current year in the America/New_York timezone is 2025, and the value has been written to a file.\\"}", "name": "final_answer", "description": null}, "id": "call_qLMyRnlxEFBMzWdT1CCGDdeS", "type": "function"}]}',
          'service.name': 'smolagents',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14606795512068904562,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703772196831000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'LiteLLMModel.__call__',
        'parent': dict({
          'is_remote': False,
          'span_id': 3526776027533588773,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703770981863000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'cost_completion': 0.0,
          'cost_prompt': 0.000208,
          'input.mime_type': 'application/json',
          'input.value': '{"args": [[{"role": "system", "content": [{"type": "text", "text": "Search the web to answer"}]}, {"role": "user", "content": [{"type": "text", "text": "New task:\\nUse the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]}, {"role": "assistant", "content": [{"type": "text", "text": "Called Tool: \'get_current_time\' with arguments: {\'timezone\': \'America/New_York\'}"}]}, {"role": "tool-call", "content": [{"type": "text", "text": "Calling tools:\\n[{\'id\': \'call_KwNqd81uqPBbCiVN7USAoX1e\', \'type\': \'function\', \'function\': {\'name\': \'get_current_time\', \'arguments\': {\'timezone\': \'America/New_York\'}}}]"}]}, {"role": "tool-response", "content": [{"type": "text", "text": "Observation:\\n{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-05-19T21:16:10-04:00\\",\\n  \\"is_dst\\": true\\n}"}]}, {"role": "assistant", "content": [{"type": "text", "text": "Called Tool: \'write_file\' with arguments: {\'text\': \'2025\'}"}]}, {"role": "tool-call", "content": [{"type": "text", "text": "Calling tools:\\n[{\'id\': \'call_UFzUSAv9BAHZ8xnSD1ONdhN3\', \'type\': \'function\', \'function\': {\'name\': \'write_file\', \'arguments\': {\'text\': \'2025\'}}}]"}]}, {"role": "tool-response", "content": [{"type": "text", "text": "Observation:\\nNone"}]}]], "kwargs": {"stop_sequences": ["Observation:", "Calling tools:"], "tools_to_call_from": ["<smolagents.tools.tool.<locals>.SimpleTool object at 0x16513bb30>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x165196cf0>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x1651969c0>", "<smolagents.default_tools.FinalAnswerTool object at 0x16511bf50>"]}}',
          'llm.invocation_parameters': '{"parallel_tool_calls": false, "temperature": 0.0, "stop_sequences": ["Observation:", "Calling tools:"], "tools_to_call_from": ["<smolagents.tools.tool.<locals>.SimpleTool object at 0x16513bb30>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x165196cf0>", "<mcpadapt.smolagents_adapter.SmolAgentsAdapter.adapt.<locals>.MCPAdaptTool object at 0x1651969c0>", "<smolagents.default_tools.FinalAnswerTool object at 0x16511bf50>"]}',
          'llm.model_name': 'gpt-4.1-mini',
          'llm.output_messages.0.message.role': 'assistant',
          'llm.output_messages.0.message.tool_calls.0.tool_call.function.name': 'final_answer',
          'llm.output_messages.0.message.tool_calls.0.tool_call.id': 'call_qLMyRnlxEFBMzWdT1CCGDdeS',
          'llm.token_count.completion': 38,
          'llm.token_count.prompt': 520,
          'llm.token_count.total': 558,
          'openinference.span.kind': 'LLM',
          'output.mime_type': 'application/json',
          'output.value': '{"role": "assistant", "content": null, "tool_calls": [{"function": {"arguments": "{\\"answer\\":\\"The current year in the America/New_York timezone is 2025, and the value has been written to a file.\\"}", "name": "final_answer", "description": null}, "id": "call_qLMyRnlxEFBMzWdT1CCGDdeS", "type": "function"}]}',
          'service.name': 'smolagents',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3526776027533588773,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703772200966000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'LiteLLMModel.__call__',
        'parent': dict({
          'is_remote': False,
          'span_id': 18065446581058670880,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703770981739000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.value': '{"args": [], "sanitize_inputs_outputs": true, "kwargs": {"answer": "The current year in the America/New_York timezone is 2025, and the value has been written to a file."}}',
          'openinference.span.kind': 'TOOL',
          'service.name': 'smolagents',
          'tool.description': 'Provides a final answer to the given problem.',
          'tool.name': 'final_answer',
          'tool.parameters': '{"answer": {"type": "any", "description": "The final answer to the problem"}}',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11949037981081407530,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703772204375000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'FinalAnswerTool',
        'parent': dict({
          'is_remote': False,
          'span_id': 18065446581058670880,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703772204319000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'input.value': '{"task": "Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file", "stream": false, "reset": true, "images": null, "additional_args": null, "max_steps": null}',
          'llm.token_count.completion': 71,
          'llm.token_count.prompt': 1271,
          'llm.token_count.total': 1342,
          'openinference.span.kind': 'AGENT',
          'output.value': 'The current year in the America/New_York timezone is 2025, and the value has been written to a file.',
          'service.name': 'smolagents',
          'smolagents.max_steps': 20,
          'smolagents.tools_names': list([
            'write_file',
            'get_current_time',
            'convert_time',
            'final_answer',
          ]),
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 18065446581058670880,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703772206105000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'ToolCallingAgent.run',
        'parent': dict({
          'is_remote': False,
          'span_id': 4152585749772513983,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703769230096000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'any_agent.run_id': 'bf827231-b623-4536-99f2-1b9188c94f77',
          'service.name': 'smolagents',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4152585749772513983,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332664600250007774184390537644517853432,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747703772206190000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'agent_run',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747703769229703000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
