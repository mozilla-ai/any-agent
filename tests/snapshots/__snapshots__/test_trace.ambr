# serializer version: 1
# name: test_agent_trace_snapshot[AGNO_trace].111709810402177282691297741314422280934
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "<instructions>\\nUse the available tools to answer.\\n</instructions>\\n\\nProvide your output as a JSON containing the following fields:\\n<json_fields>\\n[\\"steps\\"]\\n</json_fields>\\n\\nHere are the properties for each field:\\n<json_field_properties>\\n{\\n  \\"steps\\": {\\n    \\"items\\": {\\n      \\"$ref\\": \\"#/$defs/Step\\"\\n    },\\n    \\"type\\": \\"array\\"\\n  },\\n  \\"$defs\\": {\\n    \\"Step\\": {\\n      \\"number\\": {\\n        \\"type\\": \\"integer\\"\\n      },\\n      \\"description\\": {\\n        \\"type\\": \\"string\\"\\n      }\\n    }\\n  }\\n}\\n</json_field_properties>\\nStart your response with `{` and end it with `}`.\\nYour output will be passed to json.loads() to convert it to a Python object.\\nMake sure it only contains valid JSON."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.95e-05,
          'gen_ai.usage.input_tokens': 395,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5928498728364280861,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111709810402177282691297741314422280934,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956837645322313,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 10637606188958546649,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111709810402177282691297741314422280934,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956837323835890,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-31T06:13:57-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.call.id': 'F0MaG2gJO',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11006033940427848484,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111709810402177282691297741314422280934,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956837652268200,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 10637606188958546649,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111709810402177282691297741314422280934,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956837645779599,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 4.81e-05,
          'gen_ai.usage.input_tokens': 481,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11999575753716003439,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111709810402177282691297741314422280934,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956838612366606,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 10637606188958546649,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111709810402177282691297741314422280934,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956837653185582,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.call.id': 'VNILZtkbn',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9815744802801695997,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111709810402177282691297741314422280934,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956838615591382,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 10637606188958546649,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111709810402177282691297741314422280934,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956838612666123,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '{"steps": [{"number": 1, "description": "Get current time in the America/New_York timezone."}, {"number": 2, "description": "Write the year to a file."}]}',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 5.1e-05,
          'gen_ai.usage.input_tokens': 510,
          'gen_ai.usage.output_cost': 1.38e-05,
          'gen_ai.usage.output_tokens': 46,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 654319311130812238,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111709810402177282691297741314422280934,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956839252886909,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 10637606188958546649,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111709810402177282691297741314422280934,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956838616034048,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10637606188958546649,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111709810402177282691297741314422280934,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956839741384600,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956837316669353,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[GOOGLE_trace].92325670966934811726644776004305168506
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer.You must call the final_output tool when finished.The \'answer\' argument passed to the final_output tool must be a JSON string that matches the following schema:\\n{\'$defs\': {\'Step\': {\'properties\': {\'number\': {\'title\': \'Number\', \'type\': \'integer\'}, \'description\': {\'title\': \'Description\', \'type\': \'string\'}}, \'required\': [\'number\', \'description\'], \'title\': \'Step\', \'type\': \'object\'}}, \'additionalProperties\': False, \'properties\': {\'steps\': {\'items\': {\'$ref\': \'#/$defs/Step\'}, \'title\': \'Steps\', \'type\': \'array\'}}, \'required\': [\'steps\'], \'title\': \'Steps\', \'type\': \'object\'}\\n\\nYou are an agent. Your internal name is \\"any_agent\\"."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": {"timezone": "America/New_York"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 6.78e-05,
          'gen_ai.usage.input_tokens': 678,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11296129332104745183,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 92325670966934811726644776004305168506,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956396246725235,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 3149852600118889511,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 92325670966934811726644776004305168506,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956364289296065,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '"meta=None content=[TextContent(type=\'text\', text=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-07-31T06:06:36-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\', annotations=None, meta=None)] structuredContent=None isError=False"',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.call.id': 'PC75jMF8D',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15903213883995332161,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 92325670966934811726644776004305168506,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956396252583161,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 3170320753090586656,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 92325670966934811726644776004305168506,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956396247281711,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": {"text": "2025"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 8.03e-05,
          'gen_ai.usage.input_tokens': 803,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 13493242833929407053,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 92325670966934811726644776004305168506,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956423567156075,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 3149852600118889511,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 92325670966934811726644776004305168506,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956396253646953,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.call.id': '2dgUEz9IE',
          'gen_ai.tool.description': '''
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5710472272300125690,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 92325670966934811726644776004305168506,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956423569102825,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 1009141267757143006,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 92325670966934811726644776004305168506,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956423567670369,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_output", "tool.args": {"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year to a file.\\"}]}"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 8.4e-05,
          'gen_ai.usage.input_tokens': 840,
          'gen_ai.usage.output_cost': 1.68e-05,
          'gen_ai.usage.output_tokens': 56,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3784087404705279803,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 92325670966934811726644776004305168506,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956520599043727,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 3149852600118889511,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 92325670966934811726644776004305168506,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956423570217675,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"success": true, "result": {"steps": [{"number": 1, "description": "Get current time in the America/New_York timezone."}, {"number": 2, "description": "Write the year to a file."}]}}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year to a file.\\"}]}"}',
          'gen_ai.tool.call.id': 'arjy9gtJz',
          'gen_ai.tool.description': '''
            This tool is used to validate the final output. It must be called when the final answer is ready in order to ensure that the output is valid.
            
            Args:
                answer: The final output that can be loaded as a Pydantic model. This must be a JSON compatible string that matches the following schema:
                    {'$defs': {'Step': {'properties': {'number': {'title': 'Number', 'type': 'integer'}, 'description': {'title': 'Description', 'type': 'string'}}, 'required': ['number', 'description'], 'title': 'Step', 'type': 'object'}}, 'additionalProperties': False, 'properties': {'steps': {'items': {'$ref': '#/$defs/Step'}, 'title': 'Steps', 'type': 'array'}}, 'required': ['steps'], 'title': 'Steps', 'type': 'object'}
            
            Returns:
                A dictionary with the following keys:
                    - success: True if the output is valid, False otherwise.
                    - result: The final output if success is True, otherwise an error message.
          ''',
          'gen_ai.tool.name': 'final_output',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15498844062526366947,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 92325670966934811726644776004305168506,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956520601296678,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_output',
        'parent': dict({
          'is_remote': False,
          'span_id': 6633615826855462855,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 92325670966934811726644776004305168506,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956520599464186,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2416632225616375484,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 92325670966934811726644776004305168506,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956520601533539,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956364287687703,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[LANGCHAIN_trace].9002218614103301129880725683107320972
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": {"timezone": "America/New_York"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 2.41e-05,
          'gen_ai.usage.input_tokens': 241,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10539588922905134047,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494931447498000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 271510782303709780,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494930736265000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-14T08:08:51-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2756326673644379454,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494931457718000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 271510782303709780,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494931451738000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": {"text": "2025"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.25e-05,
          'gen_ai.usage.input_tokens': 325,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5721240668628164531,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494932393912000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 271510782303709780,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494931460004000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': 'null',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': '''
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9081900601920099036,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494932400857000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 271510782303709780,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494932397837000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            Here are the steps I have taken:
            
            1. Found the current time in the America/New_York timezone.
            2. Extracted the year from the current time.
            3. Wrote the year to a file.
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.6e-05,
          'gen_ai.usage.input_tokens': 360,
          'gen_ai.usage.output_cost': 1.3199999999999999e-05,
          'gen_ai.usage.output_tokens': 44,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3806864827295875436,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494934724427000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 271510782303709780,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494932403941000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            {
              "steps": [
                {
                  "number": 1,
                  "description": "Found the current time in the America/New_York timezone."
                },
                {
                  "number": 2,
                  "description": "Extracted the year from the current time."
                },
                {
                  "number": 3,
                  "description": "Wrote the year to a file."
                }
              ]
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.35e-05,
          'gen_ai.usage.input_tokens': 335,
          'gen_ai.usage.output_cost': 2.6099999999999997e-05,
          'gen_ai.usage.output_tokens': 87,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4577035281628853543,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494936360033000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 271510782303709780,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494934726293000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 271510782303709780,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494936360194000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494930733116000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[LLAMA_INDEX_trace].87218943738446111919151017891041767495
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer.You must call the final_output tool when finished.The \'answer\' argument passed to the final_output tool must be a JSON string that matches the following schema:\\n{\'$defs\': {\'Step\': {\'properties\': {\'number\': {\'title\': \'Number\', \'type\': \'integer\'}, \'description\': {\'title\': \'Description\', \'type\': \'string\'}}, \'required\': [\'number\', \'description\'], \'title\': \'Step\', \'type\': \'object\'}}, \'additionalProperties\': False, \'properties\': {\'steps\': {\'items\': {\'$ref\': \'#/$defs/Step\'}, \'title\': \'Steps\', \'type\': \'array\'}}, \'required\': [\'steps\'], \'title\': \'Steps\', \'type\': \'object\'}"}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 2.03e-05,
          'gen_ai.usage.input_tokens': 203,
          'gen_ai.usage.output_cost': 1.0199999999999999e-05,
          'gen_ai.usage.output_tokens': 34,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5290427881000787287,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87218943738446111919151017891041767495,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956702615168070,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 14865299837854495390,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87218943738446111919151017891041767495,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956701619085639,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-31T06:11:42-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9682337060848947750,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87218943738446111919151017891041767495,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956703020971927,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 14865299837854495390,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87218943738446111919151017891041767495,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956702616401904,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 2.94e-05,
          'gen_ai.usage.input_tokens': 294,
          'gen_ai.usage.output_cost': 9.6e-06,
          'gen_ai.usage.output_tokens': 32,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15919484083486427769,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87218943738446111919151017891041767495,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956707538516147,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 14865299837854495390,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87218943738446111919151017891041767495,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956703022202436,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '"None"',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': '''
            write_file(text: str) -> None
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
  
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10334326967720909573,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87218943738446111919151017891041767495,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956707540940295,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 14865299837854495390,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87218943738446111919151017891041767495,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956707539528146,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_output", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.1599999999999996e-05,
          'gen_ai.usage.input_tokens': 316,
          'gen_ai.usage.output_cost': 2.91e-05,
          'gen_ai.usage.output_tokens': 97,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9864782696754778464,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87218943738446111919151017891041767495,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956708106606758,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 14865299837854495390,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87218943738446111919151017891041767495,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956707542283766,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"success": true, "result": {"steps": [{"number": 1, "description": "Get current time in the America/New_York timezone."}, {"number": 2, "description": "Write the year (2025) to a file."}]}}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year (2025) to a file.\\"}]}"}',
          'gen_ai.tool.description': '''
            final_output(answer: str) -> dict[str, str | bool | dict[str, typing.Any] | list[typing.Any]]
            This tool is used to validate the final output. It must be called when the final answer is ready in order to ensure that the output is valid.
            
                Args:
                    answer: The final output that can be loaded as a Pydantic model. This must be a JSON compatible string that matches the following schema:
                        {'$defs': {'Step': {'properties': {'number': {'title': 'Number', 'type': 'integer'}, 'description': {'title': 'Description', 'type': 'string'}}, 'required': ['number', 'description'], 'title': 'Step', 'type': 'object'}}, 'additionalProperties': False, 'properties': {'steps': {'items': {'$ref': '#/$defs/Step'}, 'title': 'Steps', 'type': 'array'}}, 'required': ['steps'], 'title': 'Steps', 'type': 'object'}
            
                Returns:
                    A dictionary with the following keys:
                        - success: True if the output is valid, False otherwise.
                        - result: The final output if success is True, otherwise an error message.
            
                
          ''',
          'gen_ai.tool.name': 'final_output',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15137473511972157904,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87218943738446111919151017891041767495,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956708109654553,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_output',
        'parent': dict({
          'is_remote': False,
          'span_id': 14865299837854495390,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87218943738446111919151017891041767495,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956708107627721,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            Here are the steps I have taken:
            
            1. Get current time in the America/New_York timezone.
            2. Write the year (2025) to a file.
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 4.41e-05,
          'gen_ai.usage.input_tokens': 441,
          'gen_ai.usage.output_cost': 1.0199999999999999e-05,
          'gen_ai.usage.output_tokens': 34,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15248869613111570480,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87218943738446111919151017891041767495,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956708561024634,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 14865299837854495390,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87218943738446111919151017891041767495,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956708110959618,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            {
              "steps": [
                {
                  "number": 1,
                  "description": "Get current time in the America/New_York timezone."
                },
                {
                  "number": 2,
                  "description": "Write the year (2025) to a file."
                }
              ]
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 1.71e-05,
          'gen_ai.usage.input_tokens': 171,
          'gen_ai.usage.output_cost': 1.98e-05,
          'gen_ai.usage.output_tokens': 66,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11513290835760213242,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87218943738446111919151017891041767495,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956774436865839,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 14865299837854495390,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87218943738446111919151017891041767495,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956708564212232,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14865299837854495390,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87218943738446111919151017891041767495,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956774437125485,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956701615664857,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[OPENAI_trace].96599832630685439720248354584186773210
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer."}, {"content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken.", "role": "user"}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 4.4699999999999996e-05,
          'gen_ai.usage.input_tokens': 447,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 18320048965873105041,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 96599832630685439720248354584186773210,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956789503249430,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 16320909806268674691,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 96599832630685439720248354584186773210,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956774813508110,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"type":"text","text":"{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-07-31T06:13:09-04:00\\",\\n  \\"is_dst\\": true\\n}","annotations":null,"meta":null}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1656884715456050899,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 96599832630685439720248354584186773210,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956789509111381,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 16320909806268674691,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 96599832630685439720248354584186773210,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956789504343510,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 5.54e-05,
          'gen_ai.usage.input_tokens': 554,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15975157705198805306,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 96599832630685439720248354584186773210,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956818654793576,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 16320909806268674691,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 96599832630685439720248354584186773210,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956789512541981,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1168565348387433859,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 96599832630685439720248354584186773210,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956818657769781,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 16320909806268674691,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 96599832630685439720248354584186773210,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956818656200726,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1168565348387433859,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 96599832630685439720248354584186773210,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956818657769781,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 16320909806268674691,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 96599832630685439720248354584186773210,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956818656200726,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '{"steps": [{"number": 1, "description": "Get current time in the America/New_York timezone."}, {"number": 2, "description": "Write the year to a file."}]}',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 5.87e-05,
          'gen_ai.usage.input_tokens': 587,
          'gen_ai.usage.output_cost': 1.38e-05,
          'gen_ai.usage.output_tokens': 46,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14737988495149042228,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 96599832630685439720248354584186773210,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956836630370135,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 16320909806268674691,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 96599832630685439720248354584186773210,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956818663586381,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 16320909806268674691,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 96599832630685439720248354584186773210,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956836631603883,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956774809937358,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[SMOLAGENTS_trace].174326352417477933062275615437282625728
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer.You must call the final_output tool when finished.The \'answer\' argument passed to the final_output tool must be a JSON string that matches the following schema:\\n{\'$defs\': {\'Step\': {\'properties\': {\'number\': {\'title\': \'Number\', \'type\': \'integer\'}, \'description\': {\'title\': \'Description\', \'type\': \'string\'}}, \'required\': [\'number\', \'description\'], \'title\': \'Step\', \'type\': \'object\'}}, \'additionalProperties\': False, \'properties\': {\'steps\': {\'items\': {\'$ref\': \'#/$defs/Step\'}, \'title\': \'Steps\', \'type\': \'array\'}}, \'required\': [\'steps\'], \'title\': \'Steps\', \'type\': \'object\'}"}, {"role": "user", "content": "New task:\\nFind what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 6.89e-05,
          'gen_ai.usage.input_tokens': 689,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 16506774729000620403,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 174326352417477933062275615437282625728,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956858904655114,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 8842720668197414351,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 174326352417477933062275615437282625728,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956840175517507,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-31T06:14:18-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1283392925117659256,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 174326352417477933062275615437282625728,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956858914028813,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 8842720668197414351,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 174326352417477933062275615437282625728,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956858909083923,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 8.24e-05,
          'gen_ai.usage.input_tokens': 824,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 734154170707096639,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 174326352417477933062275615437282625728,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956859566681065,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 8842720668197414351,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 174326352417477933062275615437282625728,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956858914403542,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9073095464148418288,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 174326352417477933062275615437282625728,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956859568796238,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 8842720668197414351,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 174326352417477933062275615437282625728,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956859567014087,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_answer", "tool.args": "{\\"answer\\": \\"{\\\\\\"steps\\\\\\": [{\\\\\\"number\\\\\\": 1, \\\\\\"description\\\\\\": \\\\\\"Get the current time in the America/New_York timezone.\\\\\\"}, {\\\\\\"number\\\\\\": 2, \\\\\\"description\\\\\\": \\\\\\"Write the year to a file.\\\\\\"}]}\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 9.01e-05,
          'gen_ai.usage.input_tokens': 901,
          'gen_ai.usage.output_cost': 1.71e-05,
          'gen_ai.usage.output_tokens': 57,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8147467858525646388,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 174326352417477933062275615437282625728,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956869968596826,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 8842720668197414351,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 174326352417477933062275615437282625728,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956859569294721,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"steps": [{"number": 1, "description": "Get the current time in the America/New_York timezone."}, {"number": 2, "description": "Write the year to a file."}]}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get the current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year to a file.\\"}]}"}',
          'gen_ai.tool.description': 'Provides a final answer to the given problem.',
          'gen_ai.tool.name': 'final_answer',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15145226697657969062,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 174326352417477933062275615437282625728,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956869971174769,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_answer',
        'parent': dict({
          'is_remote': False,
          'span_id': 8842720668197414351,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 174326352417477933062275615437282625728,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956869969037860,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8842720668197414351,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 174326352417477933062275615437282625728,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956869971428246,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956840174102304,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[TINYAGENT_trace].248652986757560019514637093562087906685
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 2.4999999999999998e-05,
          'gen_ai.usage.input_tokens': 250,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9206218465202154334,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 248652986757560019514637093562087906685,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956904870353463,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 4739621190532124948,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 248652986757560019514637093562087906685,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956870338176105,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-31T06:15:04-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12345443783305899081,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 248652986757560019514637093562087906685,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956904875644205,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 4739621190532124948,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 248652986757560019514637093562087906685,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956904870595950,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.38e-05,
          'gen_ai.usage.input_tokens': 338,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 54145685957086261,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 248652986757560019514637093562087906685,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956934338088590,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 4739621190532124948,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 248652986757560019514637093562087906685,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956904875784049,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': 'None',
          'gen_ai.output.type': 'text',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 186072218621551446,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 248652986757560019514637093562087906685,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956934340772447,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 4739621190532124948,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 248652986757560019514637093562087906685,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956934338477088,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            Here are the steps I have taken:
            
            1. Found the current time in the America/New_York timezone.
            2. Extracted the year from the current time.
            3. Wrote the year to a file.
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.71e-05,
          'gen_ai.usage.input_tokens': 371,
          'gen_ai.usage.output_cost': 1.3199999999999999e-05,
          'gen_ai.usage.output_tokens': 44,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17243744169070352664,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 248652986757560019514637093562087906685,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956951916280987,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 4739621190532124948,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 248652986757560019514637093562087906685,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956934340972399,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            {
              "steps": [
                {
                  "number": 1,
                  "description": "Found the current time in the America/New_York timezone."
                },
                {
                  "number": 2,
                  "description": "Extracted the year from the current time."
                },
                {
                  "number": 3,
                  "description": "Wrote the year to a file."
                }
              ]
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.46e-05,
          'gen_ai.usage.input_tokens': 346,
          'gen_ai.usage.output_cost': 2.6099999999999997e-05,
          'gen_ai.usage.output_tokens': 87,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 426927822478459440,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 248652986757560019514637093562087906685,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956965450639086,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 4739621190532124948,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 248652986757560019514637093562087906685,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956951917842715,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4739621190532124948,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 248652986757560019514637093562087906685,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1753956965451224907,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1753956870338063770,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
