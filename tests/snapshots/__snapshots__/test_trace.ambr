# serializer version: 1
# name: test_agent_trace_snapshot[AGNO_trace].330008117380762187083381322541040191233
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "<instructions>\\nUse the available tools to answer.\\n</instructions>\\n\\nProvide your output as a JSON containing the following fields:\\n<json_fields>\\n[\\"steps\\"]\\n</json_fields>\\n\\nHere are the properties for each field:\\n<json_field_properties>\\n{\\n  \\"steps\\": {\\n    \\"items\\": {\\n      \\"$ref\\": \\"#/$defs/Step\\"\\n    },\\n    \\"type\\": \\"array\\"\\n  },\\n  \\"$defs\\": {\\n    \\"Step\\": {\\n      \\"number\\": {\\n        \\"type\\": \\"integer\\"\\n      },\\n      \\"description\\": {\\n        \\"type\\": \\"string\\"\\n      }\\n    }\\n  }\\n}\\n</json_field_properties>\\nStart your response with `{` and end it with `}`.\\nYour output will be passed to json.loads() to convert it to a Python object.\\nMake sure it only contains valid JSON."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 395,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10158083766882735126,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 330008117380762187083381322541040191233,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974373315068000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 16826223754115896609,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 330008117380762187083381322541040191233,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974372965166000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-08T07:32:53-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.call.id': 'wdsD5Zp2w',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 457533250421869186,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 330008117380762187083381322541040191233,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974373323537000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 16826223754115896609,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 330008117380762187083381322541040191233,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974373315707000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 483,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4859057670693565598,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 330008117380762187083381322541040191233,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974376277677000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 16826223754115896609,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 330008117380762187083381322541040191233,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974373324061000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.call.id': 'YTTRUs8Dh',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 16626075910985617161,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 330008117380762187083381322541040191233,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974376281675000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 16826223754115896609,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 330008117380762187083381322541040191233,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974376278365000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            {
              "steps": [
                {
                  "number": 1,
                  "description": "Get current time in the America/New_York timezone"
                },
                {
                  "number": 2,
                  "description": "Write the year to a file"
                }
              ]
            }
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 516,
          'gen_ai.usage.output_tokens': 60,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11359857824189106067,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 330008117380762187083381322541040191233,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974378851236000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 16826223754115896609,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 330008117380762187083381322541040191233,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974376282153000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 16826223754115896609,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 330008117380762187083381322541040191233,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974378953877000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974372961351000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[GOOGLE_trace].291035710612677748006208696553016571699
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer.You must call the final_output tool when finished.The \'answer\' argument passed to the final_output tool must be a JSON string that matches the following schema:\\n{\'$defs\': {\'Step\': {\'properties\': {\'number\': {\'title\': \'Number\', \'type\': \'integer\'}, \'description\': {\'title\': \'Description\', \'type\': \'string\'}}, \'required\': [\'number\', \'description\'], \'title\': \'Step\', \'type\': \'object\'}}, \'additionalProperties\': False, \'properties\': {\'steps\': {\'items\': {\'$ref\': \'#/$defs/Step\'}, \'title\': \'Steps\', \'type\': \'array\'}}, \'required\': [\'steps\'], \'title\': \'Steps\', \'type\': \'object\'}\\n\\nYou are an agent. Your internal name is \\"any_agent\\"."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": {"timezone": "America/New_York"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 661,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5089008003696208018,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 291035710612677748006208696553016571699,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974354091180000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 5570945481273396504,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 291035710612677748006208696553016571699,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974352886990000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '"meta=None content=[TextContent(type=\'text\', text=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-07-08T07:32:34-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\', annotations=None, meta=None)] structuredContent=None isError=False"',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.call.id': '45FjTWv57',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12527461002370398846,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 291035710612677748006208696553016571699,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974354099471000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 4754485227359525453,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 291035710612677748006208696553016571699,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974354092048000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": {"text": "2025"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 790,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 16085518707278550711,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 291035710612677748006208696553016571699,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974354976278000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 5570945481273396504,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 291035710612677748006208696553016571699,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974354100754000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.call.id': 'LGp8GVq1O',
          'gen_ai.tool.description': '''
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11069525376270782861,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 291035710612677748006208696553016571699,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974354981025000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 9359080566277664082,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 291035710612677748006208696553016571699,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974354977169000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_output", "tool.args": {"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year to a file.\\"}]}"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 827,
          'gen_ai.usage.output_tokens': 56,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 169022457368773096,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 291035710612677748006208696553016571699,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974367931678000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 5570945481273396504,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 291035710612677748006208696553016571699,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974354983018000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"success": true, "result": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year to a file.\\"}]}"}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year to a file.\\"}]}"}',
          'gen_ai.tool.call.id': 'ffiZoeuV5',
          'gen_ai.tool.description': '''
            You must call this tool in order to return the final answer.
            
            Args:
                answer: The final output that can be loaded as a Pydantic model. This must be a JSON compatible string that matches the following schema:
                    {'$defs': {'Step': {'properties': {'number': {'title': 'Number', 'type': 'integer'}, 'description': {'title': 'Description', 'type': 'string'}}, 'required': ['number', 'description'], 'title': 'Step', 'type': 'object'}}, 'additionalProperties': False, 'properties': {'steps': {'items': {'$ref': '#/$defs/Step'}, 'title': 'Steps', 'type': 'array'}}, 'required': ['steps'], 'title': 'Steps', 'type': 'object'}
            
            Returns:
                A dictionary with the following keys:
                    - success: True if the output is valid, False otherwise.
                    - result: The final output if success is True, otherwise an error message.
          ''',
          'gen_ai.tool.name': 'final_output',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10379350421026327695,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 291035710612677748006208696553016571699,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974367934390000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_output',
        'parent': dict({
          'is_remote': False,
          'span_id': 2315245742124441067,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 291035710612677748006208696553016571699,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974367932390000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14198400161396661473,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 291035710612677748006208696553016571699,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974367934815000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974352885786000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[LANGCHAIN_trace].231171238887064373055723779927836700424
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": {"timezone": "America/New_York"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 241,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15156327052350081302,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 231171238887064373055723779927836700424,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974357476442000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 8270418037442671461,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 231171238887064373055723779927836700424,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974356546443000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-08T07:32:37-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2474401665397289612,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 231171238887064373055723779927836700424,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974357480914000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 8270418037442671461,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 231171238887064373055723779927836700424,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974357478337000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": {"text": "2025"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 327,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 204801152359135281,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 231171238887064373055723779927836700424,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974358554821000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 8270418037442671461,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 231171238887064373055723779927836700424,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974357482157000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': 'null',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': '''
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15772862876862078971,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 231171238887064373055723779927836700424,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974358557803000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 8270418037442671461,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 231171238887064373055723779927836700424,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974358556355000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            Here is the list of the steps I have taken:
            
            1. Found the current year in the America/New_York timezone.
            2. Wrote the year to a file.
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 358,
          'gen_ai.usage.output_tokens': 36,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6894408651482638639,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 231171238887064373055723779927836700424,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974360436032000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 8270418037442671461,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 231171238887064373055723779927836700424,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974358559201000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8270418037442671461,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 231171238887064373055723779927836700424,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974363199119000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974356542816000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[LLAMA_INDEX_trace].252586920601735166526180333658072189001
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer.You must return a Steps JSON string.\\n            This object must match the following schema:\\n            {\'$defs\': {\'Step\': {\'properties\': {\'number\': {\'title\': \'Number\', \'type\': \'integer\'}, \'description\': {\'title\': \'Description\', \'type\': \'string\'}}, \'required\': [\'number\', \'description\'], \'title\': \'Step\', \'type\': \'object\'}}, \'additionalProperties\': False, \'properties\': {\'steps\': {\'items\': {\'$ref\': \'#/$defs/Step\'}, \'title\': \'Steps\', \'type\': \'array\'}}, \'required\': [\'steps\'], \'title\': \'Steps\', \'type\': \'object\'}\\n            You can use the \'final_output\' tool to help verify your output\\n            "}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 207,
          'gen_ai.usage.output_tokens': 35,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1697277798337904521,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 252586920601735166526180333658072189001,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974385612164000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 4917042611672162830,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 252586920601735166526180333658072189001,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974384920293000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-08T07:33:05-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15457064648849615848,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 252586920601735166526180333658072189001,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974385827919000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 4917042611672162830,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 252586920601735166526180333658072189001,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974385613491000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 299,
          'gen_ai.usage.output_tokens': 32,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1419149949014443587,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 252586920601735166526180333658072189001,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974386275074000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 4917042611672162830,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 252586920601735166526180333658072189001,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974385828777000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '"None"',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': '''
            write_file(text: str) -> None
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
  
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14036824227226641366,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 252586920601735166526180333658072189001,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974386278072000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 4917042611672162830,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 252586920601735166526180333658072189001,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974386276338000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_output", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 321,
          'gen_ai.usage.output_tokens': 127,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9516004571352443469,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 252586920601735166526180333658072189001,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974387212744000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 4917042611672162830,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 252586920601735166526180333658072189001,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974386278912000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"success": true, "result": "{\\n  \\"steps\\": [\\n    {\\n      \\"number\\": 1,\\n      \\"description\\": \\"Get current time in the America/New_York timezone.\\"\\n    },\\n    {\\n      \\"number\\": 2,\\n      \\"description\\": \\"Write the year to a file.\\"\\n    }\\n  ]\\n}"}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"answer": "{\\n  \\"steps\\": [\\n    {\\n      \\"number\\": 1,\\n      \\"description\\": \\"Get current time in the America/New_York timezone.\\"\\n    },\\n    {\\n      \\"number\\": 2,\\n      \\"description\\": \\"Write the year to a file.\\"\\n    }\\n  ]\\n}"}',
          'gen_ai.tool.description': '''
            final_output(answer: str) -> dict
            You must call this tool in order to return the final answer.
            
                    Args:
                        answer: The final output that can be loaded as a Pydantic model. This must be a JSON compatible string that matches the following schema:
                            {'$defs': {'Step': {'properties': {'number': {'title': 'Number', 'type': 'integer'}, 'description': {'title': 'Description', 'type': 'string'}}, 'required': ['number', 'description'], 'title': 'Step', 'type': 'object'}}, 'additionalProperties': False, 'properties': {'steps': {'items': {'$ref': '#/$defs/Step'}, 'title': 'Steps', 'type': 'array'}}, 'required': ['steps'], 'title': 'Steps', 'type': 'object'}
            
                    Returns:
                        A dictionary with the following keys:
                            - success: True if the output is valid, False otherwise.
                            - result: The final output if success is True, otherwise an error message.
            
                    
          ''',
          'gen_ai.tool.name': 'final_output',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 16097762527399686800,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 252586920601735166526180333658072189001,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974387216777000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_output',
        'parent': dict({
          'is_remote': False,
          'span_id': 4917042611672162830,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 252586920601735166526180333658072189001,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974387214378000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            Here is the final output:
            
            ```json
            {
              "steps": [
                {
                  "number": 1,
                  "description": "Get current time in the America/New_York timezone."
                },
                {
                  "number": 2,
                  "description": "Write the year to a file."
                }
              ]
            }
            ```
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 498,
          'gen_ai.usage.output_tokens': 69,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12179479903703287340,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 252586920601735166526180333658072189001,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974387806721000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 4917042611672162830,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 252586920601735166526180333658072189001,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974387218414000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4917042611672162830,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 252586920601735166526180333658072189001,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974389611726000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974384918734000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[OPENAI_trace].308126731157821440625050127471944438972
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer."}, {"content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken.", "role": "user"}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 447,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9856932643305308359,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308126731157821440625050127471944438972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974355319868000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 17931159706082391548,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308126731157821440625050127471944438972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974354411700000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"type":"text","text":"{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-07-08T07:32:35-04:00\\",\\n  \\"is_dst\\": true\\n}","annotations":null,"meta":null}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '"{\\"timezone\\": \\"America/New_York\\"}"',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3147877582517592475,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308126731157821440625050127471944438972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974355327570000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 17931159706082391548,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308126731157821440625050127471944438972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974355321415000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 556,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11916590601677738444,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308126731157821440625050127471944438972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974356855921000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 17931159706082391548,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308126731157821440625050127471944438972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974355330087000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '"{\\"text\\": \\"2025\\"}"',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7155850322354656759,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308126731157821440625050127471944438972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974356858487000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 17931159706082391548,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308126731157821440625050127471944438972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974356856778000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '"{\\"text\\": \\"2025\\"}"',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7155850322354656759,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308126731157821440625050127471944438972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974356858487000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 17931159706082391548,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308126731157821440625050127471944438972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974356856778000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '{"steps": [{"number": 1, "description": "Get current time in the America/New_York timezone."}, {"number": 2, "description": "Write the year to a file."}]}',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 589,
          'gen_ai.usage.output_tokens': 46,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8301354682509369025,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308126731157821440625050127471944438972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974358555096000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 17931159706082391548,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308126731157821440625050127471944438972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974356861643000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17931159706082391548,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308126731157821440625050127471944438972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974358555634000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974354409697000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[SMOLAGENTS_trace].308051117207069154348077785883813334567
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer.\\n\\nYour final answer must be a Steps object.\\n            This object must match the following schema:\\n            {\'$defs\': {\'Step\': {\'properties\': {\'number\': {\'title\': \'Number\', \'type\': \'integer\'}, \'description\': {\'title\': \'Description\', \'type\': \'string\'}}, \'required\': [\'number\', \'description\'], \'title\': \'Step\', \'type\': \'object\'}}, \'additionalProperties\': False, \'properties\': {\'steps\': {\'items\': {\'$ref\': \'#/$defs/Step\'}, \'title\': \'Steps\', \'type\': \'array\'}}, \'required\': [\'steps\'], \'title\': \'Steps\', \'type\': \'object\'}\\n            "}, {"role": "user", "content": "New task:\\nFind what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 457,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17190546858340115776,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308051117207069154348077785883813334567,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974374316526000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 12737475786203216450,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308051117207069154348077785883813334567,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974372967742000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-08T07:32:54-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7958778840035120301,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308051117207069154348077785883813334567,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974374321496000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 12737475786203216450,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308051117207069154348077785883813334567,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974374317327000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 584,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11354158200945444474,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308051117207069154348077785883813334567,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974375591866000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 12737475786203216450,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308051117207069154348077785883813334567,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974374321728000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7321844398664802533,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308051117207069154348077785883813334567,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974375592946000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 12737475786203216450,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308051117207069154348077785883813334567,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974375592101000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_answer", "tool.args": "{\\"answer\\": {\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get the current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year 2025 to a file.\\"}]}}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 655,
          'gen_ai.usage.output_tokens': 59,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11755965945828577315,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308051117207069154348077785883813334567,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974379455888000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 12737475786203216450,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308051117207069154348077785883813334567,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974375593354000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_answer", "tool.args": "{\\"answer\\": \\"{\\\\\\"steps\\\\\\": [{\\\\\\"number\\\\\\": 1, \\\\\\"description\\\\\\": \\\\\\"Get the current time in the America/New_York timezone.\\\\\\"}, {\\\\\\"number\\\\\\": 2, \\\\\\"description\\\\\\": \\\\\\"Write the year 2025 to a file.\\\\\\"}]}\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 835,
          'gen_ai.usage.output_tokens': 63,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1793455715569333420,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308051117207069154348077785883813334567,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974381497053000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 12737475786203216450,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308051117207069154348077785883813334567,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974379457182000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"steps": [{"number": 1, "description": "Get the current time in the America/New_York timezone."}, {"number": 2, "description": "Write the year 2025 to a file."}]}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get the current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year 2025 to a file.\\"}]}"}',
          'gen_ai.tool.description': 'Provides a final answer to the given problem.',
          'gen_ai.tool.name': 'final_answer',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4871706224066311599,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308051117207069154348077785883813334567,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974381500472000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_answer',
        'parent': dict({
          'is_remote': False,
          'span_id': 12737475786203216450,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308051117207069154348077785883813334567,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974381497650000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12737475786203216450,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 308051117207069154348077785883813334567,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974381500746000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974372967417000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[TINYAGENT_trace].234388736351612748113813546242163058983
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 250,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2068684051804274005,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234388736351612748113813546242163058983,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974377138836000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 3838847384053540692,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234388736351612748113813546242163058983,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974375612413000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-08T07:32:57-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4558152802022532646,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234388736351612748113813546242163058983,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974377148996000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 3838847384053540692,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234388736351612748113813546242163058983,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974377139301000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 334,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 18044528029364797813,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234388736351612748113813546242163058983,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974378013908000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 3838847384053540692,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234388736351612748113813546242163058983,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974377149281000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': 'None',
          'gen_ai.output.type': 'text',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15158535883764786779,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234388736351612748113813546242163058983,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974378018175000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 3838847384053540692,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234388736351612748113813546242163058983,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974378014341000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            Here are the steps I have taken:
            
            1. Found the current time in the America/New_York timezone.
            2. Extracted the year from the current time.
            3. Wrote the year to a file.
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_tokens': 367,
          'gen_ai.usage.output_tokens': 44,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12433258763617452790,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234388736351612748113813546242163058983,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974380891892000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 3838847384053540692,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234388736351612748113813546242163058983,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974378018425000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3838847384053540692,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234388736351612748113813546242163058983,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751974388603308000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.34.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751974375612278000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
