# serializer version: 1
# name: test_agent_trace_snapshot[AGNO_trace].198020899694607872198974121988475269386
  dict({
    'final_output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 6.48e-05,
          'gen_ai.usage.input_tokens': 162,
          'gen_ai.usage.output_cost': 2.88e-05,
          'gen_ai.usage.output_tokens': 18,
          'genai.output': '[{"id": "call_npccs4KiSQqLpymxkVfkrMej", "type": "function", "function": {"name": "get_current_time", "arguments": "{\\"timezone\\":\\"America/New_York\\"}"}}]',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5650723583079324254,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 198020899694607872198974121988475269386,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826286212721508,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 10368302999092225804,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 198020899694607872198974121988475269386,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826285190698912,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.tool.call.id': 'call_npccs4KiSQqLpymxkVfkrMej',
          'gen_ai.tool.name': 'get_current_time',
          'genai.output': '"{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-05-21T07:18:06-04:00\\",\\n  \\"is_dst\\": true\\n}"',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12153322643890378632,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 198020899694607872198974121988475269386,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826286217188632,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 10368302999092225804,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 198020899694607872198974121988475269386,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826286213893229,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 9.2e-05,
          'gen_ai.usage.input_tokens': 230,
          'gen_ai.usage.output_cost': 2.4e-05,
          'gen_ai.usage.output_tokens': 15,
          'genai.output': '[{"id": "call_QkpIHlgmGxkz01qi5WFjvRSt", "type": "function", "function": {"name": "write_file", "arguments": "{\\"text\\":\\"2025\\"}"}}]',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11582444743041489,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 198020899694607872198974121988475269386,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826287081812181,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 10368302999092225804,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 198020899694607872198974121988475269386,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826286217498277,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.tool.call.id': 'call_QkpIHlgmGxkz01qi5WFjvRSt',
          'gen_ai.tool.name': 'write_file',
          'genai.output': '"None"',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17169103975399709021,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 198020899694607872198974121988475269386,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826287084857664,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 10368302999092225804,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 198020899694607872198974121988475269386,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826287082888753,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.00010159999999999999,
          'gen_ai.usage.input_tokens': 254,
          'gen_ai.usage.output_cost': 3.9999999999999996e-05,
          'gen_ai.usage.output_tokens': 25,
          'genai.output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
          'genai.output.type': 'text',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7108687581401596845,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 198020899694607872198974121988475269386,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826288784655107,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 10368302999092225804,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 198020899694607872198974121988475269386,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826287085154332,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.id': 'd33aef53-19b3-47b6-8162-82b75c434231',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10368302999092225804,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 198020899694607872198974121988475269386,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826289283848390,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826285187400598,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[GOOGLE_trace].206827146651680037036369728660575885043
  dict({
    'final_output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'genai.output.type': 'text',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 18315053626596959344,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 206827146651680037036369728660575885043,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826257118162500,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 7209013328053762687,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 206827146651680037036369728660575885043,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826256034636042,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.call.id': 'call_5PD1Y93npIBz1MRfrASCLSvc',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
          'genai.output': '{"type": "text", "text": "{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-05-21T07:17:37-04:00\\",\\n  \\"is_dst\\": true\\n}"}',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 13634507850949759042,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 206827146651680037036369728660575885043,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826257121649695,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 17077057562155459800,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 206827146651680037036369728660575885043,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826257118500830,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'genai.output.type': 'text',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4008793976451812144,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 206827146651680037036369728660575885043,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826258155843971,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 7209013328053762687,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 206827146651680037036369728660575885043,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826257122401630,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.call.id': 'call_fmEIOSGAHawfxKudklB0ZjZt',
          'gen_ai.tool.description': '''
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
  
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9024613484847043347,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 206827146651680037036369728660575885043,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826258156410061,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 9066523640305068958,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 206827146651680037036369728660575885043,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826258156144556,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'genai.output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
          'genai.output.type': 'text',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8043108683837849969,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 206827146651680037036369728660575885043,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826259091575130,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 7209013328053762687,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 206827146651680037036369728660575885043,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826258157110736,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.id': '6a47be8d-d7f5-4860-a4e8-13f3a8152ae1',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15628249578168132365,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 206827146651680037036369728660575885043,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826259092494655,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826256033314437,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[LANGCHAIN_trace].193030768590593690100051725513629274920
  dict({
    'final_output': 'The year in the America/New_York timezone is 2025. I have written this value to a file.',
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.0001152,
          'gen_ai.usage.input_tokens': 288,
          'gen_ai.usage.output_cost': 2.88e-05,
          'gen_ai.usage.output_tokens': 18,
          'genai.output': '{"generation_info":{"finish_reason":"tool_calls"},"type":"ChatGeneration","message":{"content":"","additional_kwargs":{"tool_calls":[{"function":{"arguments":"{\\"timezone\\":\\"America/New_York\\"}","name":"get_current_time"},"id":"call_3uGrOjunv0acuVI6t9I9w7bD","type":"function"}]},"response_metadata":{"token_usage":{"completion_tokens":18,"prompt_tokens":288,"total_tokens":306,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":0,"rejected_prediction_tokens":0},"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0}},"model":"gpt-4.1-mini","finish_reason":"tool_calls","model_name":"gpt-4.1-mini"},"type":"ai","id":"run--12264009-9a9b-4591-847f-ba99a709ec0f-0"},"text":""}',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14043121968089159151,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193030768590593690100051725513629274920,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826264272509593,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 11195013728452740227,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193030768590593690100051725513629274920,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826263576744967,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.tool.args': "{'timezone': 'America/New_York'}",
          'gen_ai.tool.call.id': 'call_3uGrOjunv0acuVI6t9I9w7bD',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
          'genai.output': '"{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-05-21T07:17:44-04:00\\",\\n  \\"is_dst\\": true\\n}"',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7607079196658225605,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193030768590593690100051725513629274920,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826264278986776,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 11195013728452740227,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193030768590593690100051725513629274920,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826264276462221,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.0001424,
          'gen_ai.usage.input_tokens': 356,
          'gen_ai.usage.output_cost': 2.4e-05,
          'gen_ai.usage.output_tokens': 15,
          'genai.output': '{"generation_info":{"finish_reason":"tool_calls"},"type":"ChatGeneration","message":{"content":"","additional_kwargs":{"tool_calls":[{"function":{"arguments":"{\\"text\\":\\"2025\\"}","name":"write_file"},"id":"call_6cgDPuf4LLMGDvr8b7rBXudI","type":"function"}]},"response_metadata":{"token_usage":{"completion_tokens":15,"prompt_tokens":356,"total_tokens":371,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":0,"rejected_prediction_tokens":0},"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0}},"model":"gpt-4.1-mini","finish_reason":"tool_calls","model_name":"gpt-4.1-mini"},"type":"ai","id":"run--a197973d-f8cb-4caa-9890-3215ecd4591f-0"},"text":""}',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12270695037892141408,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193030768590593690100051725513629274920,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826264946586242,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 11195013728452740227,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193030768590593690100051725513629274920,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826264281765407,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.tool.args': "{'text': '2025'}",
          'gen_ai.tool.call.id': 'call_6cgDPuf4LLMGDvr8b7rBXudI',
          'gen_ai.tool.description': '''
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
          ''',
          'gen_ai.tool.name': 'write_file',
          'genai.output': '"null"',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4600794476710543028,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193030768590593690100051725513629274920,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826264952288810,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 11195013728452740227,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193030768590593690100051725513629274920,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826264951717355,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.00015199999999999998,
          'gen_ai.usage.input_tokens': 380,
          'gen_ai.usage.output_cost': 3.84e-05,
          'gen_ai.usage.output_tokens': 24,
          'genai.output': 'The year in the America/New_York timezone is 2025. I have written this value to a file.',
          'genai.output.type': 'text',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6423324733724383394,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193030768590593690100051725513629274920,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826265851030453,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 11195013728452740227,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193030768590593690100051725513629274920,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826264955469300,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.id': '577a9ffb-1d85-4285-bcc9-be3bfefbe2c6',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11195013728452740227,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193030768590593690100051725513629274920,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826265853457598,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826263569699489,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[LLAMA_INDEX_trace].141964272816190532329533258500620913948
  dict({
    'final_output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 7.2e-05,
          'gen_ai.usage.input_tokens': 180,
          'gen_ai.usage.output_cost': 2.88e-05,
          'gen_ai.usage.output_tokens': 18,
          'genai.output': '{"role":"assistant","additional_kwargs":{"tool_calls":[{"id":"call_zJg5fSmfAr6nGEpjRDdM488B","type":"function","index":0,"function":{"name":"get_current_time","arguments":"{\\"timezone\\":\\"America/New_York\\"}"}}]},"blocks":[{"block_type":"text","text":""}]}',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9773546614044707692,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 141964272816190532329533258500620913948,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826271504967044,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 10022192010065123123,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 141964272816190532329533258500620913948,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826270761871193,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.00010839999999999999,
          'gen_ai.usage.input_tokens': 271,
          'gen_ai.usage.output_cost': 2.4e-05,
          'gen_ai.usage.output_tokens': 15,
          'genai.output': '{"role":"assistant","additional_kwargs":{"tool_calls":[{"id":"call_14BVTuKCUqKlh8D1VLSc7jAn","type":"function","index":0,"function":{"name":"write_file","arguments":"{\\"text\\":\\"2025\\"}"}}]},"blocks":[{"block_type":"text","text":""}]}',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2418429372722235471,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 141964272816190532329533258500620913948,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826272761032960,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 10022192010065123123,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 141964272816190532329533258500620913948,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826271808708190,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.000118,
          'gen_ai.usage.input_tokens': 295,
          'gen_ai.usage.output_cost': 3.9999999999999996e-05,
          'gen_ai.usage.output_tokens': 25,
          'genai.output': '{"role":"assistant","additional_kwargs":{},"blocks":[{"block_type":"text","text":"The current year in the America/New_York timezone is 2025. I have written this value to a file."}]}',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7875442148119672465,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 141964272816190532329533258500620913948,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826274441756664,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 10022192010065123123,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 141964272816190532329533258500620913948,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826272767314469,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.id': 'd049e517-9825-44c2-8cd8-178291a7b068',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10022192010065123123,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 141964272816190532329533258500620913948,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826274445483518,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826270756487584,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[OPENAI_trace].122082297528931857205684360792378057622
  dict({
    'final_output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.00011439999999999999,
          'gen_ai.usage.input_tokens': 286,
          'gen_ai.usage.output_cost': 2.88e-05,
          'gen_ai.usage.output_tokens': 18,
          'genai.output': '[{"function": {"arguments": "{\\"timezone\\":\\"America/New_York\\"}", "name": "get_current_time"}, "id": "call_CluLLD8SeM7yfMg4VBYKksxw", "type": "function"}]',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1846052887738107405,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 122082297528931857205684360792378057622,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826279550144657,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 14563327288122258498,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 122082297528931857205684360792378057622,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826278532150925,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.tool.name': 'get_current_time',
          'genai.output': '{"type":"text","text":"{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-05-21T07:17:59-04:00\\",\\n  \\"is_dst\\": true\\n}","annotations":null}',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4990151583730155892,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 122082297528931857205684360792378057622,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826279554167858,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 14563327288122258498,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 122082297528931857205684360792378057622,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826279551741649,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.00014759999999999998,
          'gen_ai.usage.input_tokens': 369,
          'gen_ai.usage.output_cost': 2.4e-05,
          'gen_ai.usage.output_tokens': 15,
          'genai.output': '[{"function": {"arguments": "{\\"text\\":\\"2025\\"}", "name": "write_file"}, "id": "call_ByO0ALTNcA7Z4ANjw2GeGqNs", "type": "function"}]',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 80656774709759079,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 122082297528931857205684360792378057622,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826280771909951,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 14563327288122258498,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 122082297528931857205684360792378057622,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826279554588287,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.tool.name': 'write_file',
          'genai.output': 'no_output',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11908203419852456307,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 122082297528931857205684360792378057622,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826280773617038,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 14563327288122258498,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 122082297528931857205684360792378057622,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826280773354412,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.0001572,
          'gen_ai.usage.input_tokens': 393,
          'gen_ai.usage.output_cost': 3.9999999999999996e-05,
          'gen_ai.usage.output_tokens': 25,
          'genai.output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
          'genai.output.type': 'text',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14174629431941432375,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 122082297528931857205684360792378057622,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826281833801826,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 14563327288122258498,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 122082297528931857205684360792378057622,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826280773956519,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.id': '1bff3b18-9d29-43f2-8abc-e2a59b7ebd92',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14563327288122258498,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 122082297528931857205684360792378057622,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826281835363752,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826278530027825,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[SMOLAGENTS_trace].149689235378842782635861434420759521649
  dict({
    'final_output': 'The current year in the America/New_York timezone is 2025.',
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.response.model': 'gpt-4.1-mini-2025-04-14',
          'gen_ai.usage.input_cost': 0.0001248,
          'gen_ai.usage.input_tokens': 312,
          'gen_ai.usage.output_cost': 2.88e-05,
          'gen_ai.usage.output_tokens': 18,
          'genai.output': '[{"name": "get_current_time", "arguments": "{\\"timezone\\":\\"America/New_York\\"}"}]',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2372498007446884313,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 149689235378842782635861434420759521649,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826294238040075,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 7253423564861302061,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 149689235378842782635861434420759521649,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826293602208450,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.tool.args': '{"timezone": "America/New_York", "sanitize_inputs_outputs": true}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
          'genai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-05-21T07:18:14-04:00",
              "is_dst": true
            }
          ''',
          'genai.output.type': 'text',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 121646263888004278,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 149689235378842782635861434420759521649,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826294246252849,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 7253423564861302061,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 149689235378842782635861434420759521649,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826294243333586,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.response.model': 'gpt-4.1-mini-2025-04-14',
          'gen_ai.usage.input_cost': 0.0001752,
          'gen_ai.usage.input_tokens': 438,
          'gen_ai.usage.output_cost': 2.4e-05,
          'gen_ai.usage.output_tokens': 15,
          'genai.output': '[{"name": "write_file", "arguments": "{\\"text\\":\\"2025\\"}"}]',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4418259029396903229,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 149689235378842782635861434420759521649,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826294788392126,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 7253423564861302061,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 149689235378842782635861434420759521649,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826294247030441,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.tool.args': '{"text": "2025", "sanitize_inputs_outputs": true}',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1699417289941515606,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 149689235378842782635861434420759521649,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826294790932130,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 7253423564861302061,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 149689235378842782635861434420759521649,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826294789873361,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.response.model': 'gpt-4.1-mini-2025-04-14',
          'gen_ai.usage.input_cost': 0.000208,
          'gen_ai.usage.input_tokens': 520,
          'gen_ai.usage.output_cost': 4.48e-05,
          'gen_ai.usage.output_tokens': 28,
          'genai.output': '[{"name": "final_answer", "arguments": "{\\"answer\\":\\"The current year in the America/New_York timezone is 2025.\\"}"}]',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 13118696764427155420,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 149689235378842782635861434420759521649,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826296022165827,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 7253423564861302061,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 149689235378842782635861434420759521649,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826294791383700,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.tool.args': '{"answer": "The current year in the America/New_York timezone is 2025.", "sanitize_inputs_outputs": true}',
          'gen_ai.tool.description': 'Provides a final answer to the given problem.',
          'gen_ai.tool.name': 'final_answer',
          'genai.output': 'The current year in the America/New_York timezone is 2025.',
          'genai.output.type': 'text',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2811662083970240628,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 149689235378842782635861434420759521649,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826296024433065,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_answer',
        'parent': dict({
          'is_remote': False,
          'span_id': 7253423564861302061,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 149689235378842782635861434420759521649,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826296024391269,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.id': '274be26e-a0ea-48d1-b424-b05d4c283fde',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7253423564861302061,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 149689235378842782635861434420759521649,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826296024808211,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826293601784796,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[TINYAGENT_trace].82133397360970879726729369602474908892
  dict({
    'final_output': 'None',
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.response.model': 'gpt-4.1-mini-2025-04-14',
          'gen_ai.usage.input_cost': 0.0001252,
          'gen_ai.usage.input_tokens': 313,
          'gen_ai.usage.output_cost': 2.88e-05,
          'gen_ai.usage.output_tokens': 18,
          'genai.output': '[{"name": "get_current_time", "arguments": "{\\"timezone\\":\\"America/New_York\\"}"}]',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17068284808009816463,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 82133397360970879726729369602474908892,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826301261841956,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 12467580156169360485,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 82133397360970879726729369602474908892,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826300309195206,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.name': 'get_current_time',
          'genai.output': '"meta=None content=[TextContent(type=\'text\', text=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-21T07:18:21-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\', annotations=None)] isError=False"',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 576015767950127973,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 82133397360970879726729369602474908892,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826301269006522,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 12467580156169360485,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 82133397360970879726729369602474908892,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826301265971456,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.response.model': 'gpt-4.1-mini-2025-04-14',
          'gen_ai.usage.input_cost': 0.0001616,
          'gen_ai.usage.input_tokens': 404,
          'gen_ai.usage.output_cost': 2.4e-05,
          'gen_ai.usage.output_tokens': 15,
          'genai.output': '[{"name": "write_file", "arguments": "{\\"text\\":\\"2025\\"}"}]',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12693169350585610432,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 82133397360970879726729369602474908892,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826302590976032,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 12467580156169360485,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 82133397360970879726729369602474908892,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826301280097927,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.name': 'write_file',
          'genai.output': '"None"',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15951013178757402540,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 82133397360970879726729369602474908892,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826302594499342,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 12467580156169360485,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 82133397360970879726729369602474908892,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826302594368724,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.response.model': 'gpt-4.1-mini-2025-04-14',
          'gen_ai.usage.input_cost': 0.0001712,
          'gen_ai.usage.input_tokens': 428,
          'gen_ai.usage.output_cost': 1.6e-05,
          'gen_ai.usage.output_tokens': 10,
          'genai.output': '[{"name": "task_complete", "arguments": "{}"}]',
          'genai.output.type': 'json',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17623068617551468553,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 82133397360970879726729369602474908892,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826303323521808,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 12467580156169360485,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 82133397360970879726729369602474908892,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826302599689906,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.id': '4003b9bc-8aca-4593-b546-51d714cb0a16',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12467580156169360485,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 82133397360970879726729369602474908892,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1747826303328766825,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1747826300306310529,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
