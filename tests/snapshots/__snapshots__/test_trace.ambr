# serializer version: 1
# name: test_agent_trace_snapshot[AGNO_trace].13287997136552382035310426388315049902
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "<instructions>\\nUse the available tools to answer.\\n</instructions>\\n\\nProvide your output as a JSON containing the following fields:\\n<json_fields>\\n[\\"steps\\"]\\n</json_fields>\\n\\nHere are the properties for each field:\\n<json_field_properties>\\n{\\n  \\"steps\\": {\\n    \\"items\\": {\\n      \\"$ref\\": \\"#/$defs/Step\\"\\n    },\\n    \\"type\\": \\"array\\"\\n  },\\n  \\"$defs\\": {\\n    \\"Step\\": {\\n      \\"number\\": {\\n        \\"type\\": \\"integer\\"\\n      },\\n      \\"description\\": {\\n        \\"type\\": \\"string\\"\\n      }\\n    }\\n  }\\n}\\n</json_field_properties>\\nStart your response with `{` and end it with `}`.\\nYour output will be passed to json.loads() to convert it to a Python object.\\nMake sure it only contains valid JSON."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\":\\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 325,
          'gen_ai.usage.output_tokens': 18,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8704900569002373437,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 13287997136552382035310426388315049902,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885311826359119,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 12196018954721676208,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 13287997136552382035310426388315049902,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885311115235448,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-07T06:48:31-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.call.id': 'call_CRTDreREvImdaYzsYNeA7BYJ',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5115758860696873343,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 13287997136552382035310426388315049902,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885311832553706,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 12196018954721676208,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 13287997136552382035310426388315049902,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885311826837617,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\":\\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 393,
          'gen_ai.usage.output_tokens': 15,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3665488732042040237,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 13287997136552382035310426388315049902,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885312632866844,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 12196018954721676208,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 13287997136552382035310426388315049902,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885311832930745,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.call.id': 'call_XeJRV9IzKXhVmh0EfuKy4Eod',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10720926346038831961,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 13287997136552382035310426388315049902,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885312635358800,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 12196018954721676208,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 13287997136552382035310426388315049902,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885312633196232,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            {
              "steps": [
                {
                  "number": 1,
                  "description": "Get the current date and time in the America/New_York timezone."
                },
                {
                  "number": 2,
                  "description": "Extract the year from the current date and time."
                },
                {
                  "number": 3,
                  "description": "Write the extracted year (2025) as a single number to a file."
                }
              ]
            }
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 417,
          'gen_ai.usage.output_tokens': 98,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9756734456749260445,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 13287997136552382035310426388315049902,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885314628534821,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 12196018954721676208,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 13287997136552382035310426388315049902,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885312635629511,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12196018954721676208,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 13287997136552382035310426388315049902,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885315130675671,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885311110774752,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[GOOGLE_trace].21528711104291486852187537734165835962
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer.You must call the final_output tool when finished.The \'answer\' argument passed to the final_output tool must be a JSON string that matches the following schema:\\n{\'$defs\': {\'Step\': {\'properties\': {\'number\': {\'title\': \'Number\', \'type\': \'integer\'}, \'description\': {\'title\': \'Description\', \'type\': \'string\'}}, \'required\': [\'number\', \'description\'], \'title\': \'Step\', \'type\': \'object\'}}, \'additionalProperties\': False, \'properties\': {\'steps\': {\'items\': {\'$ref\': \'#/$defs/Step\'}, \'title\': \'Steps\', \'type\': \'array\'}}, \'required\': [\'steps\'], \'title\': \'Steps\', \'type\': \'object\'}\\n\\nYou are an agent. Your internal name is \\"any_agent\\"."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": {"timezone": "America/New_York"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 551,
          'gen_ai.usage.output_tokens': 18,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3052159150351100041,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 21528711104291486852187537734165835962,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885279431890774,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 10128710568980749016,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 21528711104291486852187537734165835962,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885278399619704,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '"meta=None content=[TextContent(type=\'text\', text=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-07-07T06:47:59-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\', annotations=None, meta=None)] structuredContent=None isError=False"',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.call.id': 'call_3DpryqhWZ3S3t7n3lKJAA7bI',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1283075088282366076,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 21528711104291486852187537734165835962,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885279437342252,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 8603399902179177044,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 21528711104291486852187537734165835962,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885279432386041,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": {"text": "2025"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 657,
          'gen_ai.usage.output_tokens': 15,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10766562582222329032,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 21528711104291486852187537734165835962,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885280156694963,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 10128710568980749016,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 21528711104291486852187537734165835962,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885279439861673,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.call.id': 'call_CYxwEUTjuvH1TsAHkLN20dZR',
          'gen_ai.tool.description': '''
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 13074690593047701168,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 21528711104291486852187537734165835962,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885280159471919,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 3833009686132512576,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 21528711104291486852187537734165835962,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885280157438031,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_output", "tool.args": {"answer": "{\\"steps\\":[{\\"number\\":1,\\"description\\":\\"Get the current date and time in the America/New_York timezone.\\"},{\\"number\\":2,\\"description\\":\\"Extract the year from the current date and time.\\"},{\\"number\\":3,\\"description\\":\\"Write the extracted year (2025) to a file.\\"}]}"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 685,
          'gen_ai.usage.output_tokens': 78,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5205022276439482836,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 21528711104291486852187537734165835962,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885281825809440,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 10128710568980749016,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 21528711104291486852187537734165835962,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885280161149101,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"success": true, "result": "{\\"steps\\":[{\\"number\\":1,\\"description\\":\\"Get the current date and time in the America/New_York timezone.\\"},{\\"number\\":2,\\"description\\":\\"Extract the year from the current date and time.\\"},{\\"number\\":3,\\"description\\":\\"Write the extracted year (2025) to a file.\\"}]}"}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"answer": "{\\"steps\\":[{\\"number\\":1,\\"description\\":\\"Get the current date and time in the America/New_York timezone.\\"},{\\"number\\":2,\\"description\\":\\"Extract the year from the current date and time.\\"},{\\"number\\":3,\\"description\\":\\"Write the extracted year (2025) to a file.\\"}]}"}',
          'gen_ai.tool.call.id': 'call_BMclMVrJaIgi84u4WQKnoocO',
          'gen_ai.tool.description': '''
            You must call this tool in order to return the final answer.
            
            Args:
                answer: The final output that can be loaded as a Pydantic model. This must be a JSON compatible string that matches the following schema:
                    {'$defs': {'Step': {'properties': {'number': {'title': 'Number', 'type': 'integer'}, 'description': {'title': 'Description', 'type': 'string'}}, 'required': ['number', 'description'], 'title': 'Step', 'type': 'object'}}, 'additionalProperties': False, 'properties': {'steps': {'items': {'$ref': '#/$defs/Step'}, 'title': 'Steps', 'type': 'array'}}, 'required': ['steps'], 'title': 'Steps', 'type': 'object'}
            
            Returns:
                A dictionary with the following keys:
                    - success: True if the output is valid, False otherwise.
                    - result: The final output if success is True, otherwise an error message.
          ''',
          'gen_ai.tool.name': 'final_output',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10353978927601107935,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 21528711104291486852187537734165835962,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885281828125915,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_output',
        'parent': dict({
          'is_remote': False,
          'span_id': 724437491399666267,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 21528711104291486852187537734165835962,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885281826287864,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5763806962672186123,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 21528711104291486852187537734165835962,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885281828563872,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885278397611513,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[LANGCHAIN_trace].336832675950209975263628627379772768446
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": {"timezone": "America/New_York"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 173,
          'gen_ai.usage.output_tokens': 18,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11147569822882087450,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 336832675950209975263628627379772768446,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885287179766419,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 2331766091841735525,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 336832675950209975263628627379772768446,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885285863735095,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-07T06:48:07-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5223884467081408881,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 336832675950209975263628627379772768446,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885287190765426,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 2331766091841735525,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 336832675950209975263628627379772768446,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885287185051371,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": {"text": "2025"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 241,
          'gen_ai.usage.output_tokens': 15,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 13465029395038382964,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 336832675950209975263628627379772768446,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885287759572400,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 2331766091841735525,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 336832675950209975263628627379772768446,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885287194962663,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': 'null',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': '''
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12398746099849514663,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 336832675950209975263628627379772768446,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885287764825315,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 2331766091841735525,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 336832675950209975263628627379772768446,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885287763060751,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            Steps taken:
            1. Retrieved the current date and time in the America/New_York timezone.
            2. Extracted the year (2025) from the retrieved date and time.
            3. Wrote the year (2025) as a single number to a file.
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 265,
          'gen_ai.usage.output_tokens': 55,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7276673740491457466,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 336832675950209975263628627379772768446,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885289502787743,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 2331766091841735525,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 336832675950209975263628627379772768446,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885287768414071,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "Steps", "tool.args": {"steps": [{"number": 1, "description": "Retrieved the current date and time in the America/New_York timezone."}, {"number": 2, "description": "Extracted the year (2025) from the retrieved date and time."}, {"number": 3, "description": "Wrote the year (2025) as a single number to a file."}]}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 231,
          'gen_ai.usage.output_tokens': 81,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8903016395744413683,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 336832675950209975263628627379772768446,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885291305367074,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 2331766091841735525,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 336832675950209975263628627379772768446,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885289518598182,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2331766091841735525,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 336832675950209975263628627379772768446,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885291308190077,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885285857341593,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[LLAMA_INDEX_trace].234689187533549909390619121322073173410
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer.You must return a Steps JSON string.\\n            This object must match the following schema:\\n            {\'$defs\': {\'Step\': {\'properties\': {\'number\': {\'title\': \'Number\', \'type\': \'integer\'}, \'description\': {\'title\': \'Description\', \'type\': \'string\'}}, \'required\': [\'number\', \'description\'], \'title\': \'Step\', \'type\': \'object\'}}, \'additionalProperties\': False, \'properties\': {\'steps\': {\'items\': {\'$ref\': \'#/$defs/Step\'}, \'title\': \'Steps\', \'type\': \'array\'}}, \'required\': [\'steps\'], \'title\': \'Steps\', \'type\': \'object\'}\\n            You can use the \'final_output\' tool to help verify your output\\n            "}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 572,
          'gen_ai.usage.output_tokens': 18,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2736988547192789000,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234689187533549909390619121322073173410,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885296219460355,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 12016320123626714746,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234689187533549909390619121322073173410,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885295287689393,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-07T06:48:16-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10299315191760278648,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234689187533549909390619121322073173410,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885296605499412,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 12016320123626714746,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234689187533549909390619121322073173410,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885296220611230,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 669,
          'gen_ai.usage.output_tokens': 15,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1384603050229823965,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234689187533549909390619121322073173410,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885297225134586,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 12016320123626714746,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234689187533549909390619121322073173410,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885296606668653,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '"None"',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': '''
            write_file(text: str) -> None
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
  
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15426311266306545911,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234689187533549909390619121322073173410,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885297228193378,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 12016320123626714746,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234689187533549909390619121322073173410,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885297226235294,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_output", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 693,
          'gen_ai.usage.output_tokens': 78,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4774443628002755710,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234689187533549909390619121322073173410,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885298815979359,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 12016320123626714746,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234689187533549909390619121322073173410,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885297229436617,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"success": true, "result": "{\\"steps\\":[{\\"number\\":1,\\"description\\":\\"Get the current date and time in the America/New_York timezone.\\"},{\\"number\\":2,\\"description\\":\\"Extract the year from the current date and time.\\"},{\\"number\\":3,\\"description\\":\\"Write the extracted year (2025) to a file.\\"}] }"}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"answer": "{\\"steps\\":[{\\"number\\":1,\\"description\\":\\"Get the current date and time in the America/New_York timezone.\\"},{\\"number\\":2,\\"description\\":\\"Extract the year from the current date and time.\\"},{\\"number\\":3,\\"description\\":\\"Write the extracted year (2025) to a file.\\"}] }"}',
          'gen_ai.tool.description': '''
            final_output(answer: str) -> dict
            You must call this tool in order to return the final answer.
            
                    Args:
                        answer: The final output that can be loaded as a Pydantic model. This must be a JSON compatible string that matches the following schema:
                            {'$defs': {'Step': {'properties': {'number': {'title': 'Number', 'type': 'integer'}, 'description': {'title': 'Description', 'type': 'string'}}, 'required': ['number', 'description'], 'title': 'Step', 'type': 'object'}}, 'additionalProperties': False, 'properties': {'steps': {'items': {'$ref': '#/$defs/Step'}, 'title': 'Steps', 'type': 'array'}}, 'required': ['steps'], 'title': 'Steps', 'type': 'object'}
            
                    Returns:
                        A dictionary with the following keys:
                            - success: True if the output is valid, False otherwise.
                            - result: The final output if success is True, otherwise an error message.
            
                    
          ''',
          'gen_ai.tool.name': 'final_output',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2410158182918859478,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234689187533549909390619121322073173410,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885298819546669,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_output',
        'parent': dict({
          'is_remote': False,
          'span_id': 12016320123626714746,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234689187533549909390619121322073173410,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885298817315268,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '{"steps":[{"number":1,"description":"Get the current date and time in the America/New_York timezone."},{"number":2,"description":"Extract the year from the current date and time."},{"number":3,"description":"Write the extracted year (2025) to a file."}]}',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 850,
          'gen_ai.usage.output_tokens': 63,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11188506570567821081,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234689187533549909390619121322073173410,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885300279647994,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 12016320123626714746,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234689187533549909390619121322073173410,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885298820491962,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12016320123626714746,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 234689187533549909390619121322073173410,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885300282329605,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885295285420643,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[OPENAI_trace].112887608162472413315472998879728406518
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer."}, {"content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken.", "role": "user"}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\":\\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 377,
          'gen_ai.usage.output_tokens': 18,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15498476499138157419,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 112887608162472413315472998879728406518,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885305166158923,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 1504440783958448954,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 112887608162472413315472998879728406518,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885304134669429,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"type":"text","text":"{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-07-07T06:48:25-04:00\\",\\n  \\"is_dst\\": true\\n}","annotations":null,"meta":null}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '"{\\"timezone\\":\\"America/New_York\\"}"',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11046507746918173741,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 112887608162472413315472998879728406518,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885305171258014,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 1504440783958448954,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 112887608162472413315472998879728406518,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885305167253895,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\":\\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 464,
          'gen_ai.usage.output_tokens': 15,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10922874668106914000,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 112887608162472413315472998879728406518,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885305728175593,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 1504440783958448954,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 112887608162472413315472998879728406518,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885305174043348,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '"{\\"text\\":\\"2025\\"}"',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2517577436233593677,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 112887608162472413315472998879728406518,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885305730386936,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 1504440783958448954,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 112887608162472413315472998879728406518,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885305729365956,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '"{\\"text\\":\\"2025\\"}"',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2517577436233593677,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 112887608162472413315472998879728406518,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885305730386936,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 1504440783958448954,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 112887608162472413315472998879728406518,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885305729365956,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '{"steps":[{"number":1,"description":"Get the current date and time in the America/New_York timezone."},{"number":2,"description":"Extract the year from the current date and time."},{"number":3,"description":"Write the extracted year (2025) to a file."}]}',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 488,
          'gen_ai.usage.output_tokens': 67,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9637852529543215870,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 112887608162472413315472998879728406518,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885307219172514,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 1504440783958448954,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 112887608162472413315472998879728406518,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885305734412839,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1504440783958448954,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 112887608162472413315472998879728406518,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885307220227667,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885304131507134,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[SMOLAGENTS_trace].131386119462896078207759251828454119318
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer.\\n\\nYour final answer must be a Steps object.\\n            This object must match the following schema:\\n            {\'$defs\': {\'Step\': {\'properties\': {\'number\': {\'title\': \'Number\', \'type\': \'integer\'}, \'description\': {\'title\': \'Description\', \'type\': \'string\'}}, \'required\': [\'number\', \'description\'], \'title\': \'Step\', \'type\': \'object\'}}, \'additionalProperties\': False, \'properties\': {\'steps\': {\'items\': {\'$ref\': \'#/$defs/Step\'}, \'title\': \'Steps\', \'type\': \'array\'}}, \'required\': [\'steps\'], \'title\': \'Steps\', \'type\': \'object\'}\\n            "}, {"role": "user", "content": "New task:\\nFind what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\":\\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 349,
          'gen_ai.usage.output_tokens': 18,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 16855530542014104012,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131386119462896078207759251828454119318,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885321191340209,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 1719491437560380344,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131386119462896078207759251828454119318,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885320426274765,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-07T06:48:41-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3070273503086818166,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131386119462896078207759251828454119318,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885321200766411,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 1719491437560380344,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131386119462896078207759251828454119318,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885321195631384,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\":\\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 478,
          'gen_ai.usage.output_tokens': 15,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7499352111921456133,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131386119462896078207759251828454119318,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885321879685165,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 1719491437560380344,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131386119462896078207759251828454119318,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885321201169598,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6554513436427502537,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131386119462896078207759251828454119318,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885321881138460,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 1719491437560380344,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131386119462896078207759251828454119318,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885321880002047,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_answer", "tool.args": "{\\"answer\\":\\"{\\\\\\"steps\\\\\\":[{\\\\\\"number\\\\\\":1,\\\\\\"description\\\\\\":\\\\\\"Get the current time in the America/New_York timezone.\\\\\\"},{\\\\\\"number\\\\\\":2,\\\\\\"description\\\\\\":\\\\\\"Extract the year from the current time, which is 2025.\\\\\\"},{\\\\\\"number\\\\\\":3,\\\\\\"description\\\\\\":\\\\\\"Write the year 2025 to a file.\\\\\\"}] }\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 559,
          'gen_ai.usage.output_tokens': 78,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 16532325310903761696,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131386119462896078207759251828454119318,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885323873004979,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 1719491437560380344,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131386119462896078207759251828454119318,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885321881617861,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"steps":[{"number":1,"description":"Get the current time in the America/New_York timezone."},{"number":2,"description":"Extract the year from the current time, which is 2025."},{"number":3,"description":"Write the year 2025 to a file."}] }',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"answer": "{\\"steps\\":[{\\"number\\":1,\\"description\\":\\"Get the current time in the America/New_York timezone.\\"},{\\"number\\":2,\\"description\\":\\"Extract the year from the current time, which is 2025.\\"},{\\"number\\":3,\\"description\\":\\"Write the year 2025 to a file.\\"}] }"}',
          'gen_ai.tool.description': 'Provides a final answer to the given problem.',
          'gen_ai.tool.name': 'final_answer',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8091202148731375738,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131386119462896078207759251828454119318,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885323879238199,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_answer',
        'parent': dict({
          'is_remote': False,
          'span_id': 1719491437560380344,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131386119462896078207759251828454119318,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885323873318806,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1719491437560380344,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131386119462896078207759251828454119318,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885323879491048,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885320425688774,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[TINYAGENT_trace].230444495698468293757941538390565420621
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\":\\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 177,
          'gen_ai.usage.output_tokens': 18,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15654590542848704194,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 230444495698468293757941538390565420621,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885329560333098,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 6519384847676752494,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 230444495698468293757941538390565420621,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885328924125742,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-07T06:48:49-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2571069887459933637,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 230444495698468293757941538390565420621,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885329569962790,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 6519384847676752494,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 230444495698468293757941538390565420621,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885329560516217,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\":\\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 245,
          'gen_ai.usage.output_tokens': 15,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15716256814261954155,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 230444495698468293757941538390565420621,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885330070620907,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 6519384847676752494,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 230444495698468293757941538390565420621,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885329570213898,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': 'None',
          'gen_ai.output.type': 'text',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3112694221666759066,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 230444495698468293757941538390565420621,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885330072156091,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 6519384847676752494,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 230444495698468293757941538390565420621,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885330070812740,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            Steps taken:
            1. Retrieved the current date and time in the America/New_York timezone.
            2. Extracted the year from the retrieved date and time (2025).
            3. Wrote the year (2025) as a single number to a file.
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_tokens': 269,
          'gen_ai.usage.output_tokens': 54,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11632297128369702768,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 230444495698468293757941538390565420621,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885331114236887,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 6519384847676752494,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 230444495698468293757941538390565420621,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885330072325098,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6519384847676752494,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 230444495698468293757941538390565420621,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1751885333325287368,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1751885328923963234,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
