{
  "spans": [
    {
      "name": "call_llm gpt-4.1-mini",
      "kind": "internal",
      "parent": {
<<<<<<< HEAD
<<<<<<< HEAD
        "trace_id": 328098691140313455314272792455481136950,
        "span_id": 8741777053539239902,
=======
        "trace_id": 22383283792740119736535387292755268694,
        "span_id": 15839130850711958450,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
        "trace_id": 89712955212557298532129576975330159916,
        "span_id": 15697530005605789909,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
        "is_remote": false,
        "trace_flags": {
          "value": 0
        },
        "trace_state": {
          "entries": {}
        }
      },
<<<<<<< HEAD
<<<<<<< HEAD
      "start_time": 1751443023116214805,
      "end_time": null,
=======
      "start_time": 1751364638727936700,
      "end_time": 1751364639396497027,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
      "start_time": 1751542078576450210,
      "end_time": 1751542079135316208,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
      "status": {
        "status_code": "ok",
        "description": null
      },
      "context": {
<<<<<<< HEAD
<<<<<<< HEAD
        "trace_id": 328098691140313455314272792455481136950,
        "span_id": 15000329756418140046,
=======
        "trace_id": 22383283792740119736535387292755268694,
        "span_id": 5437505041388993338,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
        "trace_id": 89712955212557298532129576975330159916,
        "span_id": 10677979672150969590,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
        "is_remote": false,
        "trace_flags": {
          "value": 0
        },
        "trace_state": {
          "entries": {}
        }
      },
      "attributes": {
        "gen_ai.operation.name": "call_llm",
        "gen_ai.request.model": "gpt-4.1-mini",
        "gen_ai.input.messages": "[{\"role\": \"system\", \"content\": \"Use the available tools to answer.You must return a Steps JSON string.\\n            This object must match the following schema:\\n            {'$defs': {'Step': {'properties': {'number': {'title': 'Number', 'type': 'integer'}, 'description': {'title': 'Description', 'type': 'string'}}, 'required': ['number', 'description'], 'title': 'Step', 'type': 'object'}}, 'additionalProperties': False, 'properties': {'steps': {'items': {'$ref': '#/$defs/Step'}, 'title': 'Steps', 'type': 'array'}}, 'required': ['steps'], 'title': 'Steps', 'type': 'object'}\\n            You can use the 'final_output' tool to help verify your output\\n            \"}, {\"role\": \"user\", \"content\": \"Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken.\"}]",
        "gen_ai.output": "[{\"tool.name\": \"get_current_time\", \"tool.args\": \"{}\"}]",
        "gen_ai.output.type": "json",
        "gen_ai.usage.input_tokens": 572,
        "gen_ai.usage.output_tokens": 18
      },
      "links": [],
      "events": [],
      "resource": {
        "attributes": {
          "telemetry.sdk.language": "python",
          "telemetry.sdk.name": "opentelemetry",
          "telemetry.sdk.version": "1.34.1",
          "service.name": "unknown_service"
        },
        "schema_url": ""
      }
    },
    {
      "name": "execute_tool get_current_time",
      "kind": "internal",
      "parent": {
<<<<<<< HEAD
<<<<<<< HEAD
        "trace_id": 328098691140313455314272792455481136950,
        "span_id": 8741777053539239902,
=======
        "trace_id": 22383283792740119736535387292755268694,
        "span_id": 15839130850711958450,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
        "trace_id": 89712955212557298532129576975330159916,
        "span_id": 15697530005605789909,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
        "is_remote": false,
        "trace_flags": {
          "value": 0
        },
        "trace_state": {
          "entries": {}
        }
      },
<<<<<<< HEAD
<<<<<<< HEAD
      "start_time": 1751443023773739038,
      "end_time": null,
=======
      "start_time": 1751364639400446111,
      "end_time": 1751364639757409875,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
      "start_time": 1751542079150262159,
      "end_time": 1751542081992555989,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
      "status": {
        "status_code": "ok",
        "description": null
      },
      "context": {
<<<<<<< HEAD
<<<<<<< HEAD
        "trace_id": 328098691140313455314272792455481136950,
        "span_id": 4826029691630229880,
=======
        "trace_id": 22383283792740119736535387292755268694,
        "span_id": 12272479227562662154,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
        "trace_id": 89712955212557298532129576975330159916,
        "span_id": 10743466587921158219,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
        "is_remote": false,
        "trace_flags": {
          "value": 0
        },
        "trace_state": {
          "entries": {}
        }
      },
      "attributes": {
        "gen_ai.operation.name": "execute_tool",
        "gen_ai.tool.name": "get_current_time",
        "gen_ai.tool.description": "Get current time in a specific timezones",
        "gen_ai.tool.args": "{\"timezone\": \"America/New_York\"}",
<<<<<<< HEAD
<<<<<<< HEAD
        "gen_ai.output": "{\n  \"timezone\": \"America/New_York\",\n  \"datetime\": \"2025-07-02T03:57:04-04:00\",\n  \"is_dst\": true\n}",
=======
        "gen_ai.output": "{\n  \"timezone\": \"America/New_York\",\n  \"datetime\": \"2025-07-01T06:10:39-04:00\",\n  \"is_dst\": true\n}",
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
        "gen_ai.output": "{\n  \"timezone\": \"America/New_York\",\n  \"datetime\": \"2025-07-03T07:28:01-04:00\",\n  \"is_dst\": true\n}",
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
        "gen_ai.output.type": "json"
      },
      "links": [],
      "events": [],
      "resource": {
        "attributes": {
          "telemetry.sdk.language": "python",
          "telemetry.sdk.name": "opentelemetry",
          "telemetry.sdk.version": "1.34.1",
          "service.name": "unknown_service"
        },
        "schema_url": ""
      }
    },
    {
      "name": "call_llm gpt-4.1-mini",
      "kind": "internal",
      "parent": {
<<<<<<< HEAD
<<<<<<< HEAD
        "trace_id": 328098691140313455314272792455481136950,
        "span_id": 8741777053539239902,
=======
        "trace_id": 22383283792740119736535387292755268694,
        "span_id": 15839130850711958450,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
        "trace_id": 89712955212557298532129576975330159916,
        "span_id": 15697530005605789909,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
        "is_remote": false,
        "trace_flags": {
          "value": 0
        },
        "trace_state": {
          "entries": {}
        }
      },
<<<<<<< HEAD
<<<<<<< HEAD
      "start_time": 1751443024151366665,
      "end_time": null,
=======
      "start_time": 1751364639760126965,
      "end_time": 1751364640516767452,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
      "start_time": 1751542082077214883,
      "end_time": 1751542082678715552,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
      "status": {
        "status_code": "ok",
        "description": null
      },
      "context": {
<<<<<<< HEAD
<<<<<<< HEAD
        "trace_id": 328098691140313455314272792455481136950,
        "span_id": 8926816263790697600,
=======
        "trace_id": 22383283792740119736535387292755268694,
        "span_id": 13305002561390147001,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
        "trace_id": 89712955212557298532129576975330159916,
        "span_id": 968864978612674509,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
        "is_remote": false,
        "trace_flags": {
          "value": 0
        },
        "trace_state": {
          "entries": {}
        }
      },
      "attributes": {
        "gen_ai.operation.name": "call_llm",
        "gen_ai.request.model": "gpt-4.1-mini",
        "gen_ai.output": "[{\"tool.name\": \"write_file\", \"tool.args\": \"{}\"}]",
        "gen_ai.output.type": "json",
        "gen_ai.usage.input_tokens": 669,
        "gen_ai.usage.output_tokens": 15
      },
      "links": [],
      "events": [],
      "resource": {
        "attributes": {
          "telemetry.sdk.language": "python",
          "telemetry.sdk.name": "opentelemetry",
          "telemetry.sdk.version": "1.34.1",
          "service.name": "unknown_service"
        },
        "schema_url": ""
      }
    },
    {
      "name": "execute_tool write_file",
      "kind": "internal",
      "parent": {
<<<<<<< HEAD
<<<<<<< HEAD
        "trace_id": 328098691140313455314272792455481136950,
        "span_id": 8741777053539239902,
=======
        "trace_id": 22383283792740119736535387292755268694,
        "span_id": 15839130850711958450,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
        "trace_id": 89712955212557298532129576975330159916,
        "span_id": 15697530005605789909,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
        "is_remote": false,
        "trace_flags": {
          "value": 0
        },
        "trace_state": {
          "entries": {}
        }
      },
<<<<<<< HEAD
<<<<<<< HEAD
      "start_time": 1751443024891352272,
      "end_time": null,
=======
      "start_time": 1751364640519909664,
      "end_time": 1751364640520420228,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
      "start_time": 1751542082686670001,
      "end_time": 1751542082693268243,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
      "status": {
        "status_code": "ok",
        "description": null
      },
      "context": {
<<<<<<< HEAD
<<<<<<< HEAD
        "trace_id": 328098691140313455314272792455481136950,
        "span_id": 2493618336866182168,
=======
        "trace_id": 22383283792740119736535387292755268694,
        "span_id": 10125499416320960376,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
        "trace_id": 89712955212557298532129576975330159916,
        "span_id": 4815376649326775764,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
        "is_remote": false,
        "trace_flags": {
          "value": 0
        },
        "trace_state": {
          "entries": {}
        }
      },
      "attributes": {
        "gen_ai.operation.name": "execute_tool",
        "gen_ai.tool.name": "write_file",
        "gen_ai.tool.description": "write_file(text: str) -> None\nwrite the text to a file in the tmp_path directory\n\nArgs:\n    text (str): The text to write to the file.\n\nReturns:\n    None\n",
        "gen_ai.tool.args": "{\"text\": \"2025\"}",
        "gen_ai.output": "\"None\"",
        "gen_ai.output.type": "json"
      },
      "links": [],
      "events": [],
      "resource": {
        "attributes": {
          "telemetry.sdk.language": "python",
          "telemetry.sdk.name": "opentelemetry",
          "telemetry.sdk.version": "1.34.1",
          "service.name": "unknown_service"
        },
        "schema_url": ""
      }
    },
    {
      "name": "call_llm gpt-4.1-mini",
      "kind": "internal",
      "parent": {
<<<<<<< HEAD
<<<<<<< HEAD
        "trace_id": 328098691140313455314272792455481136950,
        "span_id": 8741777053539239902,
=======
        "trace_id": 22383283792740119736535387292755268694,
        "span_id": 15839130850711958450,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
        "trace_id": 89712955212557298532129576975330159916,
        "span_id": 15697530005605789909,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
        "is_remote": false,
        "trace_flags": {
          "value": 0
        },
        "trace_state": {
          "entries": {}
        }
      },
<<<<<<< HEAD
<<<<<<< HEAD
      "start_time": 1751443024893697824,
      "end_time": null,
=======
      "start_time": 1751364640522382985,
      "end_time": 1751364642195529439,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
      "start_time": 1751542082704221087,
      "end_time": 1751542083715100250,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
      "status": {
        "status_code": "ok",
        "description": null
      },
      "context": {
<<<<<<< HEAD
<<<<<<< HEAD
        "trace_id": 328098691140313455314272792455481136950,
        "span_id": 17032615235348679863,
=======
        "trace_id": 22383283792740119736535387292755268694,
        "span_id": 5013988611810076099,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
        "trace_id": 89712955212557298532129576975330159916,
        "span_id": 16261141591694418913,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
        "is_remote": false,
        "trace_flags": {
          "value": 0
        },
        "trace_state": {
          "entries": {}
        }
      },
      "attributes": {
        "gen_ai.operation.name": "call_llm",
        "gen_ai.request.model": "gpt-4.1-mini",
        "gen_ai.output": "[{\"tool.name\": \"final_output\", \"tool.args\": \"{}\"}]",
        "gen_ai.output.type": "json",
        "gen_ai.usage.input_tokens": 693,
        "gen_ai.usage.output_tokens": 78
      },
      "links": [],
      "events": [],
      "resource": {
        "attributes": {
          "telemetry.sdk.language": "python",
          "telemetry.sdk.name": "opentelemetry",
          "telemetry.sdk.version": "1.34.1",
          "service.name": "unknown_service"
        },
        "schema_url": ""
      }
    },
    {
      "name": "execute_tool final_output",
      "kind": "internal",
      "parent": {
<<<<<<< HEAD
<<<<<<< HEAD
        "trace_id": 328098691140313455314272792455481136950,
        "span_id": 8741777053539239902,
=======
        "trace_id": 22383283792740119736535387292755268694,
        "span_id": 15839130850711958450,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
        "trace_id": 89712955212557298532129576975330159916,
        "span_id": 15697530005605789909,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
        "is_remote": false,
        "trace_flags": {
          "value": 0
        },
        "trace_state": {
          "entries": {}
        }
      },
<<<<<<< HEAD
<<<<<<< HEAD
      "start_time": 1751443026332184665,
      "end_time": null,
=======
      "start_time": 1751364642198885659,
      "end_time": 1751364642200298263,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
      "start_time": 1751542083758109153,
      "end_time": 1751542083777039882,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
      "status": {
        "status_code": "ok",
        "description": null
      },
      "context": {
<<<<<<< HEAD
<<<<<<< HEAD
        "trace_id": 328098691140313455314272792455481136950,
        "span_id": 14664627323534379905,
=======
        "trace_id": 22383283792740119736535387292755268694,
        "span_id": 2318882139221024517,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
        "trace_id": 89712955212557298532129576975330159916,
        "span_id": 6993350818525601629,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
        "is_remote": false,
        "trace_flags": {
          "value": 0
        },
        "trace_state": {
          "entries": {}
        }
      },
      "attributes": {
        "gen_ai.operation.name": "execute_tool",
        "gen_ai.tool.name": "final_output",
        "gen_ai.tool.description": "final_output(answer: str) -> dict\nYou must call this tool in order to return the final answer.\n\n        Args:\n            answer: The final output that can be loaded as a Pydantic model. This must be a JSON compatible string that matches the following schema:\n                {'$defs': {'Step': {'properties': {'number': {'title': 'Number', 'type': 'integer'}, 'description': {'title': 'Description', 'type': 'string'}}, 'required': ['number', 'description'], 'title': 'Step', 'type': 'object'}}, 'additionalProperties': False, 'properties': {'steps': {'items': {'$ref': '#/$defs/Step'}, 'title': 'Steps', 'type': 'array'}}, 'required': ['steps'], 'title': 'Steps', 'type': 'object'}\n\n        Returns:\n            A dictionary with the following keys:\n                - success: True if the output is valid, False otherwise.\n                - result: The final output if success is True, otherwise an error message.\n\n        ",
        "gen_ai.tool.args": "{\"answer\": \"{\\\"steps\\\":[{\\\"number\\\":1,\\\"description\\\":\\\"Get the current date and time in the America/New_York timezone.\\\"},{\\\"number\\\":2,\\\"description\\\":\\\"Extract the year from the current date and time.\\\"},{\\\"number\\\":3,\\\"description\\\":\\\"Write the extracted year (2025) to a file.\\\"}] }\"}",
        "gen_ai.output": "{\"success\": true, \"result\": \"{\\\"steps\\\":[{\\\"number\\\":1,\\\"description\\\":\\\"Get the current date and time in the America/New_York timezone.\\\"},{\\\"number\\\":2,\\\"description\\\":\\\"Extract the year from the current date and time.\\\"},{\\\"number\\\":3,\\\"description\\\":\\\"Write the extracted year (2025) to a file.\\\"}] }\"}",
        "gen_ai.output.type": "json"
      },
      "links": [],
      "events": [],
      "resource": {
        "attributes": {
          "telemetry.sdk.language": "python",
          "telemetry.sdk.name": "opentelemetry",
          "telemetry.sdk.version": "1.34.1",
          "service.name": "unknown_service"
        },
        "schema_url": ""
      }
    },
    {
      "name": "call_llm gpt-4.1-mini",
      "kind": "internal",
      "parent": {
<<<<<<< HEAD
<<<<<<< HEAD
        "trace_id": 328098691140313455314272792455481136950,
        "span_id": 8741777053539239902,
=======
        "trace_id": 22383283792740119736535387292755268694,
        "span_id": 15839130850711958450,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
        "trace_id": 89712955212557298532129576975330159916,
        "span_id": 15697530005605789909,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
        "is_remote": false,
        "trace_flags": {
          "value": 0
        },
        "trace_state": {
          "entries": {}
        }
      },
<<<<<<< HEAD
<<<<<<< HEAD
      "start_time": 1751443026337166127,
      "end_time": null,
=======
      "start_time": 1751364642204374759,
      "end_time": 1751364643425029211,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
      "start_time": 1751542083792444858,
      "end_time": 1751542084808840983,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
      "status": {
        "status_code": "ok",
        "description": null
      },
      "context": {
<<<<<<< HEAD
<<<<<<< HEAD
        "trace_id": 328098691140313455314272792455481136950,
        "span_id": 1588588364148630196,
=======
        "trace_id": 22383283792740119736535387292755268694,
        "span_id": 4641189344926901144,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
        "trace_id": 89712955212557298532129576975330159916,
        "span_id": 1573246872727617580,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
        "is_remote": false,
        "trace_flags": {
          "value": 0
        },
        "trace_state": {
          "entries": {}
        }
      },
      "attributes": {
        "gen_ai.operation.name": "call_llm",
        "gen_ai.request.model": "gpt-4.1-mini",
        "gen_ai.output": "{\"steps\":[{\"number\":1,\"description\":\"Get the current date and time in the America/New_York timezone.\"},{\"number\":2,\"description\":\"Extract the year from the current date and time.\"},{\"number\":3,\"description\":\"Write the extracted year (2025) to a file.\"}]}",
        "gen_ai.output.type": "text",
        "gen_ai.usage.input_tokens": 850,
        "gen_ai.usage.output_tokens": 63
      },
      "links": [],
      "events": [],
      "resource": {
        "attributes": {
          "telemetry.sdk.language": "python",
          "telemetry.sdk.name": "opentelemetry",
          "telemetry.sdk.version": "1.34.1",
          "service.name": "unknown_service"
        },
        "schema_url": ""
      }
    },
    {
      "name": "invoke_agent [any_agent]",
      "kind": "internal",
      "parent": {
        "trace_id": null,
        "span_id": null,
        "is_remote": false,
        "trace_flags": {
          "value": 0
        },
        "trace_state": {
          "entries": {}
        }
      },
<<<<<<< HEAD
<<<<<<< HEAD
      "start_time": 1751443023113988677,
      "end_time": 1751443028220298653,
=======
      "start_time": 1751364638725589997,
      "end_time": 1751364643429879093,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
      "start_time": 1751542078404658678,
      "end_time": 1751542084918243705,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
      "status": {
        "status_code": "unset",
        "description": null
      },
      "context": {
<<<<<<< HEAD
<<<<<<< HEAD
        "trace_id": 328098691140313455314272792455481136950,
        "span_id": 8741777053539239902,
=======
        "trace_id": 22383283792740119736535387292755268694,
        "span_id": 15839130850711958450,
>>>>>>> ca8cc62 (feat: Introduce `any_agent/callbacks`.)
=======
        "trace_id": 89712955212557298532129576975330159916,
        "span_id": 15697530005605789909,
>>>>>>> 9adcd0e (Add _SpanGeneration base class)
        "is_remote": false,
        "trace_flags": {
          "value": 0
        },
        "trace_state": {
          "entries": {}
        }
      },
      "attributes": {
        "gen_ai.operation.name": "invoke_agent",
        "gen_ai.agent.name": "any_agent",
        "gen_ai.agent.description": "No description.",
        "gen_ai.request.model": "gpt-4.1-mini"
      },
      "links": [],
      "events": [],
      "resource": {
        "attributes": {
          "telemetry.sdk.language": "python",
          "telemetry.sdk.name": "opentelemetry",
          "telemetry.sdk.version": "1.34.1",
          "service.name": "unknown_service"
        },
        "schema_url": ""
      }
    }
  ],
  "final_output": {
    "steps": [
      {
        "number": 1,
        "description": "Get the current date and time in the America/New_York timezone."
      },
      {
        "number": 2,
        "description": "Extract the year from the current date and time."
      },
      {
        "number": 3,
        "description": "Write the extracted year (2025) to a file."
      }
    ]
  }
}
